namespace mslb;

/*
 * Enum for a stage within a shader pipeline.
 */
enum Stage : ubyte
{
	Vertex,                 // Vertex shader.
	TessellationControl,    // Tessellation control for tessellation shaders.
	TessellationEvaluation, // Evaluation for tessellation shaders.
	Geometry,               // Geometry shader.
	Fragment,               // Fragment shader.
	Compute                 // Compute shader.
}

/*
 * Enum for the type of a uniform.
 */
enum Type : ubyte
{
	// Scalars and vectors
	Float = 0, // float
	Vec2,      // vec2
	Vec3,      // vec3
	Vec4,      // vec4
	Double,    // double
	DVec2,     // dvec2
	DVec3,     // dvec3
	DVec4,     // dvec4
	Int,       // int
	IVec2,     // ivec2
	IVec3,     // ivec3
	IVec4,     // ivec4
	UInt,      // unsigned int
	UVec2,     // uvec2
	UVec3,     // uvec3
	UVec4,     // uvec4
	Bool,      // bool
	BVec2,     // bvec2
	BVec3,     // bvec3
	BVec4,     // bvec4

	// Matrices
	Mat2,    // mat2, mat2x2
	Mat3,    // mat3, mat3x3
	Mat4,    // mat4, mat4x4
	Mat2x3,  // mat2x3
	Mat2x4,  // mat2x4
	Mat3x2,  // mat3x2
	Mat3x4,  // mat3x4
	Mat4x2,  // mat4x2
	Mat4x3,  // mat4x3
	DMat2,   // dmat2, dmat2x2
	DMat3,   // dmat3, dmat3x3
	DMat4,   // dmat4, dmat4x4
	DMat2x3, // dmat2x3
	DMat2x4, // dmat2x4
	DMat3x2, // dmat3x2
	DMat3x4, // dmat3x4
	DMat4x2, // dmat4x2
	DMat4x3, // dmat4x3

	// Samplers
	Sampler1D,            // sampler1D
	Sampler2D,            // sampler2D
	Sampler3D,            // sampler3D
	SamplerCube,          // samplerCube
	Sampler1DShadow,      // sampler1DShadow
	Sampler2DShadow,      // sampler2DShadow
	Sampler1DArray,       // sampler1DArray
	Sampler2DArray,       // sampler2DArray
	Sampler1DArrayShadow, // sampler1DArrayShadow
	Sampler2DArrayShadow, // sampler2DArrayShadow
	Sampler2DMS,          // sampler2DMS
	Sampler2DMSArray,     // sampler2DMSArray
	SamplerCubeShadow,    // samplerCubeShadow
	SamplerBuffer,        // samplerBuffer
	Sampler2DRect,        // sampler2DRect
	Sampler2DRectShadow,  // sampler2DRectShadow
	ISampler1D,           // isampler1D
	ISampler2D,           // isampler2D
	ISampler3D,           // isampler3D
	ISamplerCube,         // isamplerCube
	ISampler1DArray,      // isampler1DArray
	ISampler2DArray,      // isampler2DArray
	ISampler2DMS,         // isampler2DMS
	ISampler2DMSArray,    // isampler2DMSArray
	ISampler2DRect,       // isampler2DRect
	USampler1D,           // usampler1D
	USampler2D,           // usampler2D
	USampler3D,           // usampler3D
	USamplerCube,         // usamplerCube
	USampler1DArray,      // usampler1DArray
	USampler2DArray,      // usampler2DArray
	USampler2DMS,         // usampler2DMS
	USampler2DMSArray,    // usampler2DMSArray
	USampler2DRect,       // usampler2DRect

	// Images
	Image1D,         // image1D
	Image2D,         // image2D
	Image3D,         // image3D
	ImageCube,       // imageCube
	Image1DArray,    // image1DArray
	Image2DArray,    // image2DArray
	Image2DMS,       // image2DMS
	Image2DMSArray,  // image2DMSArray
	ImageBuffer,     // imageBuffer
	Image2DRect,     // image2DRect
	IImage1D,        // iimage1D
	IImage2D,        // iimage2D
	IImage3D,        // iimage3D
	IImageCube,      // iimageCube
	IImage1DArray,   // iimage1DArray
	IImage2DArray,   // iimage2DArray
	IImage2DMS,      // iimage2DMS
	IImage2DMSArray, // iimage2DMSArray
	IImage2DRect,    // iimage2DRect
	UImage1D,        // uimage1D
	UImage2D,        // uimage2D
	UImage3D,        // uimage3D
	UImageCube,      // uimageCube
	UImage1DArray,   // uimage1DArray
	UImage2DArray,   // uimage2DArray
	UImage2DMS,      // uimage2DMS
	UImage2DMSArray, // uimage2DMSArray
	UImage2DRect,    // uimage2DRect

	// Subpass inputs.
	SubpassInput,    // subpassInput
	SubpassInputMS,  // subpassInputMS
	ISubpassInput,   // isubpassInput
	ISubpassInputMS, // isubpassInputMS
	USubpassInput,   // usubpassInput
	USubpassInputMS, // usubpassInputMS

	// Other
	Struct, // User-defined structure.
}

/*
 * Enum for how a uniform is used.
 */
enum UniformType : ubyte
{
	/*
	 * Push-constant buffer. For non-Vulkan targets, the structure elements will become free
	 * uniforms. This will always be a struct.
	 */
	PushConstant = 0,

	/*
	 * A uniform block, which cannot be written to from the shader. This will always be a struct.
	 */
	Block,

	/*
	 * A uniform block buffer, which can be written to from the shader. This will always be a
	 * struct.
	 */
	BlockBuffer,

	/*
	 * An image that doesn't use a sampler.
	 */
	Image,

	/*
	 * An image that uses a sampler to perform filtering, mipmapping, etc.
	 */
	SampledImage,

	/*
	 * Framebuffer input for subpasses.
	 */
	SubpassInput
}

/*
 * Enum for a boolean value that may be unset.
 */
enum Bool : byte
{
	Unset = -1, // No value set.
	False,      // false
	True        // true
}

/*
 * Enum for the polygon mode.
 */
enum PolygonMode : byte
{
	Unset = -1, // No value set.
	Fill,       // Draw filled polygons.
	Line,       // Draw outlines of polygons.
	Point       // Draw points for each vertex.
}

/*
 * Enum for the cull mode.
 */
enum CullMode : byte
{
	Unset = -1,  // No value set.
	None,        // Don't cull any faces.
	Front,       // Cull front faces.
	Back,        // Cull back faces.
	FrontAndBack // Cull front and back faces.
}

/*
 * Enum for the front face.
 */
enum FrontFace : byte
{
	Unset = -1,       // No value set.
	CounterClockwise, // Counter-clockwise faces are front.
	Clockwise         // Clockwise faces are front.
}

/*
 * Enum for stencil operations.
 */
enum StencilOp : byte
{
	Unset = -1,        // No value set.
	Keep,              // Keep the current value.
	Zero,              // Set the value to 0.
	Replace,           // Replace the current value.
	IncrementAndClamp, // Increment the value, clamping to the maximum.
	DecrementAndClamp, // Decrement the value, clamping to 0.
	Invert,            // Inverts the bits of the value.
	IncrementAndWrap,  // Increments the value, wrapping around to 0.
	DecrementAndWrap   // Decrements the value, wrapping around to the maximum.
}

/*
 * Enum for compare operations.
 */
enum CompareOp : byte
{
	Unset = -1,     // No value set.
	Never,          // Never succeed.
	Less,           // Check if a < b.
	Equal,          // Check if a == b.
	LessOrEqual,    // Check if a <= b.
	Greater,        // Check if a > b.
	NotEqual,       // Check if a != b.
	GreaterOrEqual, // Check if a >= b.
	Always          // Always succeed.
}

/*
 * Enum for a blend factor.
 */
enum BlendFactor : byte
{
	Unset = -1,         // No value set.
	Zero,               // Value of 0.
	One,                // Value of 1.
	SrcColor,           // Source color. (from the current fragment)
	OneMinusSrcColor,   // 1 - source color.
	DstColor,           // Destination color. (from the framebuffer)
	OneMinusDstColor,   // 1 - destination color.
	SrcAlpha,           // Source alpha. (from the current fragment)
	OneMinusSrcAlpha,   // 1 - source alpha.
	DstAlpha,           // Destination alpha. (from the framebuffer)
	OneMinusDstAlpha,   // 1 - destination alpha.
	ConstColor,         // Constant user-specified color.
	OneMinusConstColor, // 1 - const color.
	ConstAlpha,         // Constant uer-specified alpha.
	OneMinusConstAlpha, // 1 - const alpha.
	SrcAlphaSaturate,   // Source alpha, clamped the range [0, 1].
	Src1Color,          // Source color from the secondary color buffer.
	OneMinusSrc1Color,  // 1 - secondary source color.
	Src1Alpha,          // Source alpha from the secondary color buffer.
	OneMinusSrc1Alpha   // 1 - secondary source alpha.
}

/*
 * Enum for a blend operation.
 */
enum BlendOp : byte
{
	Unset = -1,      // No value set.
	Add,             // Evaluates a + b.
	Subtract,        // Evaluates a - b.
	ReverseSubtract, // Evaluates b - a.
	Min,             // Evaluates min(a, b).
	Max              // Evaluates max(a, b).
}

/*
 * Enum for a color mask. These values can be OR'd together.
 */
enum ColorMask : byte
{
	Unset =  -1, // No value set.
	None =    0, // Write no color channels.
	Red =   0x1, // Write the red channel.
	Green = 0x2, // Write the green channel.
	Blue =  0x4, // Write the blue channel.
	Alpha = 0x8  // Write the alpha channel.
}

/*
 * Enum for a logical operation.
 */
enum LogicOp : byte
{
	Unset = -1,   // No value set.
	Clear,        // Clear the value to 0.
	And,          // Evaluate a & b.
	AndReverse,   // Evaluate a & ~b.
	Copy,         // Copy a to b.
	AndInverted,  // Evaluate ~a & b.
	NoOp,         // Don't modify the value.
	Xor,          // Evaluate a ^ b.
	Or,           // Evaluate a | b.
	Nor,          // Evaluate ~(a | b).
	Equivalent,   // Evaluate ~(a ^ b).
	Invert,       // Evaluate ~b.
	OrReverse,    // Evaluate a | ~b.
	CopyInverted, // Evaluate ~a.
	OrInverted,   // Evaluate ~a | b.
	Nand,         // Evaluate ~(a & b).
	Set           // Set the value to all 1.
}

/*
 * Enum for how to filter a texture.
 */
enum Filter : byte
{
	Unset = -1, // No value set.
	Nearest,    // Nearest-neighbor filtering.
	Linear      // Linear filtering.
}

/*
 * Enum for how to filter between mips.
 */
enum MipFilter : byte
{
	Unset = -1, // No value set.
	None,       // No mip-mapping.
	Nearest,    // Nearest-neighbor filtering.
	Linear,     // Linear filtering.
	Anisotropic // Anisotropic filtering.
}

/*
 * Enum for how to handle texture addressing.
 */
enum AddressMode : byte
{
	Unset = -1,     // No value set.
	Repeat,         // Repeat the texture beyond the boundary.
	MirroredRepeat, // Repeat the textore, mirroring on each odd repeat.
	ClampToEdge,    // Clamp to the edge, using the texture value along the edge.
	ClampToBorder,  // Clamp to the edge, using the border color.
	MirrorOnce      // Mirror the texture once before clamping it.
}

/*
 * Enum for the border color when using AddressMode ClampToBorder.
 */
enum BorderColor : byte
{
	Unset = -1,         // No value set.
	TransparentBlack,   // All color channels and alpha 0.
	TransparentIntZero, // All color channels and alpha 0. (as integers)
	OpaqueBlack,        // Color channels 0, alpha value 1.
	OpaqueIntZero,      // Color channels 0, alpha value as the int value 1.
	OpaqueWhite,        // All color channelsa and alpha 1.
	OpaqueIntOne        // All color channels and alpha as the int value 1.
}

/*
 * Structure holding the render states used for rasterization.
 */
struct RasterizationState
{
	/*
	 * Clamp the depth values in range rather than clipping.
	 */
	depthClampEnable : Bool;

	/*
	 * Whether or not to discard all samples.
	 */
	rasterizerDiscardEnable : Bool;

	/*
	 * Mode for how to draw polygons.
	 */
	polygonMode : PolygonMode;

	/*
	 * Mode for how to cull front and back faces.
	 */
	cullMode : CullMode;

	/*
	 * The polygon front face.
	 */
	frontFace : FrontFace;

	/*
	 * Whether or not to use depth bias.
	 */
	depthBiasEnable : Bool;

	/*
	 * The constant depth bias to apply.
	 */
	depthBiasConstantFactor : float;

	/*
	 * The minimum or maximum value to clamp the depth bias to.
	 */
	depthBiasClamp : float;

	/*
	 * The depth bias to apply based on the slope of the polygon.
	 */
	depthBiasSlopeFactor : float;

	/*
	 * The width of lines.
	 */
	lineWidth : float;
}

/*
 * Structure for holding multisampling render states.
 */
struct MultisampleState
{
	/*
	 * Whether or not to run the shader for multiple samples.
	 */
	sampleShadingEnable : Bool;

	/*
	 * Hint for how many samples to run the shader on.
	 */
	minSampleShading : float;

	/*
	 * Mask for which samples to run the shader on.
	 */
	sampleMask : uint;

	/*
	 * Whether or not to use the alpha value to control how many samples to use.
	 */
	alphaToCoverageEnable : Bool;

	/*
	 * Whether or not to force the alpha value to 1.
	 */
	alphaToOneEnable : Bool;
}

/*
 * Structure for holding the stencil state.
 */
struct StencilOpState
{
	/*
	 * The operation to perform when failing the stencil test.
	 */
	failOp : StencilOp;

	/*
	 * The operation to perform when passing the stencil test.
	 */
	passOp : StencilOp;

	/*
	 * The operation to perform when failing the depth test.
	 */
	depthFailOp : StencilOp;

	/*
	 * The compare operation for stencil values.
	 */
	compareOp : CompareOp;

	/*
	 * The mask to apply to the values for comparisson.
	 */
	compareMask : uint;

	/*
	 * The mask to apply to the value before writing to the stencil buffer.
	 */
	writeMask : uint;

	/*
	 * Constant reference value.
	 */
	reference : uint;
}

/*
 * Structure for holding the depth render states.
 */
struct DepthStencilState
{
	/*
	 * Whether or not to enable the depth test.
	 */
	depthTestEnable : Bool;

	/*
	 * Whether or not to write the depth value to the depth buffer.
	 */
	depthWriteEnable : Bool;

	/*
	 * The comparisson operation for depth values.
	 */
	depthCompareOp : CompareOp;

	/*
	 * Whether or not to limit the depth range.
	 */
	depthBoundsTestEnable : Bool;

	/*
	 * Whether or not to enable the stencil test.
	 */
	stencilTestEnable : Bool;

	/*
	 * Stencil operations for front faces.
	 */
	frontStencil : StencilOpState;

	/*
	 * Stencil operations for back faces.
	 */
	backStencil : StencilOpState;

	/*
	 * Minimum value when limiting the depth range.
	 */
	minDepthBounds : float;

	/*
	 * Maximum value when limiting the depth range.
	 */
	maxDepthBounds : float;
}

/*
 * Structure for holding the blend states for a color attachment.
 */
struct BlendAttachmentState
{
	/*
	 * Whether or not to enable blending.
	 */
	blendEnable : Bool;

	/*
	 * Blend factor for the source color.
	 */
	srcColorBlendFactor : BlendFactor;

	/*
	 * Blend factor for the destination color.
	 */
	dstColorBlendFactor : BlendFactor;

	/*
	 * The operation to apply to the source and destination color factors.
	 */
	colorBlendOp : BlendOp;

	/*
	 * Blend factor for the source alpha.
	 */
	srcAlphaBlendFactor : BlendFactor;

	/*
	 * Blend factor for the destination alpha.
	 */
	dstAlphaBlendFactor : BlendFactor;

	/*
	 * The operation to apply to the source and destination alpha factors.
	 */
	alphaBlendOp : BlendOp;

	/*
	 * Mask of color channels to write to.
	 */
	colorWriteMask : ColorMask;
}

/*
 * Structure for holding the blend states.
 */
table BlendState
{
	/*
	 * Whether or not to enable logical operations.
	 */
	logicalOpEnable : Bool;

	/*
	 * The logical operation to apply.
	 */
	logicalOp : LogicOp;

	/*
	 * Whether or not to apply separate blending operations for each attachment. If unset, only the
	 * first attachment blend states should be used.
	 */
	separateAttachmentBlendingEnable : Bool;

	/*
	 * The blend states for each color attachment.
	 */
	blendAttachments : [BlendAttachmentState] (required);

	/*
	 * The constant blend factor.
	 */
	blendConstants : [float] (required);
}

/*
 * Structure for holding the render states.
 */
table RenderState
{
	/*
	 * The rasterization states.
	 */
	rasterizationState : RasterizationState (required);

	/*
	 * The multisample states.
	 */
	multisampleState : MultisampleState (required);

	/*
	 * The depth-stencil states.
	 */
	depthStencilState : DepthStencilState (required);

	/*
	 * The blending states.
	 */
	blendState : BlendState (required);

	/*
	 * The number of control points for each patch for tessellation.
	 */
	patchControlPoints : uint;
}

/*
 * Structure for holding the states used for a texture sampler.
 */
struct SamplerState
{
	/*
	 * The filter used for minification.
	 */
	minFilter : Filter;

	/*
	 * The filter used for magnification.
	 */
	magFilter : Filter;

	/*
	 * The filter used for mip-mapping.
	 */
	mipFilter : MipFilter;

	/*
	 * How to address the U (or S) texture coordinate.
	 */
	addressModeU : AddressMode;

	/*
	 * How to address the U (or T) texture coordinate.
	 */
	addressModeV : AddressMode;

	/*
	 * How to address the W (or R) texture coordinate.
	 */
	addressModeW : AddressMode;

	/*
	 * Bias to apply when calculating the mip-mapping LOD.
	 */
	mipLodBias : float;

	/*
	 * The maximum anisotropy factor to apply.
	 */
	maxAnisotropy : float;

	/*
	 * The minimum mip level to use.
	 */
	minLod : float;

	/*
	 * The maximum mip level to use.
	 */
	maxLod : float;

	/*
	 * The border color to apply.
	 */
	borderColor : BorderColor;

	/*
	 * The compare op for shadow samplers.
	 */
	compareOp : CompareOp;
}

/*
 * Structure holding info for an array within a uniform or attribute.
 */
struct ArrayInfo
{
	/*
	 * The length of the array. This will be set to unknown if the size is unknown at compile time.
	 */
	length : uint;

	/*
	 * The stride of the array.
	 */
	stride : uint;
}

/*
 * Structure describing a member of a user-defined struct
 */
table StructMember
{
	/*
	 * The name of the element.
	 */
	name : string (required);

	/*
	 * The offset from the beginning of the structure.
	 */
	offset : uint;

	/*
	 * The size of this member.
	 */
	size : uint;

	/*
	 * The type of the element.
	 */
	type : Type;

	/*
	 * If type is Struct, this is the index to the stucture the member refers to.
	 */
	structIndex : uint;

	/*
	 * Info about each element in the array. This will be empty if this member isn't an array.
	 */
	arrayElements : [ArrayInfo];

	/*
	 * True if type is a matrix type and is row major.
	 */
	rowMajor : bool;
}

/*
 * Structure describing a user-defined struct.
 */
table Struct
{
	/*
	 * The type name of the struct.
	 */
	name : string (required);

	/*
	 * The size of the structure. If an element contains an unknown array length, this will be the
	 * size of the known elements.
	 */
	size : uint;

	/*
	 * The members of the structures.
	 */
	members : [StructMember] (required);
}

/*
 * Structure defining a uniform.
 */
table Uniform
{
	/**
	 * The name of the uniform. If the uniform is a structure, it is the same as the structure name.
	 */
	name : string (required);

	/*
	 * The uniform type, describing how the uniform is bound.
	 */
	uniformType : UniformType;

	/*
	 * The type of the uniform value.
	 */
	type : Type;

	/*
	 * If type is Struct, this is the index to the stucture the member refers to.
	 */
	structIndex : uint;

	/*
	 * Info about each element in the array. This will be empty if this member isn't an array.
	 */
	arrayElements : [ArrayInfo];

	/*
	 * The index of the descriptor set. This may be set to unknown if not set.
	 */
	descriptorSet : uint;

	/*
	 * The binding index. This may be set to unknown if not set.
	 */
	binding : uint;

	/*
	 * The index of the sampler state to use for sampler states. This will be set to unknown for
	 * non-sampler types or when no sampler state is defined.
	 */
	samplerIndex : uint;
}

/*
 * Structure describing a vertex input attribute.
 */
table Attribute
{
	/*
	 * The name of the attribute.
	 */
	name : string (required);

	/*
	 * The type of the attribute.
	 */
	type : Type;

	/*
	 * Info about each element in the array. This will be empty if this member isn't an array.
	 */
	arrayElements : [uint];

	/*
	 * The location of the attribute.
	 */
	location : uint;

	/*
	 * The first component at location to use.
	 */
	component : uint;
}

/*
 * Structure defining a shader within the pipeline.
 */
table Shader
{
	/*
	 * The index of the shader data. This is set to noShader if this stage isn't used.
	 */
	shader : uint;

	/*
	 * The IDs for each unfirom.
	 *
	 * Each unused uniform will be set to unknown, and the vector will be empty if shader is set
	 * to noShader. This will correspond to the SPIR-V IDs for the uniforms, which can be used
	 * to easily adjust the descriptor sets or binding points of the uniforms with minimal
	 * processing.
	 */
	uniformIds : [uint];
}

/*
 * Structure that holds the information about the a pipeline within the compiled result.
 */
table Pipeline
{
	/*
	 * The name of the pipeline.
	 */
	name : string (required);

	/*
	 * The user-defined structs declared for the pipeline.
	 */
	structs : [Struct] (required);

	/*
	 * The sampler states to apply to samplers.
	 */
	samplerStates : [SamplerState] (required);

	/*
	 * The uniforms declared for the pipeline.
	 */
	uniforms : [Uniform] (required);

	/*
	 * The vertex attributes used within the pipeline.
	 */
	attributes : [Attribute] (required);

	/*
	 * Index for the push constant structure.
	 *
	 * The push constant struct members will become individual uniforms for non-Vulkan targets.
	 * This is set to unknown if there are no push constants.
	 */
	pushConstantStruct : uint;

	/*
	 * The render state to apply to the pipeline.
	 */
	renderState : RenderState;

	/*
	* The shaders for the different pipeline stages. This can be indexed by the Stage enum.
	*/
	shaders : [Shader] (required);
}

/*
 * The data for a compiled shader.
 */
table ShaderData
{
	/*
	 * The data for the shader.
	 */
	data : [ubyte] (required);
}

/*
 * A module of shader pipelines.
 */
table Module
{
	/*
	 * The file version.
	 *
	 * This can be used if semantics of various elements change in the future.
	 */
	version : uint;

	/*
	 * The unique ID for the target.
	 *
	 * This is typically 4 char values OR'd together.
	 */
	targetId : uint;

	/*
	 * The version of the target.
	 */
	targetVersion : uint;

	/**
	 * Whether or not the bindings are adjustable.
	 */
	adjustableBindings : bool;

	/*
	 * The shader pipelines.
	 */
	pipelines : [Pipeline] (required);

	/*
	 * The compiled shader data.
	 */
	shaders : [ShaderData] (required);

	/*
	 * The shared shader data for all shaders.
	 */
	sharedData : [ubyte] (required);
}

root_type Module;
