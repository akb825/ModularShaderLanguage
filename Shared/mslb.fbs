namespace mslb;

/*
 * Enum for the type of a uniform.
 */
enum Type : ubyte
{
	// Scalars and vectors
	Float = 0, // float
	Vec2,      // vec2
	Vec3,      // vec3
	Vec4,      // vec4
	Double,    // double
	DVec2,     // dvec2
	DVec3,     // dvec3
	DVec4,     // dvec4
	Int,       // int
	IVec2,     // ivec2
	IVec3,     // ivec3
	IVec4,     // ivec4
	UInt,      // unsigned int
	UVec2,     // uvec2
	UVec3,     // uvec3
	UVec4,     // uvec4
	Bool,      // bool
	BVec2,     // bvec2
	BVec3,     // bvec3
	BVec4,     // bvec4

	// Matrices
	Mat2,    // mat2, mat2x2
	Mat3,    // mat3, mat3x3
	Mat4,    // mat4, mat4x4
	Mat2x3,  // mat2x3
	Mat2x4,  // mat2x4
	Mat3x2,  // mat3x2
	Mat3x4,  // mat3x4
	Mat4x2,  // mat4x2
	Mat4x3,  // mat4x3
	DMat2,   // dmat2, dmat2x2
	DMat3,   // dmat3, dmat3x3
	DMat4,   // dmat4, dmat4x4
	DMat2x3, // dmat2x3
	DMat2x4, // dmat2x4
	DMat3x2, // dmat3x2
	DMat3x4, // dmat3x4
	DMat4x2, // dmat4x2
	DMat4x3, // dmat4x3

	// Samplers
	Sampler1D,            // sampler1D
	Sampler2D,            // sampler2D
	Sampler3D,            // sampler3D
	SamplerCube,          // samplerCube
	Sampler1DShadow,      // sampler1DShadow
	Sampler2DShadow,      // sampler2DShadow
	Sampler1DArray,       // sampler1DArray
	Sampler2DArray,       // sampler2DArray
	Sampler1DArrayShadow, // sampler1DArrayShadow
	Sampler2DArrayShadow, // sampler2DArrayShadow
	Sampler2DMS,          // sampler2DMS
	Sampler2DMSArray,     // sampler2DMSArray
	SamplerCubeShadow,    // samplerCubeShadow
	SamplerBuffer,        // samplerBuffer
	Sampler2DRect,        // sampler2DRect
	Sampler2DRectShadow,  // sampler2DRectShadow
	ISampler1D,           // isampler1D
	ISampler2D,           // isampler2D
	ISampler3D,           // isampler3D
	ISamplerCube,         // isamplerCube
	ISampler1DArray,      // isampler1DArray
	ISampler2DArray,      // isampler2DArray
	ISampler2DMS,         // isampler2DMS
	ISampler2DMSArray,    // isampler2DMSArray
	ISampler2DRect,       // isampler2DRect
	USampler1D,           // usampler1D
	USampler2D,           // usampler2D
	USampler3D,           // usampler3D
	USamplerCube,         // usamplerCube
	USampler1DArray,      // usampler1DArray
	USampler2DArray,      // usampler2DArray
	USampler2DMS,         // usampler2DMS
	USampler2DMSArray,    // usampler2DMSArray
	USampler2DRect,       // usampler2DRect

	// Images
	Image1D,         // image1D
	Image2D,         // image2D
	Image3D,         // image3D
	ImageCube,       // imageCube
	Image1DArray,    // image1DArray
	Image2DArray,    // image2DArray
	Image2DMS,       // image2DMS
	Image2DMSArray,  // image2DMSArray
	ImageBuffer,     // imageBuffer
	Image2DRect,     // image2DRect
	IImage1D,        // iimage1D
	IImage2D,        // iimage2D
	IImage3D,        // iimage3D
	IImageCube,      // iimageCube
	IImage1DArray,   // iimage1DArray
	IImage2DArray,   // iimage2DArray
	IImage2DMS,      // iimage2DMS
	IImage2DMSArray, // iimage2DMSArray
	IImage2DRect,    // iimage2DRect
	UImage1D,        // uimage1D
	UImage2D,        // uimage2D
	UImage3D,        // uimage3D
	UImageCube,      // uimageCube
	UImage1DArray,   // uimage1DArray
	UImage2DArray,   // uimage2DArray
	UImage2DMS,      // uimage2DMS
	UImage2DMSArray, // uimage2DMSArray
	UImage2DRect,    // uimage2DRect

	// Subpass inputs.
	SubpassInput,    // subpassInput
	SubpassInputMS,  // subpassInputMS
	ISubpassInput,   // isubpassInput
	ISubpassInputMS, // isubpassInputMS
	USubpassInput,   // usubpassInput
	USubpassInputMS, // usubpassInputMS

	// Other
	Struct, // User-defined structure.
}

/*
 * Structure describing a uniform.
 *
 * This includes free-floating uniforms, elements of a uniform buffer, or elements of a storage
 * buffer.
 */
table Uniform
{
	/*
	 * The name of the uniform.
	 */
	name : string (required);

	/*
	 * The type of the uniform.
	 */
	type : Type;

	/*
	 * The index of the uniform block this belongs to.
	 *
	 * This is set to 0xFFFFFFFF when not part of a uniform block.
	 */
	blockIndex : uint;

	/*
	 * The offset within the uniform block buffer.
	 *
	 * This is set to 0xFFFFFFFF if the offset isn't known or is not part of a uniform block.
	 * When the offset isn't known, it must be queried from the graphics API.
	 */
	bufferOffset : uint;

	/*
	 * The number of array elements.
	 *
	 * This will be a minimum of 1.
	 */
	elements : uint;
}

/*
 * Structure describing a uniform block or storage buffer.
 *
 * This contains information about the block itself. The contents of the buffer are stored
 * described in the list of Uniforms.
 */
table UniformBlock
{
	/*
	 * The name of the block.
	 */
	name : string (required);

	/*
	 * The size of the block.
	 *
	 * If set to unknown, the size is unknown and must be queried by the graphics API.
	 */
	size : uint;
}

/*
 * Structure describing a vertex attribute.
 */
table Attribute
{
	/*
	 * The name of the attribute.
	 */
	name : string (required);

	/*
	 * The type of the attribute.
	 */
	type : Type;
}

/*
 * Structure that holds the information about the a pipeline within the compiled result.
 */
table Pipeline
{
	/*
	 * The name of the pipeline.
	 */
	name : string (required);

	/*
	 * Index for the shader data for the vertex stage.
	 *
	 * This will be set to 0xFFFFFFFF when no vertex stage.
	 */
	vertex : uint;

	/*
	 * Index for the shader data for the tessellation control stage.
	 *
	 * This will be set to 0xFFFFFFFF when no vertex stage.
	 */
	tessellationControl : uint;

	/*
	 * Index for the shader data for the tessellation evaluation stage.
	 *
	 * This will be set to 0xFFFFFFFF when no vertex stage.
	 */
	tessellationEvaluation : uint;

	/*
	 * Index for the shader data for the geometry stage.
	 *
	 * This will be set to 0xFFFFFFFF when no vertex stage.
	 */
	geometry : uint;

	/*
	 * Index for the shader data for the fragment stage.
	 *
	 * This will be set to 0xFFFFFFFF when no vertex stage.
	 */
	fragment : uint;

	/*
	 * Index for the shader data for the compute stage.
	 *
	 * This will be set to 0xFFFFFFFF when no vertex stage.
	 */
	compute : uint;

	/*
	 * The active uniforms used within the pipeline.
	 */
	uniforms : [Uniform] (required);

	/*
	 * The active uniform blocks used within the pipeline.
	 */
	uniformBlocks : [UniformBlock] (required);

	/*
	 * The active vertex attributes used within the pipeline.
	 */
	attributes : [Attribute] (required);
}

/*
 * The compiled data for a shader stage.
 */
table Shader
{
	/*
	 * The shader data.
	 */
	data : [ubyte];
}

/*
 * A module of shader pipelines.
 */
table Module
{
	/*
	 * The file version.
	 *
	 * This can be used if semantics of various elements change in the future.
	 */
	version : uint;

	/*
	 * The unique ID for the target.
	 *
	 * This is typically 4 char values OR'd together.
	 */
	targetId : uint;

	/*
	 * The version of the target.
	 */
	targetVersion : uint;

	/*
	 * The shader pipelines.
	 */
	pipelines : [Pipeline] (required);

	/*
	 * The compiled shader data.
	 */
	shaders : [Shader] (required);

	/*
	 * The shared shader data for all shaders.
	 */
	sharedData : [ubyte] (required);
}

root_type Module;
