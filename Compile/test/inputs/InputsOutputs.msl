varying(vertex, fragment)
{
	vec2 vec2Val;
	vec3[2] vec3Val;
	vec4 vec4Val;
	flat double doubleVal;
	flat dvec3 dvec3Val;
	flat dvec4 dvec4Val;
	flat int intVal;
	flat ivec2 ivec2Val;
	flat ivec4 ivec4Val;
	flat uint[3] uintVal;
	flat uvec2 uvec2Val;
	flat uvec3 uvec3Val;
	mat2 mat2Val;
	mat4 mat4Val;
	mat2x3[4] mat2x3Val;
	mat3x2 mat3x2Val;
	mat4x3 mat4x3Val;
	flat dmat3 dmat3Val;
	flat dmat4 dmat4Val;
	flat dmat2x4 dmat2x4Val;
	flat dmat3x4 dmat3x4Val;
	flat dmat4x2 dmat4x2Val;

	VertFragBlock
	{
		float floatVal;
		flat dvec2 dvec2Val;
		flat ivec3 ivec3Val;
		flat uvec4 uvec4Val;
		mat3 mat3Val;
		mat2x4 mat2x4Val;
		mat3x4 mat3x4Val;
		mat4x2 mat4x2Val;
		flat dmat2 dmat2Val;
		flat dmat2x3 dmat2x3Val;
		flat dmat3x2[5][2] dmat3x2Val;
		flat dmat4x3 dmat4x3Val;
		float paddingVal;
	};
}

[[vertex]]
void vertShader()
{
	gl_Position = vec4(0.0);
}

[[fragment]] out vec4 color;

[[fragment]]
void fragShader()
{
	color = vec4(1.0);
}

pipeline Test
{
	vertex = vertShader;
	fragment = fragShader;
}
