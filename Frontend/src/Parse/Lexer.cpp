#line 2 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"
#line 2 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
/*
 * Copyright 2016 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <MSL/Frontend/Parse/Lexer.h>
#include <algorithm>
#include <cstring>

#if MSL_GCC || MSL_CLANG
#pragma GCC diagnostic ignored "-Wunused-function"
#endif

#if MSL_GCC
#pragma GCC diagnostic ignored "-Wsubobject-linkage"
#endif

#if MSL_WINDOWS
#define YY_NO_UNISTD_H
#include <io.h>
#endif




#line 40 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mslrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mslrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void mslrestart (FILE *input_file ,yyscan_t yyscanner );
void msl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void msl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void msl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void mslpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void mslpop_buffer_state (yyscan_t yyscanner );

static void mslensure_buffer_stack (yyscan_t yyscanner );
static void msl_load_buffer_state (yyscan_t yyscanner );
static void msl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER msl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE msl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *mslalloc (yy_size_t ,yyscan_t yyscanner );
void *mslrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void mslfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer msl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mslensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mslensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 216
#define YY_END_OF_BUFFER 217
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[754] =
    {   0,
        0,    0,    0,    0,  217,  215,    1,    2,    1,  216,
        6,  193,    7,   10,   17,   18,   12,   14,   28,   15,
       27,   13,  206,  207,   26,   29,   23,   16,   24,   25,
      214,   19,  215,   20,    9,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,   21,   11,   22,    8,  215,   23,  215,    1,    1,
        2,   36,    0,  215,  204,  215,  215,  215,  215,  215,
       30,   40,   42,   44,   45,  211,    0,    4,   43,  210,
      208,  215,  206,  215,  207,  207,   33,   37,   35,   38,
       34,  214,    3,    0,   39,   32,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  214,  214,   55,  214,  214,
      214,  214,  214,   58,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,   41,   31,  215,
        0,  205,    0,   33,   37,  205,    0,    0,    0,    0,
        0,  215,  215,  215,  200,  215,  215,  215,   46,    0,
      211,    0,    0,    0,    0,    4,    4,  210,    0,  210,
        0,    0,  208,  209,   49,   50,   48,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,   57,  214,  214,   85,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,   47,  205,   49,    0,    0,    0,  200,
        0,    0,    0,  215,  215,  215,  215,  215,  215,  215,
      215,  215,    0,  211,  213,    5,    0,    0,  210,    0,
        0,    0,  210,  212,  209,  214,   82,  214,  214,  214,
       62,  214,  214,  214,  214,  214,  214,  214,  214,  214,
       56,  214,   75,  214,  214,  214,  214,  214,  102,  103,
      104,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,   80,  214,   86,  214,  214,  214,   96,   97,   98,

       78,  214,  214,  214,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  215,  201,  202,  215,  215,  215,  215,
      215,  215,    0,  210,  212,  214,   53,  214,   87,   88,
       89,  214,  214,   51,  214,  214,  214,  105,  106,  107,
      214,   99,  100,  101,   81,   83,  214,  214,  214,   90,
       91,   92,  214,  214,  214,  214,   65,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,   93,   94,
       95,  214,   79,  214,    0,  201,  202,    0,    0,    0,
        0,    0,    0,  215,  203,  198,  215,  215,  215,  197,
      214,   67,  214,  214,  214,  214,  214,  214,  214,  214,

       84,  214,  214,  214,  214,  214,  214,  214,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  214,  214,  214,
       60,   66,   68,   76,   77,   61,  214,  214,  214,  214,
      214,    0,  203,  198,    0,    0,    0,  197,  196,  199,
      215,  195,  214,  214,  214,  214,   63,   59,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  214,  214,  214,
      214,  214,  162,  165,  168,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,   64,  214,  214,
      214,  196,  199,    0,  195,  194,  214,   52,   69,   54,
      163,  166,  169,  214,  214,  214,  214,  214,  214,  214,

      214,  214,   72,   71,  214,  214,  214,  214,  214,  164,
      167,  170,  214,  214,  214,   70,  214,  194,  214,  214,
      214,  214,  214,  214,  214,  214,  186,  214,  171,  214,
      214,  214,  214,  214,  214,  126,  127,  128,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
       73,  214,  214,  214,  187,  214,  172,  214,  214,  214,
      214,  214,  137,  138,  139,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  188,  214,  173,
      143,  144,  145,  214,  214,  192,  214,  214,  214,  214,
      214,  214,  214,  214,  174,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  156,  214,  214,  129,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  175,  214,  177,  180,  214,  214,  214,  214,
      157,  214,  140,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  176,  214,  214,  214,  158,
      214,  146,  178,  181,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  149,
      214,  214,  179,  182,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  189,  183,  214,  214,  214,  150,  214,
       74,  133,  214,  134,  214,  214,  214,  214,  214,  214,

      214,  214,  214,  151,  214,  190,  184,  141,  142,  214,
      214,  214,  130,  214,  214,  131,  214,  214,  191,  185,
      147,  148,  214,  214,  214,  214,  214,  214,  159,  152,
      214,  214,  214,  160,  154,  214,  214,  214,  132,  161,
      155,  214,  214,  214,  214,  214,  214,  135,  136,  214,
      214,  153,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    2,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   24,   24,   25,   25,   26,   27,   28,
       29,   30,   31,    1,   32,   33,   34,   35,   36,   37,
       38,   38,   38,   38,   38,   39,   40,   38,   38,   38,
       38,   38,   41,   38,   42,   38,   38,   43,   38,   38,
       44,   45,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   38,   58,   59,   60,   61,
       62,   63,   38,   64,   65,   66,   67,   68,   69,   70,
       71,   38,   72,   73,   74,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    1,    4,    2,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    1,    2,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    2
    } ;

static yyconst flex_uint16_t yy_base[761] =
    {   0,
        0,    0,   69,   70,  475,    0,   76, 5551,   77,  470,
      443,   80, 5551,   73, 5551, 5551,  432,  431, 5551,  426,
       70,   83,  131,   94, 5551, 5551,   57,  425,   70, 5551,
      119, 5551,  100, 5551,   75,  127,  138,  158,  174,  184,
      127,  156,  173,  187,  197,  207,  217,  227,  237,  247,
      257, 5551,   95, 5551, 5551,  324,   78,    0,  136,  156,
     5551, 5551,  320,  354,    0,  396,  108,  109,  382,  384,
      412, 5551, 5551, 5551, 5551,  403,  425,  385, 5551,  444,
      318,  412,    0,  485,    0,    0,  391, 5551, 5551, 5551,
      390,  322, 5551,  415, 5551,  386,  348,  390,  391,  417,

      431,  487,  497,  507,  517,  527,  537,  547,  559,  560,
      573,  585,  586,  598,  599,  615,  616,  632,  633,  645,
      655,  665,  675,  685,  695,  705,  715,  725,  735,  747,
      757,  767,  777,  787,  797,  807,  817, 5551,  385,  884,
      406,    0,  382,   80,  379,  374,  350,  118,  136,  338,
      339,  341,   64,  342,  147,  342,  343,  339, 5551,  902,
     5551,  352,  332,  368,  112,  335,  248,  310,  918, 5551,
      341,  322,    0,  129, 5551, 5551, 5551,  892,  908,  920,
      921,  933,  934,  946,  947,  960,  970,  980,  990, 1004,
     1014, 1024, 1034, 1044, 1054, 1064, 1074, 1084, 1094, 1104,

     1114, 1127, 1128, 1141, 1153, 1154, 1166, 1178, 1140, 1190,
     1200, 1212, 1213, 1230, 1229, 1246, 1256, 1266, 1289, 1279,
     1299, 1309, 1319, 5551,  367,  337,  312,   84,  313,  162,
      311,  310,  305,  291,  291,  291,  286,  279,  276,  268,
      268,  267,  504, 1369, 5551,  305,  313, 1391, 5551,  275,
      257,  884, 1410, 5551,    0, 1383, 1384, 1397, 1410, 1439,
     1420, 1438, 1451, 1452, 1464, 1474, 1486, 1507, 1506, 1528,
     1527, 1540, 1541, 1553, 1563, 1573, 1583, 1606, 1605, 1619,
     1631, 1643, 1653, 1663, 1673, 1683, 1693, 1703, 1713, 1723,
     1733, 1743, 1753, 1763, 1773, 1783, 1796, 1795, 1808, 1809,

     1821, 1822, 1834, 1844,  251,  252,  250,  244,  243,  240,
      229,  227,  228,  217,    0,    0,  222,  218,  218,  201,
      203,  208, 1376, 1894, 5551, 1870, 1882, 1883, 1899, 1909,
     1919, 1929, 1939, 1949, 1959, 1969, 1979, 1989, 2001, 2013,
     2025, 2035, 2045, 2055, 2065, 2075, 2085, 2128, 2098, 2110,
     2111, 2127, 1627, 2171, 2177, 2181,  480, 1405, 2156, 2166,
     2176, 2189, 2199, 2209, 2223, 2233, 2243, 2253, 2263, 2273,
     2283, 2293, 2303, 2313,  200, 5551, 5551,  204,  202,  199,
      181,  185,  185,  185,    0,    0,  183,  180,  179,    0,
     2326, 2325, 2338, 2348, 2358, 2370, 2382, 2425, 2431, 2440,

     1649, 2435, 2450, 2455, 2458, 2474, 2477, 2452, 2462, 2472,
     2485, 2486, 2498, 2499, 2511, 2512, 2524, 2525, 2538, 2548,
     2558, 2568, 2578, 2588, 2598, 2608, 2651, 2621, 2633, 2643,
     2653,  172, 5551, 5551,  161,  160,  155, 5551,    0,    0,
      141,    0, 2663, 2675, 2676, 2688, 2698, 2708, 2718, 2728,
     2738, 2748, 2758, 2768, 2778, 2788, 2798, 2808, 2818, 2828,
     2838, 2850, 2851, 2869, 2868, 2881, 2894, 2893, 2906, 2918,
     2919, 2962, 2970, 2977, 2980, 2986, 2996, 3001, 3004, 2979,
     2989, 5551, 5551,  104, 5551,    0, 2999, 3009, 3019, 3029,
     3041, 3053, 3054, 3066, 3079, 3078, 3091, 3092, 3104, 3114,

     3157, 3127, 3139, 3140, 3153, 3163, 3176, 3175, 3188, 3207,
     3217, 3227, 3237, 3250, 3232, 3293, 3299, 5551, 3302, 3308,
     3317, 3323, 3326, 3249, 3305, 3322, 3334, 3335, 3351, 3363,
     3364, 3377, 3376, 3389, 3401, 3418, 3432, 3431, 3444, 3457,
     3456, 3469, 3470, 3482, 3492, 3505, 3506, 3518, 3528, 3540,
     3541, 3553, 3563, 3573, 3585, 3586, 3602, 3603, 3619, 3620,
     3632, 3633, 3646, 3670, 3656, 3680, 3693, 3692, 3706, 3716,
     3726, 3736, 3746, 3756, 3766, 3776, 3786, 3798, 3799, 3815,
     3825, 3839, 3838, 3851, 3864, 3863, 3880, 3881, 3893, 3894,
     3906, 3907, 3919, 3920, 3932, 3942, 3952, 3962, 3972, 3982,

     3992, 4002, 4012, 4022, 4032, 4045, 4044, 4057, 4067, 4077,
     4087, 4097, 4107, 4117, 4127, 4137, 4147, 4157, 4167, 4177,
     4187, 4197, 4207, 4217, 4227, 4237, 4247, 4257, 4267, 4277,
     4289, 4290, 4306, 4307, 4323, 4335, 4345, 4355, 4368, 4369,
     4381, 4391, 4401, 4411, 4421, 4431, 4441, 4451, 4461, 4474,
     4473, 4490, 4491, 4503, 4513, 4523, 4533, 4543, 4553, 4563,
     4573, 4583, 4593, 4603, 4613, 4623, 4633, 4643, 4653, 4663,
     4673, 4683, 4693, 4703, 4713, 4723, 4733, 4743, 4753, 4763,
     4773, 4783, 4793, 4803, 4813, 4823, 4833, 4843, 4853, 4863,
     4873, 4883, 4893, 4903, 4915, 4916, 4933, 4945, 4946, 4958,

     4959, 4971, 4981, 4991, 5001, 5011, 5021, 5031, 5041, 5051,
     5061, 5071, 5081, 5091, 5101, 5111, 5121, 5131, 5141, 5151,
     5161, 5171, 5181, 5191, 5201, 5211, 5221, 5231, 5241, 5251,
     5261, 5271, 5281, 5291, 5301, 5313, 5325, 5335, 5345, 5355,
     5365, 5375, 5385, 5395, 5405, 5415, 5428, 5429, 5441, 5442,
     5454, 5464, 5551,  143,   86, 5532, 5536, 5540, 5544, 5546
    } ;

static yyconst flex_int16_t yy_def[761] =
    {   0,
      753,    1,    1,    1,  753,  754,  753,  753,  754,  753,
      753,  754,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  754,  754,  753,  753,  753,  753,  753,  753,
      755,  753,  754,  753,  753,  755,  755,  755,  755,  755,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,  753,  753,  753,  753,  756,  757,  754,  753,  754,
      753,  753,  753,  754,  754,  754,  754,  754,  754,  754,
      753,  753,  753,  753,  753,  753,  758,  759,  753,  753,
       23,  754,  754,  754,   24,  754,  753,  753,  753,  753,
      753,   39,  753,  753,  753,  753,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,  753,  753,  756,
      760,  140,  757,  757,  757,  757,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  754,  754,  753,  753,
      753,  753,  753,  758,  758,  759,  759,   80,  753,  753,
      753,  753,  754,   84,  753,  753,  753,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,  753,  760,  757,  753,  753,  753,  753,
      753,  753,  753,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  753,  753,  753,  758,  753,  753,  753,  753,
      753,  753,  753,  753,  754,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  753,  753,  753,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,  348,  348,  348,  348,  348,  348,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  754,  754,  754,  754,  754,  754,  754,
       39,   39,   39,   39,   39,   39,   39,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,  348,   39,   39,   39,
       39,  753,  753,  753,  753,  753,  753,  753,  754,  754,
      754,  754,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,  348,  348,  348,  348,  348,  348,  348,  348,   39,
       39,  753,  753,  753,  753,  754,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

      348,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,  348,  348,  348,  753,  348,  348,
      348,  348,  348,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,    0,  753,  753,  753,  753,  753,  753,  753
    } ;

static yyconst flex_uint16_t yy_nxt[5627] =
    {   0,
        6,    7,    8,    9,   10,   11,    6,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   24,   24,   24,   25,   26,   27,   28,   29,
       30,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   32,   33,   34,   35,   31,   36,   37,
       38,   39,   40,   41,   31,   31,   42,   31,   31,   43,
       44,   31,   45,   46,   47,   48,   49,   50,   51,   31,
       31,   52,   53,   54,   55,   56,   56,   59,   59,   59,
       60,   63,   71,   64,   87,   88,   92,   65,   76,   76,
       76,   76,   76,   76,   76,   77,   57,   57,   90,   91,

       78,   72,   93,   95,   94,  144,  145,  146,  226,  146,
       80,   79,   85,   85,   85,   85,   85,   85,   85,   58,
      235,   96,   58,  138,  165,   58,   58,   58,  236,  246,
       58,   66,   67,   58,   58,   86,   68,   59,   58,   59,
      306,   58,   69,   58,   58,   58,   70,   80,  307,   81,
       81,   81,   81,   81,   81,   82,  518,   59,   58,   60,
       86,   58,  155,   58,   58,   58,  153,  139,  154,  156,
      255,   58,   83,   84,   58,  111,  228,   58,  229,   92,
       58,   58,   58,   92,   58,  112,   92,   58,  113,  230,
       58,   58,   97,  486,   92,  255,  231,   83,  238,   98,

       84,   99,   58,  485,  100,  101,  102,  239,   92,  114,
      103,  484,  115,  309,  483,  116,  117,   92,   58,  104,
      118,  120,  310,  119,  482,   92,  105,  442,   58,   92,
      106,  441,   92,  107,   92,  108,  440,  439,  438,   92,
       92,  109,  110,   92,  437,  122,   92,  436,  121,   92,
      166,  435,  247,   92,   92,  434,   92,  433,   92,  123,
      432,  390,  389,   92,   92,  124,   92,  388,   92,   92,
      387,  386,  125,   92,   92,  385,  126,  384,   92,   92,
      383,  382,  127,   92,   92,  128,   92,  381,   92,   92,
      129,  380,  167,  130,   92,  379,   92,  131,   92,  134,

      378,  132,  377,   92,  133,  376,   92,  375,  135,   92,
      325,  325,  136,   92,   92,  166,   92,  165,   92,  322,
      137,   63,  321,   63,   92,  141,  320,  319,  141,  141,
      142,  318,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  317,  316,  315,  248,  249,  314,  250,  141,
      141,  141,  141,  141,  141,   63,  313,   64,  312,  173,
       58,  311,  248,  249,  308,  305,  146,  141,  251,  141,
      141,  147,  148,  225,   92,  254,  149,  254,   92,  167,
      165,   92,  150,   92,  173,  245,  151,   58,  245,   92,
      242,  241,  240,  237,  234,  141,  141,  141,  141,  233,

       92,  232,  227,  146,   92,   66,   67,   92,  146,  178,
       68,  146,  225,  224,  177,   92,   69,   93,  176,  175,
       70,   76,   76,   76,   76,   76,   76,   76,   80,  167,
       82,   82,   82,   82,   82,   82,   82,  165,  160,  161,
      159,  162,   92,  180,  158,  157,   92,   92,  152,   92,
       92,  179,   92,   89,   75,  160,  161,   92,   92,   74,
       73,  163,  168,  168,  168,  168,  168,  168,  168,   92,
      181,   62,   61,   92,  753,  753,   92,  753,   92,  169,
      170,  753,  171,  182,   92,  753,  753,   92,  753,  753,
       92,  753,   92,  753,  753,  753,  169,  170,   92,   92,

       92,   92,  172,  174,  174,  174,  174,  174,  174,  174,
      753,  753,   92,   92,  753,  753,  174,  174,  174,  174,
      174,  174,  244,  244,  244,  244,  244,  244,  244,  753,
      753,  753,  753,  174,  174,  174,  174,  174,  174,   92,
      753,  753,  753,   92,  753,  753,   92,  753,   92,   92,
      753,  183,  753,   92,   92,  753,   92,  184,   92,   92,
      753,  753,  185,   92,   92,  753,   92,  186,   92,   92,
      187,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  189,   92,  753,   92,   92,
      753,  188,  753,   92,   92,  753,   92,  753,   92,   92,

      753,  753,  753,   92,   92,  753,   92,  753,   92,  753,
      753,  191,   92,  190,   92,   92,   92,  753,   92,   92,
       92,   92,  753,  753,  192,   92,   92,   92,  753,   92,
      753,  193,   92,  194,   92,  753,  753,   92,   92,  753,
       92,   92,   92,  753,   92,   92,  195,   92,  753,  196,
       92,   92,   92,   92,   92,   92,  753,   92,  197,   92,
       92,  753,  753,  198,  753,   92,   92,   92,   92,  753,
      753,   92,   92,  753,   92,   92,   92,   92,  753,  753,
      200,  199,   92,   92,   92,  201,  753,  753,   92,   92,
      753,   92,   92,   92,   92,  753,  753,   92,  753,   92,

       92,   92,  753,  753,   92,  753,   92,   92,  753,  753,
      202,   92,   92,  753,   92,  203,   92,   92,  753,  753,
      753,   92,   92,  205,   92,  753,   92,   92,  753,  753,
      204,   92,   92,  753,   92,  753,   92,   92,  753,  206,
      207,   92,   92,  209,  208,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,  210,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  211,  753,
      753,  212,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,  753,  753,   92,

      753,  213,   92,   92,  753,  753,  214,  215,   92,   92,
      753,  753,  753,  216,   92,  217,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,  218,
      753,  753,  753,   92,   92,  753,   92,  219,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      753,  753,  753,  220,   92,  221,   92,  753,   92,   92,
      753,  753,  753,  222,   92,  753,   92,  753,   92,   92,
      753,  753,  753,  223,   92,  753,   92,  753,   92,  753,
      753,  753,  753,  753,   92,  141,  753,  753,  141,  141,
      142,  753,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  253,  253,  253,  253,  253,  253,  253,  141,
      141,  141,  141,  141,  141,  243,  753,  243,  753,  753,
      244,  244,  244,  244,  244,  244,  244,  141,  753,  141,
      141,  252,  753,  252,  753,  753,  253,  253,  253,  253,
      253,  253,  253,  753,   92,  753,  753,  753,   92,  753,
      753,  256,  753,   92,  753,  141,  141,  141,  141,   92,
       92,  753,  753,  753,   92,  753,  257,   92,  258,   92,
      753,  753,   92,   92,  259,   92,   92,   92,  753,   92,
       92,   92,   92,  260,  753,   92,  261,   92,   92,   92,
       92,  753,   92,   92,   92,   92,  753,  753,   92,  263,

       92,   92,   92,   92,  753,   92,   92,   92,   92,  753,
      753,  262,   92,   92,   92,  753,   92,  753,  266,   92,
      753,   92,   92,  753,  264,  265,   92,   92,  753,   92,
      267,   92,   92,  753,  753,  753,   92,   92,  753,   92,
      753,   92,   92,  753,  753,  753,   92,   92,  753,   92,
      753,   92,  753,  269,  753,  268,   92,   92,  753,  753,
       92,  753,  753,   92,  270,   92,   92,  753,  753,  753,
       92,   92,  753,   92,  753,   92,  271,  753,  753,  753,
       92,   92,  753,   92,  753,   92,   92,  753,  753,  753,
       92,   92,  753,   92,  753,   92,   92,  753,  272,  753,

       92,   92,  274,   92,  753,   92,   92,  753,  753,  273,
       92,   92,  753,   92,  753,   92,   92,  753,  753,  753,
       92,   92,  275,   92,  753,   92,   92,  753,  753,  753,
       92,   92,  753,   92,  753,   92,   92,  753,  276,  753,
       92,   92,  753,   92,  753,   92,   92,  279,  280,  281,
       92,   92,  753,   92,  753,   92,   92,  753,  753,  753,
       92,   92,  753,  277,  278,   92,   92,  753,  753,  753,
       92,   92,  753,   92,  753,   92,  753,  753,  753,   92,
       92,   92,  753,   92,   92,  753,   92,   92,   92,   92,
      282,  283,   92,   92,   92,   92,   92,   92,  753,   92,

       92,   92,   92,  288,  284,   92,   92,   92,   92,   92,
       92,  753,   92,   92,   92,   92,  753,  753,   92,  285,
       92,   92,   92,  753,  753,   92,  753,   92,  753,  753,
       92,  753,  286,   92,   92,  753,  753,   92,  753,   92,
      287,  753,   92,  753,  753,   92,   92,  753,  753,   92,
      753,  289,   92,  753,  753,  753,   92,   92,  753,   92,
      753,   92,  753,  753,   92,  292,  290,   92,   92,   92,
      753,   92,   92,   92,   92,  753,  753,  291,  293,   92,
       92,   92,   92,  753,  753,   92,   92,  753,   92,   92,
       92,   92,  753,  753,  294,  753,   92,   92,   92,  295,

      753,  753,   92,  753,  753,   92,  753,   92,   92,  298,
      299,  300,   92,   92,  753,  296,  297,   92,   92,  753,
      753,  753,   92,   92,  753,   92,  753,   92,  753,  753,
      301,   92,  753,   92,  753,   92,  753,  753,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  302,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  753,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  303,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  753,   92,  753,
       92,  753,  753,  753,  304,  753,   92,  244,  244,  244,
      244,  244,  244,  244,  324,  324,  324,  324,  324,  324,

      324,  753,  753,  753,  323,  161,  323,  162,  753,  324,
      324,  324,  324,  324,  324,  324,  753,  753,  753,  753,
      753,  753,  161,  753,   92,   92,   92,  163,  253,  253,
      253,  253,  253,  253,  253,   92,   92,   92,   92,  326,
       92,  753,   92,   92,   92,   92,  170,  753,  171,   92,
       92,   92,  753,   92,  327,  753,   92,  753,   92,  329,
      330,  331,  328,  170,   92,  419,   92,  753,  172,   92,
      753,   92,   92,  753,  753,  753,   92,   92,  753,   92,
      753,   92,  753,  753,  753,  753,  753,   92,  753,  753,
       92,   92,  753,  753,   92,   92,  753,   92,   92,   92,

       92,  332,  753,   92,   92,   92,   92,   92,   92,  753,
       92,   92,   92,   92,  333,  753,   92,  334,   92,   92,
      335,  753,  753,   92,  753,   92,   92,  338,  339,  340,
       92,   92,  753,   92,  337,   92,  753,  753,   92,  753,
      336,   92,   92,  753,  753,   92,  753,   92,  342,  343,
      344,  753,  753,   92,  753,  753,  753,  753,   92,   92,
      753,  753,   92,   92,  341,   92,   92,   92,   92,  753,
      753,  753,  753,   92,   92,  753,  753,  753,  753,   92,
       92,  753,  753,   92,   92,  753,   92,   92,   92,   92,
      753,  753,  345,   92,   92,   92,   92,   92,  753,   92,

       92,   92,   92,  753,  753,   92,  753,   92,   92,   92,
      753,  753,   92,  753,   92,   92,  753,  347,  346,   92,
       92,  753,   92,  753,   92,  348,  350,  351,  352,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,  349,   92,  409,  410,  411,
       92,  753,  753,  753,  753,  753,  753,   92,   92,   92,
       92,   92,   92,  753,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,  353,   92,  753,  753,   92,  753,
       92,   92,   92,   92,  753,  753,   92,   92,  354,  753,
       92,  753,   92,  753,  753,  356,  753,  753,   92,   92,

      355,  753,   92,  753,   92,   92,  753,  753,  357,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,  358,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  359,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  360,  753,  753,   92,
       92,  361,   92,  753,   92,  362,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  364,   92,   92,  753,  753,  363,   92,
       92,  753,   92,  365,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,

       92,  753,   92,  753,   92,   92,  753,  366,  753,   92,
       92,  753,   92,  753,   92,   92,  369,  370,  371,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,  367,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,  368,  753,   92,   92,  753,
       92,   92,   92,  753,   92,   92,   92,   92,  753,  753,
       92,   92,   92,   92,   92,   92,  753,   92,   92,   92,
       92,  753,  753,   92,   92,   92,   92,   92,   92,  753,
       92,   92,   92,   92,  753,  753,  373,  372,   92,   92,
       92,  753,  753,   92,  753,   92,  374,  753,  753,  753,

       92,   92,  753,   92,  753,   92,  753,  753,  753,  753,
      753,   92,  324,  324,  324,  324,  324,  324,  324,  753,
      391,  753,   92,  753,  753,  753,   92,  753,  753,   92,
      249,   92,  250,  753,   92,   92,  753,   92,   92,   92,
      753,   92,   92,   92,   92,  753,  392,  249,  753,   92,
       92,   92,  251,  753,  753,   92,  753,  753,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  753,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  753,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  753,   92,  753,
      393,  394,  753,  753,  753,   92,   92,  753,   92,  753,

       92,   92,  753,  753,  753,   92,   92,  753,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  753,   92,  395,
       92,   92,  753,  753,  753,   92,   92,  396,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  753,   92,  753,
       92,   92,  397,  753,  753,   92,   92,  753,   92,  753,
       92,  753,  753,   92,  753,  753,   92,   92,  398,  753,
       92,  753,   92,  753,  753,   92,  753,  753,   92,   92,
      399,  753,   92,  753,   92,  753,  753,  401,  753,  753,
       92,   92,  400,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,

      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,  402,  753,  753,
      753,   92,   92,  753,   92,  753,   92,  403,  404,  405,
       92,  753,   92,  753,   92,  753,  408,   92,  753,   92,
      406,  407,   92,   92,  753,   92,   92,   92,  753,   92,
       92,   92,   92,  753,  753,  753,  753,   92,   92,   92,
       92,  753,  753,   92,   92,  753,   92,   92,   92,   92,
       92,  412,  413,  414,   92,   92,   92,  415,  416,  417,

       92,   92,   92,   92,   92,  753,  753,  753,   92,   92,
       92,  753,  420,   92,   92,   92,  753,   92,   92,  753,
      753,  753,   92,   92,  753,   92,  421,   92,  422,  753,
      753,  753,   92,   92,  753,   92,  753,   92,  753,  753,
      423,   92,  753,   92,  418,   92,  753,  753,   92,  753,
       92,   92,  753,  753,  424,   92,   92,  753,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  753,   92,  753,
       92,  753,  753,  753,  425,   92,   92,  753,  426,   92,
      753,  753,   92,  753,   92,  427,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,

       92,  753,   92,  753,   92,   92,  428,  753,  753,   92,
       92,  429,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,  430,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  443,  431,  753,  753,   92,   92,  753,
       92,   92,   92,  753,   92,   92,   92,   92,  753,  753,
       92,  753,   92,   92,  444,  753,  753,   92,  753,   92,

       92,  753,  753,  753,   92,   92,  753,   92,  445,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
      753,  753,   92,  753,  446,   92,   92,  753,  753,   92,
      753,   92,  753,  448,   92,  447,  753,   92,   92,  753,
      753,   92,  753,   92,   92,  449,  450,  451,  753,   92,
       92,  452,  453,  454,  458,  459,  460,   92,   92,   92,
      455,  456,  457,   92,   92,  753,  753,  461,  462,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
      753,  753,   92,   92,  463,  753,  753,   92,   92,  464,
       92,   92,  465,   92,   92,   92,   92,   92,   92,  753,

      753,  753,  753,  753,  468,  753,   92,   92,   92,   92,
       92,   92,  753,   92,   92,  753,  753,  753,   92,   92,
      753,   92,  753,   92,   92,  753,  753,  753,   92,   92,
      753,   92,  753,   92,  753,  753,  753,   92,   92,   92,
      466,   92,   92,  467,   92,   92,   92,   92,  753,  753,
       92,   92,   92,   92,   92,   92,  753,   92,   92,   92,
       92,  753,  753,   92,   92,   92,   92,   92,   92,  753,
       92,   92,   92,   92,  753,  753,   92,   92,   92,   92,
       92,   92,  753,   92,   92,   92,   92,  753,  753,  469,
       92,   92,   92,  753,   92,  753,  470,   92,  471,   92,

       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  472,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
      473,  474,  475,   92,  753,   92,  753,   92,  753,  753,
      478,  753,   92,  476,  477,  479,  753,  753,   92,   92,
      753,  753,   92,  753,   92,   92,  753,  753,  753,   92,

       92,  480,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  481,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,  753,  488,   92,   92,  487,
       92,   92,   92,  753,   92,   92,   92,   92,  753,  753,
      490,  489,   92,   92,   92,  753,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,

       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  491,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  492,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  493,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  496,  753,   92,   92,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,

      497,  753,   92,   92,  494,   92,   92,   92,  498,   92,
       92,   92,   92,  753,  753,  753,  495,   92,   92,  753,
       92,   92,  753,  753,   92,   92,  753,   92,   92,   92,
       92,  753,  753,   92,  499,   92,   92,   92,  753,  753,
       92,  753,   92,  500,  753,   92,   92,  753,   92,   92,
       92,  753,   92,   92,   92,   92,  501,  753,   92,  753,
       92,   92,   92,  753,  753,   92,  753,   92,  502,  753,
       92,   92,  753,   92,   92,   92,  753,   92,   92,   92,
       92,  505,  506,  507,  504,   92,   92,  753,  503,   92,
       92,   92,  753,  753,  508,  509,   92,   92,   92,   92,

       92,   92,   92,   92,  510,   92,   92,   92,  753,   92,
       92,  511,   92,   92,  512,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,  753,  753,   92,   92,
      753,  516,  753,   92,   92,   92,   92,   92,   92,  753,
       92,   92,  753,  753,  753,   92,   92,  517,   92,  753,
       92,   92,  513,  753,  753,  519,   92,  753,   92,  753,
       92,   92,  514,  753,  753,   92,   92,  515,   92,  753,
       92,   92,  520,  753,  753,   92,   92,  753,   92,  753,
       92,   92,  753,  753,  521,   92,   92,  753,   92,  753,
       92,  753,  522,   92,  753,  753,   92,   92,  753,  753,

       92,  753,   92,  753,  753,   92,   92,  753,   92,   92,
       92,  753,   92,   92,   92,   92,  753,  753,   92,  523,
       92,   92,   92,  753,  753,   92,  753,   92,  524,  753,
       92,   92,  527,   92,   92,   92,  753,   92,   92,   92,
       92,  525,  753,   92,   92,   92,   92,   92,   92,  753,
       92,   92,   92,   92,  526,  753,   92,  528,   92,   92,
       92,  753,  753,   92,  753,   92,  529,  753,  753,  753,
       92,   92,  753,   92,  753,   92,  530,  531,  532,  535,
      753,   92,  753,   92,  753,  753,   92,  536,   92,  533,
      534,   92,   92,  753,   92,   92,   92,  537,   92,   92,

       92,   92,  753,  753,  753,   92,   92,   92,  753,   92,
      538,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,  753,  753,   92,   92,  753,
       92,   92,   92,  753,   92,   92,   92,   92,  541,  753,
       92,  539,   92,   92,   92,  753,  753,   92,  542,   92,
      753,  546,  547,  548,  540,   92,  543,  753,  753,   92,
      753,  753,  753,   92,  549,  550,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      544,  753,  753,   92,   92,  753,   92,  753,   92,  545,

      753,  557,   92,  753,   92,   92,   92,  753,   92,   92,
       92,   92,   92,   92,   92,  753,   92,   92,   92,   92,
       92,   92,   92,   92,  753,   92,   92,   92,   92,   92,
      753,   92,   92,  753,   92,   92,   92,   92,   92,  753,
       92,   92,   92,   92,   92,   92,   92,   92,  753,   92,
       92,  753,  753,  753,  753,   92,   92,   92,   92,   92,
      753,   92,  552,  555,   92,  560,   92,  753,  558,  551,
      753,  553,   92,  753,   92,  753,  753,  753,   92,  556,
      554,   92,  562,   92,  753,  559,   92,  561,  753,   92,
       92,   92,  753,   92,   92,   92,   92,  563,  564,  753,

      753,   92,   92,   92,  753,  753,  753,   92,  753,  753,
       92,  565,   92,  753,  753,   92,   92,  753,   92,   92,
       92,  753,   92,   92,   92,   92,  753,  753,   92,   92,
       92,   92,   92,   92,  753,   92,   92,   92,   92,  753,
      753,   92,  566,   92,   92,   92,  753,  753,   92,  569,
       92,  568,  753,   92,  753,  567,   92,   92,  570,  753,
       92,  753,   92,  571,  753,  753,  753,  753,   92,  753,
       92,  572,  573,  753,   92,  753,  753,   92,  753,   92,
      753,  753,  753,   92,   92,   92,  753,   92,   92,  753,
       92,   92,   92,   92,  753,  753,   92,  574,   92,   92,

       92,  753,  753,   92,  753,   92,  575,  753,   92,   92,
      578,   92,   92,   92,  753,   92,   92,   92,   92,  576,
      753,   92,   92,   92,   92,   92,   92,  753,   92,   92,
       92,   92,  577,  753,   92,  579,   92,   92,   92,  581,
      582,   92,  753,   92,  580,  753,  753,  753,   92,   92,
      753,   92,  583,   92,  753,  753,  753,   92,   92,   92,
      753,   92,   92,  753,   92,   92,   92,   92,  753,  753,
       92,  753,   92,   92,   92,  753,  753,   92,  753,   92,
       92,  753,  753,  753,   92,   92,  753,   92,  753,   92,
      753,  753,   92,   92,  584,   92,   92,   92,  753,   92,

       92,   92,   92,  753,  753,   92,  585,   92,   92,   92,
      753,  753,   92,  753,   92,   92,  589,  753,  586,   92,
       92,  753,   92,  753,   92,   92,  587,  753,  753,   92,
       92,  753,   92,  591,   92,  753,  588,   92,  590,  753,
       92,   92,   92,  753,   92,   92,   92,   92,  753,  753,
      753,  592,   92,   92,   92,   92,  753,  753,   92,   92,
      753,   92,   92,   92,   92,  753,  753,  593,  753,   92,
       92,   92,   92,  753,  753,   92,   92,  597,   92,   92,
       92,   92,  753,  594,   92,   92,   92,   92,   92,   92,
      753,   92,   92,   92,   92,  595,  596,  753,   92,   92,

       92,  598,   92,  753,  753,   92,  753,   92,   92,  599,
      753,  753,   92,   92,  753,   92,  753,   92,  753,  753,
      753,  753,   92,   92,  753,  753,   92,  753,  753,   92,
      753,   92,   92,  600,  753,  753,   92,   92,  753,   92,
      753,   92,  601,  753,   92,   92,  753,   92,   92,   92,
      753,   92,   92,   92,   92,  753,  753,  602,   92,   92,
       92,  753,   92,  753,  753,   92,  753,   92,   92,  603,
      753,  604,   92,   92,  753,   92,  606,   92,   92,  753,
      753,  753,   92,   92,  753,   92,  753,   92,   92,  605,
      753,  753,   92,   92,  753,   92,  753,   92,   92,  753,

      753,  607,   92,   92,  753,   92,  753,   92,   92,  608,
      753,  753,   92,   92,  753,   92,  753,   92,  609,  753,
      753,  753,   92,   92,  753,   92,  753,   92,   92,  612,
      753,  753,   92,   92,  753,   92,  753,   92,   92,  610,
      753,  753,   92,   92,  753,   92,  614,   92,  753,  611,
       92,  613,  753,   92,   92,   92,  615,   92,   92,   92,
       92,  753,  753,  753,  753,   92,   92,   92,  753,  753,
      616,   92,  753,  753,   92,  753,   92,   92,  617,  753,
      753,   92,   92,  753,   92,  753,   92,  753,  753,  753,
       92,   92,   92,  753,   92,   92,  753,   92,   92,   92,

       92,  753,  753,   92,  618,   92,   92,   92,  753,  753,
       92,  753,   92,  619,  753,   92,   92,  753,   92,   92,
       92,  753,   92,   92,   92,   92,  753,  753,  620,  621,
       92,   92,   92,   92,  753,  753,   92,   92,  753,   92,
       92,   92,   92,  753,  753,   92,   92,   92,   92,   92,
       92,  753,   92,   92,   92,   92,  622,  623,   92,   92,
       92,   92,   92,   92,  753,   92,   92,   92,   92,  624,
      753,   92,   92,   92,   92,   92,   92,  625,   92,   92,
       92,   92,  753,  627,   92,  753,   92,   92,   92,  626,
      753,   92,  753,   92,   92,  753,  753,  753,   92,   92,

      753,   92,  753,   92,   92,  628,  753,  753,   92,   92,
      753,   92,  631,   92,   92,  629,  753,  753,   92,   92,
      753,   92,  753,   92,   92,  630,  753,  753,   92,   92,
      753,   92,  753,   92,   92,  632,  753,  753,   92,   92,
      753,   92,  753,   92,  633,  753,  753,  753,   92,   92,
      753,   92,  753,   92,   92,  753,  753,  753,  634,   92,
      753,   92,  753,   92,   92,  753,  753,  753,   92,   92,
      636,   92,  753,   92,   92,  635,  638,  753,   92,   92,
      753,   92,  753,   92,   92,  753,  753,  753,   92,   92,
      753,   92,  639,   92,  753,  637,   92,   92,  641,   92,

       92,   92,  753,   92,   92,   92,   92,  642,  753,  640,
      753,   92,   92,   92,  753,  753,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  643,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  644,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      645,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      646,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      647,  753,  753,   92,   92,  753,   92,  650,   92,   92,
      648,  753,  753,   92,   92,  753,   92,  753,   92,   92,

      649,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      651,  753,  753,   92,   92,  753,   92,  753,   92,  652,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  653,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  654,   92,   92,
      655,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      656,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  657,   92,  753,   92,   92,

      753,  753,  753,   92,   92,  658,   92,  753,   92,   92,
      753,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      661,  753,  753,   92,   92,  753,   92,  753,   92,   92,
      659,  753,  753,   92,   92,  753,   92,  663,   92,  753,
      660,   92,  662,  753,   92,   92,   92,  753,   92,   92,
       92,   92,  753,  753,  753,  753,   92,   92,   92,   92,
      753,  753,   92,   92,  753,   92,   92,   92,   92,  753,
      753,  665,  753,   92,  664,   92,  753,  753,  753,   92,
      753,  753,   92,  753,   92,  753,  666,   92,  753,  753,
       92,   92,  753,  667,   92,  753,   92,   92,  753,  753,

      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,  753,  668,  669,
       92,   92,   92,  753,   92,   92,  753,   92,   92,   92,
       92,  753,  670,   92,  753,   92,   92,   92,  753,  753,
       92,  753,   92,   92,  671,  753,  672,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  673,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  674,   92,   92,  675,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,

       92,  753,   92,   92,  676,  679,  753,   92,   92,  753,
       92,  753,   92,   92,  677,  753,  753,   92,   92,  753,
       92,  681,   92,  753,  678,  680,   92,  753,   92,   92,
       92,  753,   92,   92,   92,   92,  753,  753,  753,  753,
       92,   92,   92,   92,  753,  753,   92,   92,  753,   92,
       92,   92,   92,  753,  753,   92,  753,   92,   92,   92,
      753,  682,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  683,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,

       92,  686,   92,  684,   92,   92,  753,  753,  753,   92,
       92,  687,   92,  685,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  688,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  689,  753,  753,   92,
       92,  753,   92,  753,   92,  691,  690,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  692,  693,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,

       92,  753,   92,  694,   92,   92,  695,  753,  753,   92,
       92,  753,   92,  753,  696,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  698,   92,  753,   92,   92,  697,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  699,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  700,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  701,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  702,   92,  753,   92,   92,  753,  753,  753,   92,

       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  703,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  704,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  705,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  706,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  707,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  708,   92,   92,  753,  753,  753,   92,

       92,  753,   92,  709,   92,   92,  710,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  712,   92,   92,  711,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  714,   92,   92,  753,  753,  753,   92,
       92,  753,   92,  753,   92,   92,  753,  753,  753,   92,
       92,  713,   92,  715,   92,  753,  753,   92,   92,  753,
       92,   92,   92,  753,   92,   92,   92,   92,  753,  753,
      753,  717,   92,   92,  716,   92,  753,  753,  753,   92,
      753,  753,   92,  753,   92,  753,  718,   92,   92,  753,

       92,   92,   92,  753,   92,   92,   92,   92,  753,  753,
       92,   92,   92,   92,   92,   92,  719,   92,   92,   92,
       92,  753,  753,   92,  753,   92,   92,   92,  720,  721,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  722,   92,   92,  723,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  724,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  725,

       92,  753,   92,   92,  753,  753,  753,   92,   92,  726,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  727,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  728,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  729,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  730,  731,   92,  753,  753,  753,   92,   92,  753,

       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  732,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  733,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  736,
       92,  734,   92,   92,  753,  753,  753,   92,   92,  737,
       92,  735,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  738,   92,   92,  753,  753,  753,   92,   92,  753,

       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  739,
       92,  753,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  740,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  741,   92,   92,  753,  753,  753,   92,   92,  753,
       92,  753,   92,  753,  742,   92,  753,  753,   92,   92,
      753,  753,   92,  753,   92,  753,  743,   92,  753,  753,
       92,   92,  753,  753,   92,  753,   92,   92,  753,  753,
      744,   92,   92,  753,   92,  753,   92,   92,  753,  753,

      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,  745,   92,  753,  753,
      753,   92,   92,  747,   92,  753,  746,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  753,   92,  753,   92,   92,  753,  753,
      753,   92,   92,  748,   92,  753,   92,  753,  753,  750,
       92,   92,   92,  749,   92,   92,  753,   92,   92,   92,
       92,  753,  753,   92,   92,   92,   92,   92,   92,  753,

       92,   92,   92,  751,  753,  753,   92,  753,   92,   92,
       92,  753,  753,   92,  753,   92,   92,  753,  753,  753,
       92,   92,  752,   92,  753,   92,  753,  753,  753,  753,
      753,   92,  140,  140,  753,  140,  143,  143,  753,  143,
      164,  164,  164,  164,  166,  166,  141,  141,  753,  141,
        5,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753
    } ;

static yyconst flex_int16_t yy_chk[5627] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    7,    9,    7,
        9,   12,   14,   12,   27,   27,  755,   12,   21,   21,
       21,   21,   21,   21,   21,   22,    3,    4,   29,   29,

       22,   14,   33,   35,   33,   57,   57,   57,  144,  144,
       24,   22,   24,   24,   24,   24,   24,   24,   24,   31,
      153,   35,   31,   53,  165,   31,   31,   36,  153,  165,
       36,   12,   12,   36,   36,   24,   12,   59,   37,   59,
      228,   37,   12,  754,   37,   37,   12,   23,  228,   23,
       23,   23,   23,   23,   23,   23,  484,   60,   38,   60,
       24,   38,   68,   31,   38,   38,   67,   53,   67,   68,
      174,   36,   23,   23,   39,   41,  148,   39,  148,   41,
       39,   39,   37,   41,   40,   41,   41,   40,   41,  149,
       40,   40,   36,  441,   41,  174,  149,   23,  155,   37,

       23,   37,   38,  437,   37,   37,   38,  155,   42,   42,
       38,  436,   42,  230,  435,   42,   42,   42,   39,   38,
       42,   43,  230,   42,  432,   43,   39,  389,   40,   43,
       39,  388,   43,   39,   43,   39,  387,  384,  383,   44,
       43,   39,   40,   44,  382,   45,   44,  381,   44,   45,
      167,  380,  167,   45,   44,  379,   45,  378,   45,   46,
      375,  322,  321,   46,   45,   47,   46,  320,   46,   47,
      319,  318,   47,   47,   46,  317,   47,  314,   47,   48,
      313,  312,   47,   48,   47,   47,   48,  311,   48,   49,
       48,  310,  167,   49,   48,  309,   49,   49,   49,   50,

      308,   49,  307,   50,   49,  306,   50,  305,   50,   51,
      251,  250,   51,   51,   50,  247,   51,  246,   51,  242,
       51,   63,  241,   63,   51,   56,  240,  239,   56,   56,
       56,  238,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,  237,  236,  235,  168,  168,  234,  168,   56,
       56,   56,   56,   56,   56,   64,  233,   64,  232,   81,
       81,  231,  168,  168,  229,  227,  226,   56,  168,   56,
       56,   63,   63,  225,   92,  172,   63,  171,   92,  166,
      164,   92,   63,   92,   81,  163,   63,   81,  162,   92,
      158,  157,  156,  154,  152,   56,   56,   56,   56,  151,

       97,  150,  147,  146,   97,   64,   64,   97,  145,   97,
       64,  143,  141,  139,   96,   97,   64,   94,   91,   87,
       64,   76,   76,   76,   76,   76,   76,   76,   82,   78,
       82,   82,   82,   82,   82,   82,   82,   77,   76,   76,
       71,   76,   98,   99,   70,   69,   98,   99,   66,   98,
       99,   98,   99,   28,   20,   76,   76,   98,   99,   18,
       17,   76,   80,   80,   80,   80,   80,   80,   80,  100,
      100,   11,   10,  100,    5,    0,  100,    0,  100,   80,
       80,    0,   80,  101,  100,    0,    0,  101,    0,    0,
      101,    0,  101,    0,    0,    0,   80,   80,  101,  357,

      357,  357,   80,   84,   84,   84,   84,   84,   84,   84,
        0,    0,  357,  357,    0,    0,   84,   84,   84,   84,
       84,   84,  243,  243,  243,  243,  243,  243,  243,    0,
        0,    0,    0,   84,   84,   84,   84,   84,   84,  102,
        0,    0,    0,  102,    0,    0,  102,    0,  102,  103,
        0,  102,    0,  103,  102,    0,  103,  103,  103,  104,
        0,    0,  104,  104,  103,    0,  104,  104,  104,  105,
      105,    0,    0,  105,  104,    0,  105,    0,  105,  106,
        0,    0,    0,  106,  105,  107,  106,    0,  106,  107,
        0,  106,    0,  107,  106,    0,  107,    0,  107,  108,

        0,    0,    0,  108,  107,    0,  108,    0,  108,    0,
        0,  109,  110,  108,  108,  109,  110,    0,  109,  110,
      109,  110,    0,    0,  110,  111,  109,  110,    0,  111,
        0,  111,  111,  112,  111,    0,    0,  112,  113,    0,
      111,  112,  113,    0,  112,  113,  112,  113,    0,  113,
      114,  115,  112,  113,  114,  115,    0,  114,  115,  114,
      115,    0,    0,  116,    0,  114,  115,  116,  117,    0,
        0,  116,  117,    0,  116,  117,  116,  117,    0,    0,
      118,  117,  116,  117,  118,  119,    0,    0,  118,  119,
        0,  118,  119,  118,  119,    0,    0,  120,    0,  118,

      119,  120,    0,    0,  120,    0,  120,  121,    0,    0,
      120,  121,  120,    0,  121,  121,  121,  122,    0,    0,
        0,  122,  121,  123,  122,    0,  122,  123,    0,    0,
      122,  123,  122,    0,  123,    0,  123,  124,    0,  123,
      123,  124,  123,  125,  124,    0,  124,  125,    0,    0,
        0,  125,  124,    0,  125,    0,  125,  126,    0,    0,
        0,  126,  125,    0,  126,    0,  126,  127,    0,    0,
        0,  127,  126,    0,  127,    0,  127,  128,  127,    0,
        0,  128,  127,    0,  128,    0,  128,  129,    0,    0,
        0,  129,  128,    0,  129,    0,  129,    0,    0,  130,

        0,  129,  129,  130,    0,    0,  130,  130,  130,  131,
        0,    0,    0,  131,  130,  132,  131,    0,  131,  132,
        0,    0,    0,  132,  131,    0,  132,    0,  132,  133,
        0,    0,    0,  133,  132,    0,  133,  134,  133,  134,
        0,    0,    0,  134,  133,    0,  134,    0,  134,  135,
        0,    0,    0,  135,  134,  135,  135,    0,  135,  136,
        0,    0,    0,  136,  135,    0,  136,    0,  136,  137,
        0,    0,    0,  137,  136,    0,  137,    0,  137,    0,
        0,    0,    0,    0,  137,  140,    0,    0,  140,  140,
      140,    0,  140,  140,  140,  140,  140,  140,  140,  140,

      140,  140,  252,  252,  252,  252,  252,  252,  252,  140,
      140,  140,  140,  140,  140,  160,    0,  160,    0,    0,
      160,  160,  160,  160,  160,  160,  160,  140,    0,  140,
      140,  169,    0,  169,    0,    0,  169,  169,  169,  169,
      169,  169,  169,    0,  178,    0,    0,    0,  178,    0,
        0,  178,    0,  178,    0,  140,  140,  140,  140,  178,
      179,    0,    0,    0,  179,    0,  179,  179,  180,  179,
        0,    0,  180,  181,  181,  179,  180,  181,    0,  180,
      181,  180,  181,  182,    0,  182,  183,  180,  181,  182,
      183,    0,  182,  183,  182,  183,    0,    0,  184,  185,

      182,  183,  184,  185,    0,  184,  185,  184,  185,    0,
        0,  184,  186,  184,  185,    0,  186,    0,  187,  186,
        0,  186,  187,    0,  186,  186,  187,  186,    0,  187,
      188,  187,  188,    0,    0,    0,  188,  187,    0,  188,
        0,  188,  189,    0,    0,    0,  189,  188,    0,  189,
        0,  189,    0,  190,    0,  189,  190,  189,    0,    0,
      190,    0,    0,  190,  191,  190,  191,    0,    0,    0,
      191,  190,    0,  191,    0,  191,  192,    0,    0,    0,
      192,  191,    0,  192,    0,  192,  193,    0,    0,    0,
      193,  192,    0,  193,    0,  193,  194,    0,  193,    0,

      194,  193,  195,  194,    0,  194,  195,    0,    0,  194,
      195,  194,    0,  195,    0,  195,  196,    0,    0,    0,
      196,  195,  197,  196,    0,  196,  197,    0,    0,    0,
      197,  196,    0,  197,    0,  197,  198,    0,  198,    0,
      198,  197,    0,  198,    0,  198,  199,  202,  202,  202,
      199,  198,    0,  199,    0,  199,  200,    0,    0,    0,
      200,  199,    0,  200,  201,  200,  201,    0,    0,    0,
      201,  200,    0,  201,    0,  201,    0,    0,    0,  202,
      203,  201,    0,  202,  203,    0,  202,  203,  202,  203,
      203,  204,  209,  204,  202,  203,  209,  204,    0,  209,

      204,  209,  204,  209,  205,  205,  206,  209,  204,  205,
      206,    0,  205,  206,  205,  206,    0,    0,  207,  206,
      205,  206,  207,    0,    0,  207,    0,  207,    0,    0,
      208,    0,  207,  207,  208,    0,    0,  208,    0,  208,
      208,    0,  210,    0,    0,  208,  210,    0,    0,  210,
        0,  210,  211,    0,    0,    0,  211,  210,    0,  211,
        0,  211,    0,    0,  212,  213,  211,  211,  212,  213,
        0,  212,  213,  212,  213,    0,    0,  212,  214,  212,
      213,  215,  214,    0,    0,  215,  214,    0,  215,  214,
      215,  214,    0,    0,  215,    0,  215,  214,  216,  216,

        0,    0,  216,    0,    0,  216,    0,  216,  217,  219,
      219,  219,  217,  216,    0,  217,  218,  217,  218,    0,
        0,    0,  218,  217,    0,  218,    0,  218,    0,    0,
      220,  220,    0,  218,    0,  220,    0,    0,  220,    0,
      220,  219,    0,    0,    0,  219,  220,  221,  219,    0,
      219,  221,    0,    0,    0,  221,  219,    0,  221,    0,
      221,  222,    0,    0,    0,  222,  221,  222,  222,    0,
      222,  223,    0,    0,    0,  223,  222,    0,  223,    0,
      223,    0,    0,    0,  223,    0,  223,  244,  244,  244,
      244,  244,  244,  244,  323,  323,  323,  323,  323,  323,

      323,    0,    0,    0,  248,  244,  248,  244,    0,  248,
      248,  248,  248,  248,  248,  248,    0,    0,    0,    0,
        0,    0,  244,    0,  358,  358,  358,  244,  253,  253,
      253,  253,  253,  253,  253,  256,  257,  358,  358,  256,
      257,    0,  256,  257,  256,  257,  253,    0,  253,  258,
      256,  257,    0,  258,  258,    0,  258,    0,  258,  260,
      260,  260,  259,  253,  258,  358,  259,    0,  253,  259,
        0,  259,  261,    0,    0,    0,  261,  259,    0,  261,
        0,  261,    0,    0,    0,    0,    0,  261,    0,    0,
      262,  260,    0,    0,  262,  260,    0,  262,  260,  262,

      260,  262,    0,  263,  264,  262,  260,  263,  264,    0,
      263,  264,  263,  264,  263,    0,  265,  264,  263,  264,
      265,    0,    0,  265,    0,  265,  266,  268,  268,  268,
      266,  265,    0,  266,  267,  266,    0,    0,  267,    0,
      266,  266,  267,    0,    0,  267,    0,  267,  270,  270,
      270,    0,    0,  267,    0,    0,    0,    0,  269,  268,
        0,    0,  269,  268,  269,  269,  268,  269,  268,    0,
        0,    0,    0,  269,  268,    0,    0,    0,    0,  271,
      270,    0,    0,  271,  270,    0,  271,  270,  271,  270,
        0,    0,  272,  273,  271,  270,  272,  273,    0,  272,

      273,  272,  273,    0,    0,  274,    0,  272,  273,  274,
        0,    0,  274,    0,  274,  275,    0,  275,  274,  275,
      274,    0,  275,    0,  275,  276,  278,  278,  278,  276,
      275,    0,  276,    0,  276,  277,    0,    0,    0,  277,
      276,    0,  277,    0,  277,  277,  353,  353,  353,  353,
      277,    0,    0,    0,    0,    0,    0,  279,  278,  353,
      353,  279,  278,    0,  279,  278,  279,  278,  401,  401,
      401,  280,  279,  278,  279,  280,    0,    0,  280,    0,
      280,  401,  401,  281,    0,    0,  280,  281,  280,    0,
      281,    0,  281,    0,    0,  282,    0,    0,  281,  282,

      281,    0,  282,    0,  282,  283,    0,    0,  283,  283,
      282,    0,  283,    0,  283,  284,    0,    0,    0,  284,
      283,    0,  284,    0,  284,  285,    0,    0,    0,  285,
      284,    0,  285,    0,  285,  286,  285,    0,    0,  286,
      285,    0,  286,    0,  286,  287,  286,    0,    0,  287,
      286,  287,  287,    0,  287,  288,    0,    0,    0,  288,
      287,    0,  288,    0,  288,  289,    0,    0,    0,  289,
      288,    0,  289,  290,  289,  290,    0,    0,  289,  290,
      289,    0,  290,  291,  290,  291,    0,    0,    0,  291,
      290,    0,  291,    0,  291,  292,    0,    0,    0,  292,

      291,    0,  292,    0,  292,  293,    0,  293,    0,  293,
      292,    0,  293,    0,  293,  294,  297,  297,  297,  294,
      293,    0,  294,    0,  294,  295,    0,    0,    0,  295,
      294,    0,  295,    0,  295,  296,    0,    0,    0,  296,
      295,    0,  296,    0,  296,  296,    0,  298,  297,    0,
      296,  298,  297,    0,  298,  297,  298,  297,    0,    0,
      299,  300,  298,  297,  299,  300,    0,  299,  300,  299,
      300,    0,    0,  301,  302,  299,  300,  301,  302,    0,
      301,  302,  301,  302,    0,    0,  303,  302,  301,  302,
      303,    0,    0,  303,    0,  303,  304,    0,    0,    0,

      304,  303,    0,  304,    0,  304,    0,    0,    0,    0,
        0,  304,  324,  324,  324,  324,  324,  324,  324,    0,
      326,    0,  326,    0,    0,    0,  326,    0,    0,  326,
      324,  326,  324,    0,  327,  328,    0,  326,  327,  328,
        0,  327,  328,  327,  328,    0,  328,  324,    0,  327,
      328,  329,  324,    0,    0,  329,    0,    0,  329,    0,
      329,  330,    0,    0,    0,  330,  329,    0,  330,    0,
      330,  331,    0,    0,    0,  331,  330,    0,  331,    0,
      331,  332,    0,    0,    0,  332,  331,    0,  332,    0,
      332,  333,    0,    0,    0,  333,  332,    0,  333,    0,

      333,  334,    0,    0,    0,  334,  333,    0,  334,    0,
      334,  335,    0,    0,    0,  335,  334,    0,  335,  335,
      335,  336,    0,    0,    0,  336,  335,  336,  336,    0,
      336,  337,    0,    0,    0,  337,  336,    0,  337,    0,
      337,  338,  337,    0,    0,  338,  337,    0,  338,    0,
      338,    0,    0,  339,    0,    0,  338,  339,  338,    0,
      339,    0,  339,    0,    0,  340,    0,    0,  339,  340,
      339,    0,  340,    0,  340,    0,    0,  341,    0,    0,
      340,  341,  340,    0,  341,    0,  341,  342,    0,    0,
        0,  342,  341,    0,  342,    0,  342,  343,    0,    0,

        0,  343,  342,    0,  343,    0,  343,  344,    0,    0,
        0,  344,  343,    0,  344,    0,  344,  345,    0,    0,
        0,  345,  344,    0,  345,    0,  345,  346,    0,    0,
        0,  346,  345,    0,  346,    0,  346,  347,    0,    0,
        0,  347,  346,    0,  347,    0,  347,  348,  348,  348,
      349,    0,  347,    0,  349,    0,  349,  349,    0,  349,
      348,  348,  350,  351,    0,  349,  350,  351,    0,  350,
      351,  350,  351,    0,    0,    0,    0,  350,  351,  352,
      348,    0,    0,  352,  348,    0,  352,  348,  352,  348,
      354,  354,  354,  354,  352,  348,  355,  355,  355,  355,

      356,  356,  356,  354,  354,    0,    0,    0,  359,  355,
      355,    0,  359,  356,  356,  359,    0,  359,  360,    0,
        0,    0,  360,  359,    0,  360,  360,  360,  361,    0,
        0,    0,  361,  360,    0,  361,    0,  361,    0,    0,
      362,  362,    0,  361,  356,  362,    0,    0,  362,    0,
      362,  363,    0,    0,  363,  363,  362,    0,  363,    0,
      363,  364,    0,    0,    0,  364,  363,    0,  364,    0,
      364,    0,    0,    0,  364,  365,  364,    0,  365,  365,
        0,    0,  365,    0,  365,  366,    0,    0,    0,  366,
      365,    0,  366,    0,  366,  367,    0,    0,    0,  367,

      366,    0,  367,    0,  367,  368,  367,    0,    0,  368,
      367,  368,  368,    0,  368,  369,    0,    0,    0,  369,
      368,    0,  369,    0,  369,  370,    0,    0,    0,  370,
      369,    0,  370,    0,  370,  371,    0,    0,    0,  371,
      370,    0,  371,    0,  371,  372,    0,    0,    0,  372,
      371,    0,  372,    0,  372,  373,    0,    0,    0,  373,
      372,    0,  373,    0,  373,  374,    0,    0,    0,  374,
      373,    0,  374,  391,  374,    0,    0,  392,  391,    0,
      374,  392,  391,    0,  392,  391,  392,  391,    0,    0,
      393,    0,  392,  391,  393,    0,    0,  393,    0,  393,

      394,    0,    0,    0,  394,  393,    0,  394,  394,  394,
      395,    0,    0,    0,  395,  394,    0,  395,    0,  395,
        0,    0,  396,    0,  395,  395,  396,    0,    0,  396,
        0,  396,    0,  397,  397,  396,    0,  396,  397,    0,
        0,  397,    0,  397,  398,  398,  398,  398,    0,  397,
      399,  399,  399,  399,  402,  402,  402,  398,  398,  400,
      400,  400,  400,  399,  399,    0,    0,  402,  402,  403,
      403,  403,  400,  400,  404,  404,  404,  405,  405,  405,
        0,    0,  403,  403,  403,    0,    0,  404,  404,  404,
      405,  405,  405,  406,  406,  406,  407,  407,  407,    0,

        0,    0,    0,    0,  408,    0,  406,  406,  408,  407,
      407,  408,    0,  408,  409,    0,    0,    0,  409,  408,
        0,  409,    0,  409,  410,    0,    0,    0,  410,  409,
        0,  410,    0,  410,    0,    0,    0,  411,  412,  410,
      406,  411,  412,  407,  411,  412,  411,  412,    0,    0,
      413,  414,  411,  412,  413,  414,    0,  413,  414,  413,
      414,    0,    0,  415,  416,  413,  414,  415,  416,    0,
      415,  416,  415,  416,    0,    0,  417,  418,  415,  416,
      417,  418,    0,  417,  418,  417,  418,    0,    0,  418,
      419,  417,  418,    0,  419,    0,  419,  419,  420,  419,

      420,    0,    0,    0,  420,  419,    0,  420,    0,  420,
      421,    0,    0,    0,  421,  420,    0,  421,    0,  421,
      422,    0,    0,    0,  422,  421,    0,  422,    0,  422,
      423,  422,    0,    0,  423,  422,    0,  423,    0,  423,
      424,    0,    0,    0,  424,  423,    0,  424,    0,  424,
      425,    0,    0,    0,  425,  424,    0,  425,    0,  425,
      426,    0,    0,    0,  426,  425,    0,  426,    0,  426,
      427,  427,  427,  428,    0,  426,    0,  428,    0,    0,
      428,    0,  428,  427,  427,  429,    0,    0,  428,  429,
        0,    0,  429,    0,  429,  430,    0,    0,    0,  430,

      429,  430,  430,    0,  430,  431,    0,    0,    0,  431,
      430,    0,  431,  431,  431,  443,    0,    0,    0,  443,
      431,    0,  443,    0,  443,    0,  444,  444,  445,  443,
      443,  444,  445,    0,  444,  445,  444,  445,    0,    0,
      446,  445,  444,  445,  446,    0,    0,  446,    0,  446,
      447,    0,    0,    0,  447,  446,    0,  447,    0,  447,
      448,    0,    0,    0,  448,  447,    0,  448,    0,  448,
      449,    0,    0,    0,  449,  448,    0,  449,    0,  449,
      450,    0,    0,    0,  450,  449,    0,  450,    0,  450,
      451,    0,    0,    0,  451,  450,    0,  451,    0,  451,

      452,    0,    0,    0,  452,  451,    0,  452,    0,  452,
      453,    0,    0,    0,  453,  452,    0,  453,    0,  453,
      454,    0,    0,    0,  454,  453,    0,  454,    0,  454,
      455,    0,    0,    0,  455,  454,    0,  455,    0,  455,
      456,    0,  458,    0,  456,  455,    0,  456,    0,  456,
      457,    0,  459,    0,  457,  456,    0,  457,    0,  457,
      458,    0,  460,    0,  458,  457,    0,  458,    0,  458,
      459,    0,    0,    0,  459,  458,    0,  459,    0,  459,
      460,    0,  463,    0,  460,  459,    0,  460,    0,  460,
      461,    0,    0,    0,  461,  460,    0,  461,    0,  461,

      464,    0,  462,  463,  461,  461,  462,  463,  464,  462,
      463,  462,  463,    0,    0,    0,  462,  462,  463,    0,
      465,  464,    0,    0,  465,  464,    0,  465,  464,  465,
      464,    0,    0,  466,  466,  465,  464,  466,    0,    0,
      466,    0,  466,  467,    0,  468,  467,    0,  466,  468,
      467,    0,  468,  467,  468,  467,  468,    0,  469,    0,
      468,  467,  469,    0,    0,  469,    0,  469,  469,    0,
      470,  471,    0,  469,  470,  471,    0,  470,  471,  470,
      471,  472,  472,  472,  471,  470,  471,    0,  470,  473,
      473,  473,    0,    0,  472,  472,  474,  474,  474,  475,

      475,  475,  473,  473,  473,  476,  476,  476,    0,  474,
      474,  474,  475,  475,  475,  477,  477,  477,  476,  476,
      478,  478,  478,  479,  479,  479,    0,    0,  477,  477,
        0,  480,    0,  478,  478,  480,  479,  479,  480,    0,
      480,  481,    0,    0,    0,  481,  480,  481,  481,    0,
      481,  487,  476,    0,    0,  487,  481,    0,  487,    0,
      487,  488,  477,    0,    0,  488,  487,  479,  488,    0,
      488,  489,  491,    0,    0,  489,  488,    0,  489,    0,
      489,  490,    0,    0,  492,  490,  489,    0,  490,    0,
      490,    0,  492,  491,    0,    0,  490,  491,    0,    0,

      491,    0,  491,    0,    0,  492,  493,    0,  491,  492,
      493,    0,  492,  493,  492,  493,    0,    0,  494,  494,
      492,  493,  494,    0,    0,  494,    0,  494,  495,    0,
      496,  495,  498,  494,  496,  495,    0,  496,  495,  496,
      495,  496,    0,  497,  498,  496,  495,  497,  498,    0,
      497,  498,  497,  498,  497,    0,  499,  499,  497,  498,
      499,    0,    0,  499,    0,  499,  500,    0,    0,    0,
      500,  499,    0,  500,    0,  500,  501,  501,  501,  502,
        0,  500,    0,  502,    0,    0,  502,  505,  502,  501,
      501,  503,  504,    0,  502,  503,  504,  506,  503,  504,

      503,  504,    0,    0,    0,  505,  503,  504,    0,  505,
      507,    0,  505,    0,  505,  506,    0,    0,    0,  506,
      505,    0,  506,    0,  506,    0,    0,  508,  507,    0,
      506,  508,  507,    0,  508,  507,  508,  507,  510,    0,
      509,  508,  508,  507,  509,    0,    0,  509,  511,  509,
        0,  515,  515,  515,  509,  509,  511,    0,    0,  510,
        0,    0,    0,  510,  515,  515,  510,    0,  510,  511,
        0,    0,    0,  511,  510,    0,  511,    0,  511,  512,
        0,    0,    0,  512,  511,    0,  512,    0,  512,  513,
      513,    0,    0,  513,  512,    0,  513,    0,  513,  514,

        0,  524,  514,    0,  513,  524,  514,    0,  524,  514,
      524,  514,  516,  516,  516,    0,  524,  514,  517,  517,
      517,  519,  519,  519,    0,  516,  516,  520,  520,  520,
        0,  517,  517,    0,  519,  519,  521,  521,  521,    0,
      520,  520,  522,  522,  522,  523,  523,  523,    0,  521,
      521,    0,    0,    0,    0,  522,  522,  525,  523,  523,
        0,  525,  519,  522,  525,  527,  525,    0,  525,  517,
        0,  520,  525,    0,  526,    0,    0,    0,  526,  523,
      521,  526,  529,  526,    0,  526,  527,  528,    0,  526,
      527,  528,    0,  527,  528,  527,  528,  530,  531,    0,

        0,  527,  528,  529,    0,    0,    0,  529,    0,    0,
      529,  532,  529,    0,    0,  530,  531,    0,  529,  530,
      531,    0,  530,  531,  530,  531,    0,    0,  533,  532,
      530,  531,  533,  532,    0,  533,  532,  533,  532,    0,
        0,  534,  533,  533,  532,  534,    0,    0,  534,  536,
      534,  535,    0,  535,    0,  534,  534,  535,  536,    0,
      535,    0,  535,  537,    0,    0,    0,    0,  535,    0,
      536,  537,  537,    0,  536,    0,    0,  536,    0,  536,
        0,    0,    0,  538,  537,  536,    0,  538,  537,    0,
      538,  537,  538,  537,    0,    0,  539,  539,  538,  537,

      539,    0,    0,  539,    0,  539,  540,    0,  541,  540,
      543,  539,  541,  540,    0,  541,  540,  541,  540,  541,
        0,  542,  543,  541,  540,  542,  543,    0,  542,  543,
      542,  543,  542,    0,  544,  544,  542,  543,  544,  546,
      547,  544,    0,  544,  545,    0,    0,    0,  545,  544,
        0,  545,  548,  545,    0,    0,    0,  546,  547,  545,
        0,  546,  547,    0,  546,  547,  546,  547,    0,    0,
      548,    0,  546,  547,  548,    0,    0,  548,    0,  548,
      549,    0,    0,    0,  549,  548,    0,  549,    0,  549,
        0,    0,  550,  551,  549,  549,  550,  551,    0,  550,

      551,  550,  551,    0,    0,  552,  550,  550,  551,  552,
        0,    0,  552,    0,  552,  553,  555,    0,  552,  553,
      552,    0,  553,    0,  553,  554,  553,    0,    0,  554,
      553,    0,  554,  557,  554,    0,  554,  555,  556,    0,
      554,  555,  556,    0,  555,  556,  555,  556,    0,    0,
        0,  558,  555,  556,  557,  558,    0,    0,  557,  558,
        0,  557,  558,  557,  558,    0,    0,  559,    0,  557,
      558,  559,  560,    0,    0,  559,  560,  563,  559,  560,
      559,  560,    0,  560,  561,  562,  559,  560,  561,  562,
        0,  561,  562,  561,  562,  561,  562,    0,  563,  561,

      562,  564,  563,    0,    0,  563,    0,  563,  565,  564,
        0,    0,  565,  563,    0,  565,    0,  565,    0,    0,
        0,    0,  564,  565,    0,    0,  564,    0,    0,  564,
        0,  564,  566,  566,    0,    0,  566,  564,    0,  566,
        0,  566,  567,    0,  568,  567,    0,  566,  568,  567,
        0,  568,  567,  568,  567,    0,    0,  568,  569,  568,
      567,    0,  569,    0,    0,  569,    0,  569,  570,  569,
        0,  570,  570,  569,    0,  570,  572,  570,  571,    0,
        0,    0,  571,  570,    0,  571,    0,  571,  572,  571,
        0,    0,  572,  571,    0,  572,    0,  572,  573,    0,

        0,  573,  573,  572,    0,  573,    0,  573,  574,  574,
        0,    0,  574,  573,    0,  574,    0,  574,  575,    0,
        0,    0,  575,  574,    0,  575,    0,  575,  576,  578,
        0,    0,  576,  575,    0,  576,    0,  576,  577,  576,
        0,    0,  577,  576,    0,  577,  580,  577,    0,  577,
      578,  579,    0,  577,  578,  579,  581,  578,  579,  578,
      579,    0,    0,    0,    0,  578,  579,  580,    0,    0,
      582,  580,    0,    0,  580,    0,  580,  581,  582,    0,
        0,  581,  580,    0,  581,    0,  581,    0,    0,    0,
      583,  582,  581,    0,  583,  582,    0,  583,  582,  583,

      582,    0,    0,  584,  584,  583,  582,  584,    0,    0,
      584,    0,  584,  585,    0,  586,  585,    0,  584,  586,
      585,    0,  586,  585,  586,  585,    0,    0,  587,  588,
      586,  585,  587,  588,    0,    0,  587,  588,    0,  587,
      588,  587,  588,    0,    0,  589,  590,  587,  588,  589,
      590,    0,  589,  590,  589,  590,  589,  590,  591,  592,
      589,  590,  591,  592,    0,  591,  592,  591,  592,  591,
        0,  593,  594,  591,  592,  593,  594,  592,  593,  594,
      593,  594,    0,  594,  595,    0,  593,  594,  595,  593,
        0,  595,    0,  595,  596,    0,    0,    0,  596,  595,

        0,  596,    0,  596,  597,  596,    0,    0,  597,  596,
        0,  597,  599,  597,  598,  597,    0,    0,  598,  597,
        0,  598,    0,  598,  599,  598,    0,    0,  599,  598,
        0,  599,    0,  599,  600,  600,    0,    0,  600,  599,
        0,  600,    0,  600,  601,    0,    0,    0,  601,  600,
        0,  601,    0,  601,  602,    0,    0,    0,  602,  601,
        0,  602,    0,  602,  603,    0,    0,    0,  603,  602,
      604,  603,    0,  603,  604,  603,  606,    0,  604,  603,
        0,  604,    0,  604,  605,    0,    0,    0,  605,  604,
        0,  605,  607,  605,    0,  605,  607,  606,  609,  605,

      607,  606,    0,  607,  606,  607,  606,  609,    0,  608,
        0,  607,  606,  608,    0,    0,  608,    0,  608,  609,
        0,    0,    0,  609,  608,  610,  609,    0,  609,  610,
        0,    0,    0,  610,  609,  611,  610,    0,  610,  611,
        0,    0,    0,  611,  610,    0,  611,    0,  611,  612,
        0,    0,    0,  612,  611,    0,  612,    0,  612,  613,
      612,    0,    0,  613,  612,    0,  613,    0,  613,  614,
      613,    0,    0,  614,  613,    0,  614,    0,  614,  615,
      614,    0,    0,  615,  614,    0,  615,  617,  615,  616,
      615,    0,    0,  616,  615,    0,  616,    0,  616,  617,

      616,    0,    0,  617,  616,    0,  617,    0,  617,  618,
      618,    0,    0,  618,  617,    0,  618,    0,  618,  619,
        0,    0,    0,  619,  618,    0,  619,    0,  619,  620,
        0,    0,    0,  620,  619,    0,  620,    0,  620,  621,
        0,    0,    0,  621,  620,    0,  621,  620,  621,  622,
        0,    0,    0,  622,  621,    0,  622,  621,  622,  623,
      622,    0,    0,  623,  622,    0,  623,    0,  623,  624,
        0,    0,    0,  624,  623,    0,  624,    0,  624,  625,
      624,    0,    0,  625,  624,    0,  625,    0,  625,  626,
        0,    0,    0,  626,  625,  627,  626,    0,  626,  627,

        0,    0,    0,  627,  626,  628,  627,    0,  627,  628,
        0,    0,    0,  628,  627,    0,  628,    0,  628,  629,
      631,    0,    0,  629,  628,    0,  629,    0,  629,  630,
      629,    0,    0,  630,  629,    0,  630,  633,  630,    0,
      630,  631,  632,    0,  630,  631,  632,    0,  631,  632,
      631,  632,    0,    0,    0,    0,  631,  632,  633,  634,
        0,    0,  633,  634,    0,  633,  634,  633,  634,    0,
        0,  635,    0,  633,  634,  635,    0,    0,    0,  635,
        0,    0,  635,    0,  635,    0,  636,  636,    0,    0,
      635,  636,    0,  637,  636,    0,  636,  637,    0,    0,

        0,  637,  636,    0,  637,    0,  637,  638,    0,    0,
        0,  638,  637,    0,  638,    0,  638,    0,  638,  639,
      639,  640,  638,    0,  639,  640,    0,  639,  640,  639,
      640,    0,  640,  641,    0,  639,  640,  641,    0,    0,
      641,    0,  641,  642,  641,    0,  642,  642,  641,    0,
      642,    0,  642,  643,    0,    0,    0,  643,  642,    0,
      643,    0,  643,  644,    0,    0,    0,  644,  643,    0,
      644,  643,  644,  645,    0,    0,    0,  645,  644,    0,
      645,  644,  645,  646,  645,    0,    0,  646,  645,    0,
      646,    0,  646,  647,    0,    0,    0,  647,  646,    0,

      647,    0,  647,  648,  647,  650,    0,  648,  647,    0,
      648,    0,  648,  649,  648,    0,    0,  649,  648,    0,
      649,  652,  649,    0,  649,  651,  650,    0,  649,  651,
      650,    0,  651,  650,  651,  650,    0,    0,    0,    0,
      651,  650,  652,  653,    0,    0,  652,  653,    0,  652,
      653,  652,  653,    0,    0,  654,    0,  652,  653,  654,
        0,  655,  654,    0,  654,  655,    0,    0,    0,  655,
      654,  656,  655,    0,  655,  656,    0,    0,    0,  656,
      655,    0,  656,    0,  656,  657,    0,    0,    0,  657,
      656,    0,  657,    0,  657,  658,    0,    0,    0,  658,

      657,  659,  658,  657,  658,  659,    0,    0,    0,  659,
      658,  660,  659,  658,  659,  660,    0,    0,    0,  660,
      659,    0,  660,    0,  660,  661,    0,    0,    0,  661,
      660,    0,  661,    0,  661,  662,  661,    0,    0,  662,
      661,    0,  662,    0,  662,  663,  662,    0,    0,  663,
      662,    0,  663,    0,  663,  664,  663,    0,    0,  664,
      663,    0,  664,    0,  664,  665,    0,    0,    0,  665,
      664,    0,  665,    0,  665,  666,    0,    0,    0,  666,
      665,    0,  666,  665,  666,  667,    0,    0,    0,  667,
      666,    0,  667,    0,  667,  668,    0,    0,    0,  668,

      667,    0,  668,  667,  668,  669,  668,    0,    0,  669,
      668,    0,  669,    0,  669,  670,    0,    0,    0,  670,
      669,    0,  670,    0,  670,  671,    0,    0,    0,  671,
      670,  672,  671,    0,  671,  672,  671,    0,    0,  672,
      671,    0,  672,    0,  672,  673,    0,    0,    0,  673,
      672,    0,  673,    0,  673,  674,    0,    0,    0,  674,
      673,  675,  674,    0,  674,  675,    0,    0,    0,  675,
      674,  676,  675,    0,  675,  676,    0,    0,    0,  676,
      675,  677,  676,    0,  676,  677,    0,    0,    0,  677,
      676,  678,  677,    0,  677,  678,    0,    0,    0,  678,

      677,    0,  678,    0,  678,  679,    0,    0,    0,  679,
      678,    0,  679,    0,  679,  680,  679,    0,    0,  680,
      679,    0,  680,    0,  680,  681,  680,    0,    0,  681,
      680,    0,  681,    0,  681,  682,  681,    0,    0,  682,
      681,    0,  682,    0,  682,  683,    0,    0,    0,  683,
      682,    0,  683,  682,  683,  684,    0,    0,    0,  684,
      683,    0,  684,  683,  684,  685,    0,    0,    0,  685,
      684,    0,  685,    0,  685,  686,    0,    0,    0,  686,
      685,    0,  686,    0,  686,  687,    0,    0,    0,  687,
      686,    0,  687,  686,  687,  688,    0,    0,    0,  688,

      687,    0,  688,  687,  688,  689,  688,    0,    0,  689,
      688,    0,  689,    0,  689,  690,    0,    0,    0,  690,
      689,    0,  690,  692,  690,  691,  690,    0,    0,  691,
      690,    0,  691,    0,  691,  692,    0,    0,    0,  692,
      691,    0,  692,  694,  692,  693,    0,    0,    0,  693,
      692,    0,  693,    0,  693,  694,    0,    0,    0,  694,
      693,  693,  694,  695,  694,    0,    0,  695,  696,    0,
      694,  695,  696,    0,  695,  696,  695,  696,    0,    0,
        0,  697,  695,  696,  696,  697,    0,    0,    0,  697,
        0,    0,  697,    0,  697,    0,  698,  698,  699,    0,

      697,  698,  699,    0,  698,  699,  698,  699,    0,    0,
      700,  701,  698,  699,  700,  701,  699,  700,  701,  700,
      701,    0,    0,  702,    0,  700,  701,  702,  700,  701,
      702,    0,  702,  703,    0,    0,    0,  703,  702,    0,
      703,  702,  703,  704,  703,    0,    0,  704,  703,    0,
      704,    0,  704,  705,    0,    0,    0,  705,  704,    0,
      705,    0,  705,  706,  705,    0,    0,  706,  705,    0,
      706,    0,  706,  707,    0,    0,    0,  707,  706,    0,
      707,    0,  707,  708,    0,    0,    0,  708,  707,    0,
      708,    0,  708,  709,    0,    0,    0,  709,  708,  710,

      709,    0,  709,  710,    0,    0,    0,  710,  709,  711,
      710,    0,  710,  711,    0,    0,    0,  711,  710,    0,
      711,    0,  711,  712,    0,    0,  712,  712,  711,    0,
      712,    0,  712,  713,    0,    0,    0,  713,  712,    0,
      713,    0,  713,  714,    0,    0,  714,  714,  713,    0,
      714,    0,  714,  715,    0,    0,    0,  715,  714,    0,
      715,    0,  715,  716,    0,    0,    0,  716,  715,    0,
      716,  715,  716,  717,    0,    0,    0,  717,  716,    0,
      717,    0,  717,  718,    0,    0,    0,  718,  717,    0,
      718,  717,  718,  719,    0,    0,    0,  719,  718,    0,

      719,    0,  719,  720,    0,    0,    0,  720,  719,    0,
      720,    0,  720,  721,    0,    0,    0,  721,  720,    0,
      721,    0,  721,  722,    0,    0,    0,  722,  721,  723,
      722,    0,  722,  723,    0,    0,    0,  723,  722,  724,
      723,    0,  723,  724,    0,    0,    0,  724,  723,    0,
      724,    0,  724,  725,    0,    0,    0,  725,  724,    0,
      725,    0,  725,  726,    0,    0,    0,  726,  725,  727,
      726,  725,  726,  727,    0,    0,    0,  727,  726,  728,
      727,  726,  727,  728,    0,    0,    0,  728,  727,    0,
      728,  730,  728,  729,    0,    0,    0,  729,  728,    0,

      729,    0,  729,  730,    0,    0,    0,  730,  729,    0,
      730,    0,  730,  731,    0,    0,    0,  731,  730,    0,
      731,    0,  731,  732,    0,    0,    0,  732,  731,  731,
      732,    0,  732,  733,    0,    0,    0,  733,  732,    0,
      733,  732,  733,  734,    0,    0,    0,  734,  733,    0,
      734,  733,  734,  735,    0,    0,    0,  735,  734,    0,
      735,    0,  735,    0,  736,  736,    0,    0,  735,  736,
        0,    0,  736,    0,  736,    0,  737,  737,    0,    0,
      736,  737,    0,    0,  737,    0,  737,  738,    0,    0,
      738,  738,  737,    0,  738,    0,  738,  739,    0,    0,

        0,  739,  738,    0,  739,    0,  739,  740,    0,    0,
        0,  740,  739,    0,  740,    0,  740,  741,    0,    0,
        0,  741,  740,    0,  741,    0,  741,  742,    0,    0,
        0,  742,  741,    0,  742,    0,  742,  743,    0,    0,
        0,  743,  742,  744,  743,    0,  743,  744,    0,    0,
        0,  744,  743,    0,  744,    0,  744,  745,    0,    0,
        0,  745,  744,    0,  745,    0,  745,  746,    0,    0,
        0,  746,  745,  745,  746,    0,  746,    0,    0,  747,
      747,  748,  746,  746,  747,  748,    0,  747,  748,  747,
      748,    0,    0,  749,  750,  747,  748,  749,  750,    0,

      749,  750,  749,  750,    0,    0,  751,    0,  749,  750,
      751,    0,    0,  751,    0,  751,  752,    0,    0,    0,
      752,  751,  751,  752,    0,  752,    0,    0,    0,    0,
        0,  752,  756,  756,    0,  756,  757,  757,    0,  757,
      758,  758,  758,  758,  759,  759,  760,  760,    0,  760,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"

#line 38 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
namespace
{

struct LexerInfo
{
	explicit LexerInfo(std::size_t file_, const std::string& input_, std::size_t start,
		std::size_t length)
		: file(file_)
		, input(&input_)
		, pos(std::min(start, input->size()))
		, end(std::min(length, input->size()))
		, tokenPos(pos)
		, line(0)
		, column(0)
		, curToken(nullptr)
	{
		// Initialize the line and column number.
		for (std::size_t i = 0; i < start; ++i)
		{
			if ((*input)[i] == '\n')
			{
				++line;
				column = 0;
			}
			else
				++column;
		}
	}

	std::size_t file;
	const std::string* input;
	std::size_t pos;
	std::size_t end;
	std::size_t tokenPos;
	std::size_t line;
	std::size_t column;
	msl::Token* curToken;
};

void addToken(LexerInfo* info, msl::Token::Type type, const char* text)
{
	std::size_t length = std::strlen(text);
	assert(info->curToken);
	*info->curToken = msl::Token(type, info->file, info->tokenPos, length, info->line,
		info->column);
	info->tokenPos += length;
	assert(info->tokenPos <= info->end);
	info->column += length;
}

void addNewline(LexerInfo* info, msl::Token::Type type, const char* text)
{
	std::size_t length = std::strlen(text);
	assert(info->curToken);
	*info->curToken = msl::Token(type, info->file, info->tokenPos, length, info->line,
		info->column);
	info->tokenPos += length;
	assert(info->tokenPos <= info->end);
	++info->line;
	info->column = 0;
}

void addComment(LexerInfo* info, const char* text)
{
	std::size_t length = std::strlen(text);
	assert(info->curToken);
	*info->curToken = msl::Token(msl::Token::Type::Comment, info->file, info->tokenPos, length,
		info->line, info->column);
	info->tokenPos += length;
	assert(info->tokenPos <= info->end);

	// Update the line and column based on newlines within the comment.
	for (std::size_t i = 0; i < length; ++i)
	{
		if (text[i] == '\n')
		{
			++info->line;
			info->column = 0;
		}
		else
			++info->column;
	}
}

} // namespace

#define YY_DECL static bool msllex (yyscan_t yyscanner)
#define YY_EXTRA_TYPE LexerInfo*
#define YY_NO_INPUT
#define YY_NO_UNPUT
#define YY_SKIP_YYWRAP
#define YY_INPUT(buf, result, max_size) \
	{ \
		result = std::min(max_size, yyextra->end - yyextra->pos); \
		assert(yyextra->pos + result <= yyextra->input->size()); \
		std::memcpy(buf, yyextra->input->c_str() + yyextra->pos, result); \
		yyextra->pos += result; \
	}

bool mslwrap(yyscan_t)
{
	return true;
}

#line 2073 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"

#define INITIAL 0
#define INCLUDE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int msllex_init (yyscan_t* scanner);

int msllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int msllex_destroy (yyscan_t yyscanner );

int mslget_debug (yyscan_t yyscanner );

void mslset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE mslget_extra (yyscan_t yyscanner );

void mslset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *mslget_in (yyscan_t yyscanner );

void mslset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *mslget_out (yyscan_t yyscanner );

void mslset_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t mslget_leng (yyscan_t yyscanner );

char *mslget_text (yyscan_t yyscanner );

int mslget_lineno (yyscan_t yyscanner );

void mslset_lineno (int _line_number ,yyscan_t yyscanner );

int mslget_column  (yyscan_t yyscanner );

void mslset_column (int _column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mslwrap (yyscan_t yyscanner );
#else
extern int mslwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int msllex (yyscan_t yyscanner);

#define YY_DECL int msllex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			mslensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		msl_load_buffer_state(yyscanner );
		}

	{
#line 146 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"


#line 2338 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 754 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5551 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 148 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Whitespace, yytext); return true;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 149 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addNewline(yyextra, msl::Token::Type::Newline, yytext); BEGIN(INITIAL); return true;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 150 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addNewline(yyextra, msl::Token::Type::EscapedNewline, yytext); return true;
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 152 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addComment(yyextra, yytext); return true;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 153 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addComment(yyextra, yytext); return true;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 155 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Exclamation, yytext); return true;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 156 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Percent, yytext); return true;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 157 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Tilde, yytext); return true;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 158 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Carot, yytext); return true;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 159 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Amperstand, yytext); return true;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 160 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bar, yytext); return true;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 161 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Asterisk, yytext); return true;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 162 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Slash, yytext); return true;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 163 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Plus, yytext); return true;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 164 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dash, yytext); return true;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 165 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Equal, yytext); return true;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 166 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftParen, yytext); return true;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 167 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightParen, yytext); return true;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 168 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftSquare, yytext); return true;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 169 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightSquare, yytext); return true;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 170 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftBrace, yytext); return true;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 171 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightBrace, yytext); return true;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 172 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftAngle, yytext); return true;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 173 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightAngle, yytext); return true;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 174 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Question, yytext); return true;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 175 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Colon, yytext); return true;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 176 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dot, yytext); return true;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 177 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Comma, yytext); return true;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 178 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Semicolon, yytext); return true;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 180 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAnd, yytext); return true;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 181 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOr, yytext); return true;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 182 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXor, yytext); return true;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 183 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftShift, yytext); return true;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 184 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightShift, yytext); return true;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 185 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::EqualCompare, yytext); return true;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 186 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NotEqual, yytext); return true;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 187 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LessEqual, yytext); return true;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 188 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::GreaterEqual, yytext); return true;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 189 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::XorEqual, yytext); return true;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 190 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AndEqual, yytext); return true;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 191 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::OrEqual, yytext); return true;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 192 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MultiplyEqual, yytext); return true;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 193 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DivideEqual, yytext); return true;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 194 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PlusEqual, yytext); return true;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 195 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MinusEqual, yytext); return true;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 197 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAndEqual, yytext); return true;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 198 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOrEqual, yytext); return true;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 199 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXorEqual, yytext); return true;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 200 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftShiftEqual, yytext); return true;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 201 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightShiftEqual, yytext); return true;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 203 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Const, yytext); return true;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 204 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Centroid, yytext); return true;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 205 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Break, yytext); return true;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 206 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Continue, yytext); return true;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 207 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Do, yytext); return true;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 208 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Else, yytext); return true;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 209 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::For, yytext); return true;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 210 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::If, yytext); return true;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 211 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Discard, yytext); return true;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 212 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Return, yytext); return true;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 213 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Switch, yytext); return true;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 214 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Case, yytext); return true;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 215 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Default, yytext); return true;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 216 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Uniform, yytext); return true;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 217 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Patch, yytext); return true;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 218 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sample, yytext); return true;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 219 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Buffer, yytext); return true;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 220 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Shared, yytext); return true;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 221 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Coherent, yytext); return true;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 222 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Volatile, yytext); return true;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 223 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Restrict, yytext); return true;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 224 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ReadOnly, yytext); return true;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 225 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::WriteOnly, yytext); return true;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 226 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NonPerspective, yytext); return true;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 227 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Flat, yytext); return true;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 228 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Smooth, yytext); return true;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 229 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Struct, yytext); return true;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 230 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Void, yytext); return true;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 231 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::While, yytext); return true;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 232 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::True, yytext); return true;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 233 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::False, yytext); return true;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 235 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bool, yytext); return true;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 236 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Float, yytext); return true;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 237 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Double, yytext); return true;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 238 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Int, yytext); return true;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 239 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UInt, yytext); return true;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 240 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec2, yytext); return true;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 241 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec3, yytext); return true;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 242 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec4, yytext); return true;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 243 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec2, yytext); return true;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 244 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec3, yytext); return true;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 245 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec4, yytext); return true;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 246 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec2, yytext); return true;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 247 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec3, yytext); return true;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 248 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec4, yytext); return true;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 249 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec2, yytext); return true;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 250 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec3, yytext); return true;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 251 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec4, yytext); return true;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 252 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec2, yytext); return true;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 253 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec3, yytext); return true;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 254 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec4, yytext); return true;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 255 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2, yytext); return true;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 256 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3, yytext); return true;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 257 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4, yytext); return true;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 258 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2, yytext); return true;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 259 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3, yytext); return true;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 260 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4, yytext); return true;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 261 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x2, yytext); return true;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 262 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x3, yytext); return true;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 263 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x4, yytext); return true;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 264 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x2, yytext); return true;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 265 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x3, yytext); return true;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 266 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x4, yytext); return true;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 267 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x2, yytext); return true;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 268 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x3, yytext); return true;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 269 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x4, yytext); return true;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 270 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x2, yytext); return true;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 271 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x3, yytext); return true;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 272 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x4, yytext); return true;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 273 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x2, yytext); return true;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 274 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x3, yytext); return true;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 275 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x4, yytext); return true;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 276 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x2, yytext); return true;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 277 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x3, yytext); return true;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 278 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x4, yytext); return true;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 279 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1D, yytext); return true;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 280 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2D, yytext); return true;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 281 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler3D, yytext); return true;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 282 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCube, yytext); return true;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 283 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DShadow, yytext); return true;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 284 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DShadow, yytext); return true;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 285 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeShadow, yytext); return true;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 286 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArray, yytext); return true;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 287 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArray, yytext); return true;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 288 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArrayShadow, yytext); return true;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 289 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArrayShadow, yytext); return true;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 290 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1D, yytext); return true;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 291 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2D, yytext); return true;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 292 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler3D, yytext); return true;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 293 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCube, yytext); return true;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 294 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1DArray, yytext); return true;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 295 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DArray, yytext); return true;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 296 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1D, yytext); return true;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 297 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2D, yytext); return true;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 298 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler3D, yytext); return true;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 299 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCube, yytext); return true;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 300 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1DArray, yytext); return true;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 301 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DArray, yytext); return true;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 302 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerBuffer, yytext); return true;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 303 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerBuffer, yytext); return true;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 304 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerBuffer, yytext); return true;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 305 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArray, yytext); return true;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 306 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArrayShadow, yytext); return true;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 307 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCubeArray, yytext); return true;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 308 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCubeArray, yytext); return true;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 309 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMS, yytext); return true;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 310 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMS, yytext); return true;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 311 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMS, yytext); return true;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 312 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMSArray, yytext); return true;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 313 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMSArray, yytext); return true;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 314 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMSArray, yytext); return true;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 315 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1D, yytext); return true;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 316 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1D, yytext); return true;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 317 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1D, yytext); return true;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 318 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2D, yytext); return true;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 319 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2D, yytext); return true;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 320 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2D, yytext); return true;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 321 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image3D, yytext); return true;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 322 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage3D, yytext); return true;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 323 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage3D, yytext); return true;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 324 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCube, yytext); return true;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 325 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCube, yytext); return true;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 326 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCube, yytext); return true;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 327 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageBuffer, yytext); return true;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 328 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageBuffer, yytext); return true;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 329 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageBuffer, yytext); return true;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 330 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1DArray, yytext); return true;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 331 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1DArray, yytext); return true;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 332 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1DArray, yytext); return true;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 333 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DArray, yytext); return true;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 334 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DArray, yytext); return true;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 335 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DArray, yytext); return true;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 336 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCubeArray, yytext); return true;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 337 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCubeArray, yytext); return true;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 338 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCubeArray, yytext); return true;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 339 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMS, yytext); return true;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 340 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMS, yytext); return true;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 341 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMS, yytext); return true;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 342 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMSArray, yytext); return true;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 343 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMSArray, yytext); return true;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 344 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMSArray, yytext); return true;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 345 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AtomicUInt, yytext); return true;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 347 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Hash, yytext); return true;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 348 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Include, yytext); BEGIN(INCLUDE); return true;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 349 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Pragma, yytext); return true;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 350 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Define, yytext); return true;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 351 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Undef, yytext); return true;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 352 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifdef, yytext); return true;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 353 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifndef, yytext); return true;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 354 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocIf, yytext); return true;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 355 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElif, yytext); return true;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 356 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElse, yytext); return true;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 357 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocEndif, yytext); return true;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 358 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocConcat, yytext); return true;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 359 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IncludePath, yytext); BEGIN(INITIAL); return true;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 361 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 362 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 363 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 364 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 365 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::FloatLiteral, yytext); return true;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 366 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::FloatLiteral, yytext); return true;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 367 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DoubleLiteral, yytext); return true;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 368 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DoubleLiteral, yytext); return true;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 370 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Identifier, yytext); return true;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 372 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Invalid, yytext); return true;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 374 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
ECHO;
	YY_BREAK
#line 3479 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * msllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( mslwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of msllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mslrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 754 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 754 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 753);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mslrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mslwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mslrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        mslensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	msl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	msl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void msl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mslpop_buffer_state();
	 *		mslpush_buffer_state(new_buffer);
     */
	mslensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	msl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (mslwrap()) processing, but the only time this flag
	 * is looked at is after mslwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void msl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE msl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mslalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in msl_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mslalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in msl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	msl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with msl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void msl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mslfree((void *) b->yy_ch_buf ,yyscanner );

	mslfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mslrestart() or at EOF.
 */
    static void msl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	msl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then msl_init_buffer was _probably_
     * called from mslrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void msl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		msl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void mslpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	mslensure_buffer_stack(yyscanner);

	/* This block is copied from msl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from msl_switch_to_buffer. */
	msl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void mslpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	msl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		msl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mslensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mslensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mslrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mslensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE msl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mslalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in msl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	msl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to msllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       msl_scan_bytes() instead.
 */
YY_BUFFER_STATE msl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return msl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to msllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE msl_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) mslalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in msl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = msl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in msl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE mslget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int mslget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int mslget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *mslget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *mslget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t mslget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *mslget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void mslset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void mslset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mslset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void mslset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mslset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see msl_switch_to_buffer
 */
void mslset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void mslset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int mslget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void mslset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* msllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int msllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) mslalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* msllex_init_extra has the same functionality as msllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to mslalloc in
 * the yyextra field.
 */

int msllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    mslset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) mslalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    mslset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from msllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * msllex_init()
     */
    return 0;
}

/* msllex_destroy is for both reentrant and non-reentrant scanners. */
int msllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		msl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mslpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	mslfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        mslfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * msllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    mslfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mslalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *mslrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mslfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see mslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 374 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"



namespace msl
{

class Lexer::Impl
{
public:
	Impl(std::size_t file, const std::string& input, std::size_t start, std::size_t length)
		: m_info(file, input, start, length)
	{
		msllex_init_extra(&m_info,&m_scanner);
	}

	~Impl()
	{
		msllex_destroy(m_scanner);
	}

	yyscan_t m_scanner;
	LexerInfo m_info;
};

std::vector<Token> Lexer::tokenize(std::size_t file, const std::string& input, std::size_t start,
	std::size_t length)
{
	std::vector<Token> tokens;
	Token curToken;

	Lexer lexer(file, input, start, length);
	while (lexer.nextToken(curToken))
		tokens.push_back(curToken);

	return tokens;
}

Lexer::Lexer(std::size_t file, const std::string& input, std::size_t start, std::size_t length)
	: m_impl(new Impl(file, input, start, length))
{
}

Lexer::~Lexer()
{
}

Lexer::Lexer(Lexer&& other)
	: m_impl(std::move(other.m_impl))
{
}

Lexer& Lexer::operator=(Lexer&& other)
{
	m_impl = std::move(other.m_impl);
	return *this;
}

bool Lexer::nextToken(Token& token)
{
	assert(m_impl);
	m_impl->m_info.curToken = &token;
	return msllex(m_impl->m_scanner);
}

} // msl

