#line 2 "src/Parse/Lexer.cpp"
#line 2 "src/Parse/Lexer.lex"
/*
 * Copyright 2016 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <MSL/Frontend/Parse/Lexer.h>
#include <algorithm>
#include <cstring>

#if MSL_GCC || MSL_CLANG
#pragma GCC diagnostic ignored "-Wunused-function"
#endif

#if MSL_WINDOWS
#define YY_NO_UNISTD_H
#include <io.h>
#endif




#line 36 "src/Parse/Lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mslrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mslrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void mslrestart (FILE *input_file ,yyscan_t yyscanner );
void msl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void msl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void msl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void mslpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void mslpop_buffer_state (yyscan_t yyscanner );

static void mslensure_buffer_stack (yyscan_t yyscanner );
static void msl_load_buffer_state (yyscan_t yyscanner );
static void msl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER msl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE msl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *mslalloc (yy_size_t ,yyscan_t yyscanner );
void *mslrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void mslfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer msl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mslensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mslensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 213
#define YY_END_OF_BUFFER 214
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[762] =
    {   0,
        0,    0,    0,    0,  214,  212,    1,    2,  213,    6,
      191,    7,   10,   17,   18,   12,   14,   28,   15,   27,
       13,  203,  204,   26,   29,   23,   16,   24,   25,  212,
      212,  212,  212,   19,  212,   20,    9,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,   21,   11,   22,    8,  212,   23,  212,    1,
        2,   36,    0,  201,  212,  212,  212,  212,   30,   40,
       42,   44,   45,  208,  212,    4,   43,  207,  205,  212,
      203,  212,  204,  204,   33,   37,   35,   38,   34,  211,
      211,  211,  211,  211,  211,  211,    0,   39,   32,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,   55,  211,  211,  211,  211,  211,   58,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,   41,   31,
      212,    0,  202,  212,    0,   33,   37,  202,    0,    0,
        0,    0,  212,  212,  212,  197,  212,  212,   46,  212,
      208,  212,  212,  212,    0,  212,    4,    4,    4,  207,
      212,  207,  212,  212,  205,  206,   49,   50,  211,  211,
      211,  211,  211,  211,    3,   48,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,   57,  211,   83,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
       47,  202,  202,   49,    0,    0,    0,  197,    0,    0,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  208,
      210,    0,    5,    4,    4,  212,  207,  212,  212,  212,
      207,  209,  206,  211,  211,  211,  211,  211,  211,  211,
      211,   80,  211,  211,  211,   62,   95,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,   56,   75,  211,
      211,  211,  100,  101,  102,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,   84,  211,  211,   94,
       96,   78,  211,  211,  211,    0,    0,    0,    0,    0,
        0,    0,    0,  212,  198,  199,  212,  212,  212,  212,
      212,    5,  212,  207,  209,  211,  211,  211,  211,  211,
      211,  211,   86,   53,  211,   85,   87,  211,  211,   51,
      211,   98,  211,  211,  103,  104,  105,  211,   97,   99,
       81,   89,   88,   90,  211,  211,  211,  211,   65,  211,
      211,  211,  211,  211,  211,  211,  211,   92,  211,   91,
       93,  211,   79,  211,    0,  198,  199,    0,    0,    0,
        0,    0,  212,  200,  195,  212,  212,  212,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,   67,
      211,  211,  211,  211,  211,  211,  211,  211,   82,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  211,  211,
      211,   60,   66,   68,   76,   77,   61,  211,  211,  211,
        0,  200,  195,    0,    0,    0,  194,  196,  212,  193,
      211,  211,  211,  211,  211,  211,  160,  163,  166,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,   63,   59,  115,  116,  117,  118,  119,  120,
      121,  122,  123,  211,  211,  211,   64,  211,  211,  194,
      196,    0,  193,  192,  161,  164,  167,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      162,  165,  168,  211,  211,  211,  211,   52,   69,   54,
      211,   72,   71,   70,  211,  192,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  184,  211,
      169,  124,  125,  126,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,   73,  211,
      211,  185,  211,  170,  135,  136,  137,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  186,  211,  171,  141,  142,  143,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  172,  211,  211,  211,
      211,  154,  211,  211,  127,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  190,  211,  211,  211,  211,
      173,  211,  211,  211,  155,  211,  138,  175,  178,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  174,  211,  211,  211,  156,  211,  144,  211,
      176,  179,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  147,  211,  211,  177,
      180,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  148,  211,  187,  181,  131,  211,

      132,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      149,  211,   74,  188,  182,  139,  140,  211,  211,  211,
      128,  211,  211,  129,  211,  211,  189,  183,  145,  146,
      211,  211,  211,  211,  211,  211,  157,  150,  211,  211,
      211,  158,  152,  211,  211,  211,  130,  159,  153,  211,
      211,  211,  211,  211,  211,  133,  134,  211,  211,  151,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,    1,   31,   32,   33,   34,   35,   36,
       37,   37,   38,   37,   37,   39,   40,   37,   37,   37,
       37,   37,   41,   37,   42,   37,   37,   43,   37,   37,
       44,   45,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   37,   58,   59,   60,   61,
       62,   63,   37,   64,   65,   66,   67,   68,   69,   70,
       71,   37,   72,   73,   74,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[772] =
    {   0,
        0,    0,   70,   71,  684,    0,  674, 3249,  672,  640,
       76,    0,   71,    0,    0,  642,  625,    0,  621,   66,
       79,  124,   90,    0,    0,   54,  614,   64,    0,  194,
      269,   77,   62,    0,  635,    0,   73,   64,  111,  112,
      174,  100,  188,  192,  213,  175,  251,  117,  252,  279,
      293,  268,    0,   91,    0,    0,  119,  321,    0,  624,
     3249,    0,  129,    0,  568,   75,  102,  555,  585,    0,
        0,    0,    0,  338,  181,  257,    0,  380,  347,  360,
        0,  422,  443,    0,  578,    0,    0,    0,  576,  334,
      347,  368,  372,  352,  367,  388,  599,    0,  572,  439,

      440,  445,  449,  454,  453,  474,  409,  480,  478,  488,
      484,  486,  492,  509,  513,  515,  519,  527,  525,  529,
      533,  543,  550,  556,  558,  560,  576,  567,  574,  590,
      592,  594,  599,  605,  610,  603,  626,  628,    0,  564,
      331,  584,  416,  185,  553,  669,  494,  670,  523,  129,
      115,  508,  507,   70,  506,   43,  504,  496,    0,  687,
        0,  507,  483,  253,  520,  675,  350,  483,  678,  706,
      731,    0,  484,  463,    0,  221,    0,    0,  652,  653,
      676,  677,  720,  678, 3249,    0,  725,  726,  730,  732,
      734,  746,  738,  761,  762,  755,  766,  773,  778,  779,

      796,  803,  804,  805,  809,  810,  811,  816,  836,  840,
      863,  848,  852,  854,  856,  861,  869,  877,  886,  892,
      879,  893,  897,  902,  909,  929,  920,  927,  933,  937,
        0,  505,  475,  718,  449,  207,  445,  197,  438,  439,
      427,  428,  426,  411,  399,  399,  390,  383,  986,  993,
        0,  310,  731,  300,  151, 1015,    0,  400,  381, 1000,
     1022,    0,    0,  941, 1010, 1012, 1018, 1019, 1025, 1026,
     1054, 1030, 1046, 1055, 1060, 1053, 1059, 1061, 1069, 1071,
     1085, 1097, 1086, 1098, 1128, 1102, 1132, 1103, 1118, 1127,
     1134, 1157, 1126, 1142, 1143, 1144, 1167, 1168, 1169, 1177,

     1183, 1178, 1184, 1194, 1198, 1219, 1210, 1214, 1239, 1215,
     1224, 1225, 1226, 1230, 1240,  374,  376,  372,  367,  370,
      359,  337,  332,  325,    0,    0,  310,  297,  285,  259,
      259,  293, 1283, 1290,    0, 1277, 1257, 1300, 1286, 1287,
     1293, 1231, 1304, 1310, 1316, 1317, 1318, 1324, 1328, 1330,
     1334, 1341, 1351, 1355, 1361, 1362, 1366, 1367, 1368, 1375,
     1392, 1396, 1400, 1401, 1424, 1428, 1433, 1426, 1432, 1434,
     1439, 1440, 1438, 1464, 1465, 1444, 1470, 1471, 1476, 1477,
     1481, 1482, 1491, 1497,  230, 3249, 3249,  233,  217,  192,
      177,  172,  175,    0,    0,  164,  165,  149, 1528, 1505,

     1529, 1530, 1538, 1514, 1515, 1539, 1564, 1553, 1563, 1554,
     1569, 1571, 1577, 1579, 1578, 1613, 1620, 1626, 1611, 1612,
     1618, 1619, 1624, 1625, 1636, 1649, 1650, 1651, 1656, 1660,
     1662, 1664, 1666, 1674, 1676, 1687, 1689, 1691, 1697, 1699,
      144, 3249, 3249,  126,  116,  102,    0,    0,   64,    0,
     1705, 1707, 1720, 1712, 1714, 1725, 1737, 1746, 1732, 1750,
     1752, 1775, 1777, 1783, 1785, 1760, 1762, 1787, 1792, 1798,
     1800, 1793, 1816, 1823, 1824, 1829, 1830, 1831, 1836, 1837,
     1841, 1847, 1854, 1861, 1862, 1868, 1867, 1872, 1877, 3249,
     3249,   63, 3249,    0, 1885, 1900, 1879, 1905, 1906, 1929,

     1913, 1914, 1930, 1931, 1941, 1942, 1954, 1959, 1943, 1958,
     1967, 1975, 1966, 1979, 1971, 2009, 1996, 2002, 2007, 2008,
     2013, 2014, 2019, 2020, 2034, 3249, 2040, 2046, 2047, 2048,
     2058, 2057, 2075, 2081, 2082, 2083, 2087, 2088, 2052, 2093,
     2099, 2123, 2125, 2095, 2119, 2130, 2129, 2131, 2136, 2140,
     2146, 2163, 2164, 2169, 2170, 2171, 2175, 2181, 2179, 2180,
     2187, 2211, 2205, 2219, 2223, 2228, 2207, 2232, 2234, 2236,
     2240, 2249, 2257, 2263, 2264, 2269, 2270, 2277, 2294, 2295,
     2278, 2301, 2302, 2310, 2315, 2326, 2338, 2340, 2322, 2336,
     2347, 2346, 2351, 2353, 2367, 2377, 2382, 2383, 2384, 2390,

     2391, 2395, 2415, 2419, 2420, 2421, 2426, 2428, 2433, 2435,
     2458, 2463, 2464, 2468, 2469, 2470, 2476, 2474, 2494, 2499,
     2501, 2506, 2507, 2508, 2519, 2514, 2535, 2515, 2539, 2540,
     2546, 2547, 2552, 2553, 2567, 2577, 2583, 2581, 2582, 2587,
     2591, 2597, 2593, 2611, 2617, 2618, 2623, 2624, 2634, 2625,
     2635, 2641, 2648, 2659, 2661, 2666, 2672, 2671, 2696, 2673,
     2679, 2697, 2702, 2704, 2706, 2711, 2720, 2727, 2729, 2734,
     2735, 2736, 2740, 2741, 2770, 2775, 2776, 2780, 2782, 2781,
     2786, 2807, 2809, 2811, 2813, 2823, 2825, 2834, 2839, 2840,
     2841, 2850, 2855, 2864, 2865, 2875, 2876, 2881, 2882, 2889,

     2891, 2896, 2902, 2906, 2912, 2916, 2922, 2929, 2936, 2937,
     2942, 2950, 2943, 2957, 2967, 2968, 2974, 2975, 2980, 2981,
     2982, 2992, 2998, 3005, 3006, 3012, 3013, 3018, 3019, 3023,
     3043, 3044, 3029, 3030, 3050, 3056, 3057, 3068, 3070, 3074,
     3080, 3081, 3082, 3086, 3095, 3088, 3094, 3111, 3112, 3118,
     3119, 3124, 3123, 3125, 3136, 3129, 3149, 3157, 3161, 3162,
     3249,   93,   78, 3230, 3232, 3234, 3237, 3239, 3241, 3243,
     3246
    } ;

static yyconst flex_int16_t yy_def[772] =
    {   0,
      761,    1,    1,    1,  761,  762,  761,  761,  761,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  763,
      763,   31,   31,  762,  762,  762,  762,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,  762,  762,  762,  762,  764,  765,  762,  761,
      761,  762,  761,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  766,  767,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,   31,
       31,   31,   31,   31,   31,   31,  761,  762,  762,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,  762,  762,
      764,  768,  764,  765,  769,  765,  765,  765,  761,  761,
      761,  761,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  766,  770,  766,  767,  771,  767,  762,
      762,  762,  762,  762,  762,   82,  762,  762,   31,   31,
       31,   31,   31,   31,  761,  762,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
      762,  768,  769,  765,  761,  761,  761,  761,  761,  761,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  770,  766,  771,  771,  762,  762,  762,  762,  762,
      762,  762,  762,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,  761,  761,  761,  761,  761,
      761,  761,  761,  762,  762,  762,  762,  762,  762,  762,
      762,  770,  762,  762,  762,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,  761,  761,  761,  761,  761,  761,
      761,  761,  762,  762,  762,  762,  762,  762,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
      761,  761,  761,  761,  761,  761,  762,  762,  762,  762,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,  761,
      761,  761,  761,  762,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,  761,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
        0,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761
    } ;

static yyconst flex_uint16_t yy_nxt[3325] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   24,   25,   26,   27,   28,   29,
       30,   30,   30,   30,   30,   30,   30,   31,   30,   30,
       32,   33,   30,   34,   35,   36,   37,   30,   38,   39,
       40,   41,   42,   43,   30,   30,   44,   30,   30,   45,
       46,   30,   47,   48,   49,   30,   50,   51,   52,   30,
       30,   53,   54,   55,   56,   57,   57,   63,   90,   69,
       85,   86,   64,   74,   74,   74,   74,   74,   74,   74,
       75,   88,   89,   59,  245,   76,   58,   58,   70,   95,

       98,   90,   96,  246,   90,   78,   77,   83,   83,   83,
       83,   83,   83,   83,   90,  526,  494,   90,  139,   99,
      142,   90,  142,   90,  143,   94,  242,   65,   66,  100,
       63,   84,   67,  154,  243,  155,   90,   90,   68,   78,
       90,   79,   79,   79,   79,   79,   79,   80,   90,   90,
      493,   90,   90,  168,   90,  156,   84,   90,  115,   90,
      106,  101,  157,  140,  107,   81,   82,  492,  238,  125,
       90,   90,  102,  108,  103,  239,   90,  104,  105,  491,
      149,  150,  165,  165,  165,  151,  145,  236,  145,  237,
       81,  152,  166,   82,   59,  254,  490,  450,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   90,   90,  148,   90,   90,  449,  448,   59,   59,
       59,   59,   59,   59,  109,   90,  110,  447,   90,   90,
      111,  446,   90,  112,   90,  113,  123,   59,   59,   59,
       59,  114,  118,  445,  444,  119,  116,   90,  320,  117,
       90,   90,  120,   90,  165,  165,  165,  321,  168,  121,
      168,  122,  263,  317,  166,   59,   59,   59,   59,   59,
      443,  318,   90,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  442,  263,   90,   90,
      441,   90,   90,   59,   59,   59,   59,   59,   59,  124,

      126,  169,  168,  255,  252,   90,   91,  127,   90,   92,
       90,  128,   59,   59,   59,   59,   90,  129,  398,   90,
      130,  252,  145,  137,  145,  397,  332,   90,   93,  131,
       90,  138,  142,   90,  142,  132,  143,  396,   90,  133,
       59,   59,   59,   59,  254,  135,  134,  146,  147,  148,
      395,  168,   90,  168,  136,   74,   74,   74,   74,   74,
       74,   74,   78,  394,   79,   79,   79,   79,   79,   79,
       80,   90,  160,  161,   90,   78,  162,   80,   80,   80,
       80,   80,   80,   80,   90,  393,  392,   90,  175,   90,
      160,  161,   90,   90,  169,  391,  163,  170,  170,  170,

      170,  170,  170,  170,   90,   90,  179,   90,   90,   90,
      390,  182,   90,  175,  171,  172,  180,  142,  173,  142,
      181,  143,  389,  388,  387,   90,  183,   90,   90,  386,
      385,   90,  171,  172,  335,  335,  184,  331,  174,  176,
      176,  176,  176,  176,  176,  176,   90,   90,  330,   90,
      329,  328,  176,  176,  176,  176,  176,  176,   78,  194,
       83,   83,   83,   83,   83,   83,   83,  327,   90,  195,
      176,  176,  176,  176,  176,  176,   90,   90,  326,   90,
       90,  325,   90,  324,   84,   90,   90,  323,  322,   90,
       90,   90,  188,   90,   90,  145,  319,  145,   90,   90,

      187,  190,  316,  233,   90,  192,  189,  191,   90,   84,
      232,   90,   90,   90,   90,   90,  262,   90,   90,  262,
       90,   90,  148,   90,   90,   90,   90,  254,   90,   90,
      198,  252,   90,   90,  201,  196,  251,   90,  193,   90,
      197,  199,  251,   90,  248,   90,   90,   90,  200,   90,
       90,   90,   90,   90,  247,   90,   90,  244,  202,   90,
      241,  203,   90,  205,   90,   90,   90,   90,   90,   90,
       90,  240,   90,   90,   90,  235,  206,  204,   90,  208,
       90,  233,  207,   90,   90,  210,   90,   90,   90,  232,
       90,  231,   90,   90,  209,   90,   90,   90,   90,  186,

       90,  185,   90,  178,   90,  177,  214,   90,  211,   90,
      212,   90,  159,   90,   90,   90,   90,   90,  158,  217,
      153,  213,  215,  216,  218,   60,   90,   90,  219,   90,
       90,   90,   90,   90,   90,   90,   90,  220,   97,   90,
       90,   87,   90,   90,  222,   90,  221,   90,   73,   90,
       90,   90,   72,   90,  223,  224,   71,  225,   90,  227,
      226,  228,   90,   90,   90,   90,   90,   62,   90,   90,
      145,  145,  145,  145,   61,   60,  165,  165,  165,  168,
      168,  255,  229,  761,  230,   90,  166,   90,  761,   90,
       90,  253,   90,   90,  761,  761,  234,  148,  148,  249,

      264,  249,  761,  761,  250,  250,  250,  250,  250,  250,
      250,   90,  265,   90,   90,   90,   90,   90,   90,  145,
      761,  145,  169,  170,  170,  170,  170,  170,  170,  170,
      266,  761,  165,  165,  165,   90,   90,  269,  761,  267,
      256,  257,  166,  260,  258,  260,  148,  761,  261,  261,
      261,  261,  261,  261,  261,  761,  761,   90,  256,  257,
       90,  761,   90,   90,  259,   90,   90,   90,  268,   90,
       90,   90,   90,  761,   90,   90,  271,  761,   90,   90,
      273,  277,  761,   90,  270,   90,   90,  274,  272,   90,
      276,   90,   90,   90,  761,   90,  275,   90,   90,   90,

      761,   90,   90,   90,  761,   90,   90,  279,  761,  761,
       90,  761,  761,   90,   90,   90,   90,  761,   90,   90,
       90,   90,  761,  282,  761,   90,  283,  278,  761,  284,
      280,  281,   90,   90,  761,  761,   90,   90,   90,  761,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  286,   90,  287,   90,   90,  288,  290,  761,
      761,  285,   90,   90,   90,  761,  291,  761,   90,   90,
       90,  761,  761,   90,  289,   90,   90,   90,  761,  761,
       90,  761,  293,  294,  295,   90,  761,  761,   90,   90,
      292,   90,   90,   90,   90,   90,   90,  761,   90,   90,

       90,   90,  297,   90,  761,  298,   90,   90,  761,   90,
      296,   90,  761,   90,   90,   90,   90,   90,  761,   90,
       90,  299,   90,   90,  761,  761,   90,  300,   90,   90,
       90,  301,   90,   90,   90,  761,   90,   90,   90,   90,
      302,  761,   90,  306,  305,   90,   90,  303,  310,   90,
      311,   90,   90,  761,  761,  308,   90,   90,  304,  309,
       90,   90,  307,  761,   90,  761,   90,   90,   90,   90,
       90,  312,  761,   90,   90,  313,  761,   90,   90,   90,
      761,   90,  761,  761,  761,  761,   90,  761,   90,  761,
      761,  314,   90,  761,  761,  336,   90,  761,  761,  761,

       90,  761,  315,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  261,  261,  261,
      261,  261,  261,  261,  761,  761,  761,  333,  161,  333,
      761,  162,  334,  334,  334,  334,  334,  334,  334,  261,
      261,  261,  261,  261,  261,  261,  161,   90,  761,   90,
       90,  163,   90,  761,  761,   90,   90,  172,   90,   90,
      173,  761,   90,   90,  338,   90,   90,   90,  761,   90,
       90,   90,  337,  340,  343,  172,  339,   90,   90,  346,
      174,  347,  342,   90,   90,   90,   90,  341,  761,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,

       90,   90,  761,  344,  761,   90,   90,  345,   90,   90,
      761,   90,   90,   90,   90,  761,  761,  352,   90,   90,
       90,  761,   90,   90,  348,   90,   90,  761,   90,  761,
       90,  761,  349,  761,   90,   90,  350,   90,   90,   90,
       90,  351,   90,   90,   90,   90,  354,  355,  356,  357,
      761,  359,  353,  360,  362,   90,   90,   90,   90,  761,
      358,   90,   90,   90,   90,   90,   90,   90,   90,   90,
      761,   90,   90,  761,   90,  761,  363,   90,  364,   90,
       90,   90,   90,   90,   90,   90,   90,   90,  761,  761,
      761,   90,  361,   90,   90,  365,  368,   90,  761,  761,

      761,   90,   90,   90,   90,   90,   90,   90,   90,   90,
      761,  366,  367,  761,   90,   90,   90,   90,   90,  761,
       90,   90,  369,   90,   90,  761,   90,   90,   90,  370,
      374,   90,  371,  761,   90,   90,   90,   90,   90,  378,
      372,  373,   90,   90,  376,  761,  761,   90,  377,  375,
       90,   90,   90,   90,   90,   90,   90,   90,  380,   90,
      381,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  761,   90,   90,  379,   90,   90,   90,   90,
       90,  409,  383,   90,   90,   90,  761,  761,  761,   90,
       90,  382,  384,  761,   90,  761,  761,   90,   90,   90,

      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,   90,  400,   90,   90,  401,  402,
      403,  761,  761,   90,   90,  257,   90,   90,  258,  399,
       90,  404,  405,   90,  761,  761,   90,   90,  406,  407,
       90,   90,  761,  257,   90,   90,   90,   90,  259,  761,
       90,  408,   90,   90,   90,   90,   90,   90,   90,   90,
      761,   90,  761,   90,   90,   90,  761,   90,   90,   90,
       90,   90,  761,  761,   90,   90,   90,   90,   90,  410,
      412,   90,  761,   90,  761,  411,  761,   90,   90,   90,
      761,   90,   90,   90,  413,   90,  761,  761,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,  414,
       90,  761,   90,  761,   90,   90,  761,  761,  415,  419,
       90,   90,  761,  761,  761,   90,   90,   90,  761,   90,
      416,  417,   90,   90,   90,  418,   90,   90,   90,  761,
       90,   90,  761,  420,  421,  422,  761,  423,  424,  425,
      761,   90,  426,  427,  428,   90,  761,  761,  761,   90,
       90,   90,  761,   90,   90,   90,   90,  761,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  761,   90,   90,   90,  761,   90,  761,  429,
      433,   90,   90,   90,  430,  431,  761,   90,   90,   90,

      432,   90,   90,   90,   90,   90,  761,   90,   90,  436,
       90,   90,  761,   90,   90,  434,   90,   90,   90,   90,
      435,   90,   90,   90,   90,  437,  761,  761,   90,   90,
       90,   90,  761,  761,   90,   90,   90,   90,  439,  438,
       90,   90,   90,  761,  761,   90,  451,  452,  453,  761,
       90,   90,   90,  761,   90,   90,   90,  456,  440,  454,
      455,  761,  457,  458,   90,   90,   90,   90,   90,   90,
       90,  459,  761,   90,   90,   90,   90,  761,   90,   90,
      460,  461,  463,  464,  465,  761,  761,   90,   90,   90,
       90,   90,  761,   90,   90,  466,  467,   90,   90,  761,

       90,   90,  462,   90,   90,  468,   90,  761,   90,   90,
      469,   90,   90,   90,   90,   90,   90,   90,   90,   90,
      761,  761,   90,   90,  761,  470,  761,  761,   90,  474,
       90,  471,  475,  476,  477,  761,   90,   90,   90,  478,
      479,  480,  761,  472,  473,  481,  482,  483,   90,   90,
       90,   90,   90,   90,  761,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,  761,  761,  761,
       90,   90,   90,   90,  761,  761,   90,   90,   90,   90,
      761,  761,  761,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  761,   90,  761,   90,   90,   90,  761,   90,

       90,   90,   90,   90,   90,  761,   90,  761,   90,   90,
       90,   90,  486,   90,   90,   90,   90,  761,  485,   90,
      484,   90,  761,   90,   90,   90,   90,   90,   90,   90,
      761,   90,  761,   90,   90,   90,   90,   90,  495,   90,
      496,  761,   90,  761,   90,   90,   90,   90,   90,   90,
      487,   90,   90,  497,   90,  488,   90,   90,   90,  489,
       90,  761,   90,  761,   90,   90,   90,  501,  761,   90,
      761,   90,   90,   90,   90,  761,  502,   90,  498,   90,
      499,  761,  761,   90,   90,  503,   90,   90,  500,   90,
       90,   90,   90,  506,  507,  508,   90,   90,  761,   90,

       90,  505,   90,  504,  761,   90,  509,  510,  761,   90,
      511,   90,   90,  761,   90,   90,  512,   90,  513,   90,
       90,   90,   90,   90,   90,   90,  514,   90,  515,   90,
       90,  761,   90,   90,   90,   90,   90,   90,   90,  761,
       90,  761,   90,  761,   90,  520,   90,  761,  761,  518,
      516,   90,   90,   90,  761,  761,   90,   90,  517,   90,
       90,   90,  761,   90,   90,  519,   90,   90,   90,   90,
       90,   90,  761,   90,   90,   90,   90,   90,   90,  761,
      761,   90,   90,   90,   90,  761,  761,   90,   90,   90,
       90,   90,  761,  761,   90,   90,   90,  761,   90,   90,

       90,   90,   90,  761,   90,   90,   90,   90,   90,   90,
      761,  761,   90,   90,   90,  527,   90,   90,  761,   90,
       90,   90,   90,  521,  524,   90,   90,   90,  761,  761,
      528,   90,  522,  523,  761,  525,   90,   90,   90,  529,
       90,  761,   90,   90,   90,   90,   90,  532,  533,  534,
       90,   90,  761,   90,   90,  531,  761,  761,  530,   90,
      535,  536,  761,  761,   90,   90,   90,   90,   90,   90,
      539,   90,   90,   90,  761,  542,  537,  538,   90,   90,
       90,   90,   90,   90,  540,  761,  761,  543,   90,   90,
       90,   90,  544,  541,   90,   90,   90,  547,   90,   90,

       90,   90,   90,   90,   90,  548,   90,   90,   90,  545,
      761,   90,   90,   90,  549,   90,   90,   90,   90,   90,
      551,  761,  761,  761,  546,   90,   90,  552,  553,  554,
       90,  761,  550,   90,   90,  761,   90,  761,   90,   90,
      555,  556,   90,  761,   90,   90,   90,   90,   90,   90,
       90,   90,  557,   90,   90,   90,   90,   90,  761,   90,
       90,   90,  761,  761,  761,  558,   90,   90,   90,  761,
      761,   90,   90,   90,   90,  761,  761,   90,   90,   90,
       90,  761,  572,   90,   90,   90,   90,  562,   90,   90,
      565,  761,   90,   90,   90,   90,  761,   90,   90,   90,

      761,  563,  761,  560,  559,   90,   90,   90,  566,  561,
      564,   90,   90,  761,  567,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,  761,   90,   90,  574,
       90,  761,   90,   90,   90,   90,   90,  761,  761,   90,
       90,   90,   90,  761,  761,  573,   90,   90,  568,  569,
      570,  571,   90,  575,   90,  577,   90,  761,   90,   90,
       90,  761,   90,  576,  578,  579,   90,   90,   90,   90,
       90,   90,  580,   90,  761,  761,  584,   90,   90,  581,
       90,  761,   90,   90,   90,  761,   90,  761,   90,   90,
       90,  761,  582,  585,  583,   90,  587,  588,  586,   90,

       90,   90,  589,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,  761,  761,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,  761,  761,   90,   90,   90,
       90,  593,  761,  761,   90,  592,  590,  591,   90,   90,
       90,  596,   90,  594,   90,   90,   90,   90,   90,  598,
      595,   90,  761,  599,  761,  761,   90,  597,  600,   90,
       90,  761,  761,   90,   90,   90,   90,  601,   90,   90,
       90,   90,   90,   90,   90,  761,   90,   90,   90,  761,
       90,  761,   90,  603,  604,  602,   90,   90,  605,   90,
      761,   90,  761,   90,   90,   90,  761,   90,  761,   90,

       90,   90,  761,   90,   90,  761,   90,   90,   90,   90,
       90,  761,  606,  761,   90,   90,   90,  612,   90,  761,
      607,  761,   90,   90,  610,  761,  608,  609,   90,   90,
      615,   90,   90,  611,   90,   90,   90,   90,   90,   90,
      618,   90,   90,  761,  761,  761,  761,   90,  614,  613,
       90,  761,   90,   90,   90,   90,  620,  761,  761,   90,
       90,   90,   90,   90,  616,  617,   90,  619,  621,   90,
      622,  761,  761,   90,   90,   90,   90,   90,   90,  623,
       90,   90,  761,   90,   90,   90,   90,   90,   90,  624,
       90,   90,  761,   90,  761,   90,  625,   90,  761,   90,

      761,  628,  761,  761,   90,   90,   90,   90,  761,  761,
       90,  626,   90,  761,   90,  629,  627,   90,  761,   90,
       90,   90,   90,   90,   90,  761,   90,   90,   90,  761,
       90,  635,   90,  761,  761,   90,   90,  761,  761,  761,
      630,   90,   90,   90,  761,  631,  632,  633,  636,   90,
       90,  761,   90,  634,   90,   90,   90,   90,   90,   90,
       90,   90,  761,   90,  761,   90,   90,  637,   90,  761,
       90,  761,   90,   90,   90,   90,  761,  761,   90,   90,
       90,  761,  761,  643,  640,   90,  761,   90,  761,  638,
      639,  641,   90,  645,   90,   90,  642,  761,   90,  648,

       90,   90,  761,   90,   90,   90,   90,   90,   90,  649,
       90,   90,  646,   90,   90,  761,   90,   90,  650,  761,
      647,  644,   90,   90,  651,  761,  761,   90,   90,   90,
      761,   90,  761,   90,   90,   90,   90,  652,   90,   90,
      761,   90,  761,   90,   90,   90,   90,  657,   90,  761,
      761,   90,   90,   90,   90,   90,   90,  653,   90,   90,
       90,  658,  654,  761,  655,   90,   90,   90,  761,  656,
      761,  659,   90,   90,   90,   90,   90,   90,   90,   90,
       90,  761,  761,   90,   90,  661,   90,   90,  761,   90,
       90,  660,   90,   90,   90,  761,  761,  667,   90,   90,

      761,  761,  761,  663,   90,   90,   90,   90,  761,  662,
      664,   90,   90,  669,   90,  665,  666,   90,   90,   90,
       90,   90,   90,   90,   90,  761,   90,   90,   90,  668,
       90,   90,  761,   90,   90,  670,   90,   90,  761,  671,
       90,   90,   90,  761,  673,  672,   90,  761,   90,  761,
       90,   90,   90,  761,   90,   90,   90,   90,   90,  674,
       90,   90,   90,   90,   90,   90,  761,  761,  761,  676,
       90,   90,   90,  761,   90,   90,   90,   90,   90,  761,
      675,   90,   90,   90,   90,   90,  677,  678,   90,  679,
      761,  761,  761,   90,   90,  680,   90,  761,   90,   90,

       90,   90,  686,   90,  682,  681,   90,   90,   90,   90,
       90,   90,   90,   90,  761,  761,   90,  761,   90,   90,
       90,  761,  683,  687,  684,   90,  688,  761,  761,  685,
       90,   90,   90,   90,   90,  761,   90,   90,   90,   90,
      689,   90,   90,   90,   90,  761,   90,  761,   90,  761,
      690,   90,  691,  761,  692,   90,   90,   90,  761,  693,
       90,   90,  761,   90,   90,   90,   90,   90,  761,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  761,  694,  761,  761,   90,  761,   90,  761,
      695,  761,  696,   90,   90,   90,  761,  761,  761,   90,

       90,  700,  761,  761,  697,  698,  699,   90,  761,  761,
       90,  701,   90,   90,  761,   90,   90,   90,   90,   90,
       90,   90,   90,   90,  761,  761,   90,  761,  761,   90,
      705,  761,  761,  702,   90,   90,  703,  761,  761,   90,
       90,   90,  761,  704,   90,   90,   90,   90,   90,   90,
       90,   90,  761,   90,  761,  706,  761,  707,  761,  708,
       90,  709,   90,   90,  761,   90,   90,  761,   90,  761,
       90,   90,   90,  761,   90,  761,   90,   90,   90,   90,
       90,   90,   90,  761,   90,  761,  710,   90,  711,  761,
       90,  713,   90,   90,  761,   90,  761,  712,   90,   90,

       90,   90,   90,  761,   90,   90,  761,  761,  761,   90,
      714,  715,   90,   90,   90,   90,   90,  761,   90,   90,
      716,   90,  720,   90,   90,  717,   90,  718,   90,   90,
      761,  722,  761,   90,   90,   90,   90,  761,  719,   90,
       90,   90,   90,   90,  723,  761,   90,  761,   90,   90,
       90,  761,   90,   90,  725,   90,   90,  721,  761,   90,
      761,   90,   90,  726,  761,   90,   90,  761,  761,   90,
      724,   90,  761,   90,   90,   90,   90,   90,  761,   90,
       90,   90,   90,   90,  761,  761,  727,   90,   90,  761,
       90,  761,  728,  761,   90,   90,   90,   90,  761,  729,

      731,   90,   90,  761,   90,   90,  730,   90,   90,   90,
      761,   90,   90,  732,   90,   90,   90,   90,   90,   90,
       90,   90,   90,  733,  761,  761,   90,   90,  734,   90,
      761,  761,   90,   90,   90,   90,  735,  761,   90,   90,
       90,   90,   90,   90,  761,   90,   90,  736,  761,   90,
       90,   90,   90,   90,  761,   90,   90,   90,   90,   90,
       90,  761,  761,   90,   90,   90,   90,   90,  737,   90,
       90,   90,   90,  739,  761,  761,  738,   90,   90,  761,
       90,   90,   90,   90,   90,  761,  761,   90,   90,   90,
       90,  740,  741,   90,   90,  761,   90,   90,  744,  742,

      743,  761,   90,   90,  745,   90,  761,   90,  746,   90,
       90,   90,  761,  761,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,  761,   90,   90,   90,   90,   90,
      761,   90,   90,   90,   90,   90,  761,  750,  747,   90,
       90,   90,  761,  752,  748,   90,  751,   90,   90,   90,
      749,   90,   90,   90,   90,   90,   90,  761,   90,   90,
       90,   90,   90,   90,   90,   90,   90,  761,  761,   90,
       90,   90,  755,   90,  761,  761,   90,   90,   90,  753,
      754,  761,   90,   90,   90,  761,   90,  758,   90,   90,
      761,  756,  761,  757,   90,   90,  761,   90,   90,   90,

      761,   90,   90,  761,  761,  761,  761,  761,   90,  761,
      761,  761,  761,  761,  761,  761,   90,  761,  759,  761,
       90,   90,  761,  761,  761,  761,  761,  761,  761,  760,
      141,  141,  144,  144,  164,  164,  164,  167,  167,  142,
      142,  145,  145,  165,  165,  165,  168,  168,    5,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,

      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761
    } ;

static yyconst flex_int16_t yy_chk[3325] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,   11,  763,   13,
       26,   26,   11,   20,   20,   20,   20,   20,   20,   20,
       21,   28,   28,  762,  156,   21,    3,    4,   13,   33,

       37,   38,   33,  156,   38,   23,   21,   23,   23,   23,
       23,   23,   23,   23,   32,  492,  449,   32,   54,   37,
       57,   33,   57,   38,   57,   32,  154,   11,   11,   38,
       63,   23,   11,   66,  154,   66,   32,   42,   11,   22,
       42,   22,   22,   22,   22,   22,   22,   22,   39,   40,
      446,   39,   40,  255,   48,   67,   23,   48,   42,   42,
       40,   39,   67,   54,   40,   22,   22,  445,  151,   48,
       39,   40,   39,   40,   39,  151,   48,   39,   39,  444,
       63,   63,   75,   75,   75,   63,  144,  150,  144,  150,
       22,   63,   75,   22,   30,  255,  441,  398,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   41,   46,  144,   41,   46,  397,  396,   30,   30,
       30,   30,   30,   30,   41,   43,   41,  393,   43,   44,
       41,  392,   44,   41,   46,   41,   46,   30,   30,   30,
       30,   41,   44,  391,  390,   44,   43,   43,  238,   43,
       45,   44,   44,   45,  164,  164,  164,  238,   76,   44,
       76,   45,  176,  236,  164,   30,   30,   30,   30,   31,
      389,  236,   45,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,  388,  176,   47,   49,
      385,   47,   49,   31,   31,   31,   31,   31,   31,   47,

       49,   76,  254,  254,  332,   52,   31,   49,   52,   31,
       47,   49,   31,   31,   31,   31,   50,   49,  331,   50,
       49,  252,   58,   52,   58,  330,  252,   52,   31,   50,
       51,   52,  141,   51,  141,   50,  141,  329,   50,   50,
       31,   31,   31,   31,  254,   51,   50,   58,   58,   58,
      328,  167,   51,  167,   51,   74,   74,   74,   74,   74,
       74,   74,   79,  327,   79,   79,   79,   79,   79,   79,
       79,   90,   74,   74,   90,   80,   74,   80,   80,   80,
       80,   80,   80,   80,   91,  324,  323,   91,   79,   94,
       74,   74,   94,   90,  167,  322,   74,   78,   78,   78,

       78,   78,   78,   78,   95,   92,   91,   95,   92,   93,
      321,   94,   93,   79,   78,   78,   92,  143,   78,  143,
       93,  143,  320,  319,  318,   96,   95,   92,   96,  317,
      316,   93,   78,   78,  259,  258,   96,  248,   78,   82,
       82,   82,   82,   82,   82,   82,  107,   96,  247,  107,
      246,  245,   82,   82,   82,   82,   82,   82,   83,  107,
       83,   83,   83,   83,   83,   83,   83,  244,  107,  107,
       82,   82,   82,   82,   82,   82,  100,  101,  243,  100,
      101,  242,  102,  241,   83,  102,  103,  240,  239,  103,
      105,  104,  101,  105,  104,  147,  237,  147,  100,  101,

      100,  103,  235,  233,  102,  105,  102,  104,  103,   83,
      232,  106,  105,  104,  106,  109,  174,  108,  109,  173,
      108,  111,  147,  112,  111,  110,  112,  168,  110,  113,
      109,  165,  113,  106,  112,  108,  163,  109,  106,  108,
      108,  110,  162,  111,  158,  112,  114,  110,  111,  114,
      115,  113,  116,  115,  157,  116,  117,  155,  113,  117,
      153,  114,  119,  116,  118,  119,  120,  118,  114,  120,
      121,  152,  115,  121,  116,  149,  116,  115,  117,  118,
      122,  145,  117,  122,  119,  121,  118,  123,  120,  142,
      123,  140,  121,  124,  120,  125,  124,  126,  125,   99,

      126,   97,  122,   89,  128,   85,  125,  128,  122,  123,
      123,  129,   69,  127,  129,  124,  127,  125,   68,  126,
       65,  124,  125,  125,  127,   60,  128,  130,  128,  131,
      130,  132,  131,  129,  132,  127,  133,  129,   35,  133,
      136,   27,  134,  136,  131,  134,  130,  135,   19,  130,
      135,  131,   17,  132,  132,  133,   16,  134,  133,  136,
      135,  136,  136,  137,  134,  138,  137,   10,  138,  135,
      146,  148,  146,  148,    9,    7,  166,  166,  166,  169,
      169,  169,  137,    5,  138,  137,  166,  138,    0,  179,
      180,  166,  179,  180,    0,    0,  146,  146,  148,  160,

      179,  160,    0,    0,  160,  160,  160,  160,  160,  160,
      160,  179,  180,  181,  182,  184,  181,  182,  184,  234,
        0,  234,  169,  170,  170,  170,  170,  170,  170,  170,
      181,    0,  253,  253,  253,  181,  182,  184,    0,  182,
      170,  170,  253,  171,  170,  171,  234,    0,  171,  171,
      171,  171,  171,  171,  171,    0,    0,  183,  170,  170,
      183,    0,  187,  188,  170,  187,  188,  189,  183,  190,
      189,  191,  190,    0,  191,  193,  188,    0,  193,  183,
      190,  194,    0,  192,  187,  188,  192,  191,  189,  189,
      193,  190,  196,  191,    0,  196,  192,  193,  194,  195,

        0,  194,  195,  197,    0,  192,  197,  196,    0,    0,
      198,    0,    0,  198,  196,  199,  200,    0,  199,  200,
      194,  195,    0,  198,    0,  197,  199,  195,    0,  200,
      197,  197,  198,  201,    0,    0,  201,  199,  200,    0,
      202,  203,  204,  202,  203,  204,  205,  206,  207,  205,
      206,  207,  202,  208,  203,  201,  208,  204,  206,    0,
        0,  201,  202,  203,  204,    0,  208,    0,  205,  206,
      207,    0,    0,  209,  205,  208,  209,  210,    0,    0,
      210,    0,  211,  211,  211,  212,    0,    0,  212,  213,
      210,  214,  213,  215,  214,  209,  215,    0,  216,  210,

      211,  216,  213,  211,    0,  214,  217,  212,    0,  217,
      212,  213,    0,  214,  218,  215,  221,  218,    0,  221,
      216,  215,  211,  219,    0,    0,  219,  216,  217,  220,
      222,  217,  220,  222,  223,    0,  218,  223,  221,  224,
      218,    0,  224,  222,  221,  219,  225,  219,  226,  225,
      226,  220,  222,    0,    0,  224,  223,  227,  220,  225,
      227,  224,  223,    0,  228,    0,  226,  228,  225,  226,
      229,  227,    0,  229,  230,  228,    0,  230,  264,  227,
        0,  264,    0,    0,    0,    0,  228,    0,  226,    0,
        0,  229,  229,    0,    0,  264,  230,    0,    0,    0,

      264,    0,  230,  249,  249,  249,  249,  249,  249,  249,
      250,  250,  250,  250,  250,  250,  250,  260,  260,  260,
      260,  260,  260,  260,    0,    0,    0,  256,  250,  256,
        0,  250,  256,  256,  256,  256,  256,  256,  256,  261,
      261,  261,  261,  261,  261,  261,  250,  265,    0,  266,
      265,  250,  266,    0,    0,  267,  268,  261,  267,  268,
      261,    0,  269,  270,  266,  269,  270,  272,    0,  265,
      272,  266,  265,  268,  271,  261,  267,  267,  268,  275,
      261,  275,  270,  273,  269,  270,  273,  269,    0,  272,
      276,  271,  274,  276,  271,  274,  277,  275,  278,  277,

      275,  278,    0,  273,    0,  273,  279,  274,  280,  279,
        0,  280,  276,  271,  274,    0,    0,  282,  277,  275,
      278,    0,  281,  283,  278,  281,  283,    0,  279,    0,
      280,    0,  279,    0,  282,  284,  280,  282,  284,  286,
      288,  281,  286,  288,  281,  283,  284,  285,  285,  285,
        0,  287,  283,  287,  291,  289,  282,  284,  289,    0,
      286,  286,  288,  293,  290,  285,  293,  290,  285,  287,
        0,  291,  287,    0,  291,    0,  292,  289,  292,  294,
      295,  296,  294,  295,  296,  293,  290,  285,    0,    0,
        0,  287,  290,  291,  292,  293,  296,  292,    0,    0,

        0,  294,  295,  296,  297,  298,  299,  297,  298,  299,
        0,  294,  295,    0,  300,  302,  292,  300,  302,    0,
      301,  303,  297,  301,  303,    0,  297,  298,  299,  298,
      302,  304,  299,    0,  304,  305,  300,  302,  305,  306,
      300,  301,  301,  303,  304,    0,    0,  307,  305,  303,
      307,  308,  310,  304,  308,  310,  306,  305,  309,  306,
      309,  311,  312,  313,  311,  312,  313,  314,  342,  307,
      314,  342,    0,  308,  310,  308,  309,  315,  306,  309,
      315,  342,  314,  311,  312,  313,    0,    0,    0,  314,
      342,  313,  315,    0,  337,    0,    0,  337,  309,  315,

      333,  333,  333,  333,  333,  333,  333,  334,  334,  334,
      334,  334,  334,  334,  336,  337,  337,  336,  338,  338,
      338,    0,    0,  339,  340,  334,  339,  340,  334,  336,
      341,  338,  338,  341,    0,    0,  336,  338,  339,  340,
      338,  343,    0,  334,  343,  339,  340,  344,  334,    0,
      344,  341,  341,  345,  346,  347,  345,  346,  347,  338,
        0,  348,    0,  343,  348,  349,    0,  350,  349,  344,
      350,  351,    0,    0,  351,  345,  346,  347,  352,  345,
      349,  352,    0,  348,    0,  348,    0,  349,  353,  350,
        0,  353,  354,  351,  351,  354,    0,    0,  355,  356,

      352,  355,  356,  357,  358,  359,  357,  358,  359,  353,
      353,    0,  360,    0,  354,  360,    0,    0,  354,  358,
      355,  356,    0,    0,    0,  357,  358,  359,    0,  361,
      355,  356,  361,  362,  360,  357,  362,  363,  364,    0,
      363,  364,    0,  365,  365,  365,    0,  366,  366,  366,
        0,  361,  367,  367,  367,  362,    0,    0,    0,  363,
      364,  365,    0,  368,  365,  366,  368,    0,  366,  369,
      367,  370,  369,  367,  370,  373,  371,  372,  373,  371,
      372,  376,    0,  365,  376,  368,    0,  366,    0,  368,
      373,  369,  367,  370,  370,  371,    0,  373,  371,  372,

      372,  374,  375,  376,  374,  375,    0,  377,  378,  376,
      377,  378,    0,  379,  380,  374,  379,  380,  381,  382,
      375,  381,  382,  374,  375,  377,    0,    0,  383,  377,
      378,  383,    0,    0,  384,  379,  380,  384,  382,  379,
      381,  382,  400,    0,    0,  400,  399,  399,  399,    0,
      383,  404,  405,    0,  404,  405,  384,  400,  384,  399,
      399,    0,  401,  402,  400,  399,  401,  402,  399,  401,
      402,  403,    0,  404,  405,  403,  406,    0,  403,  406,
      404,  405,  407,  407,  407,    0,    0,  399,  401,  402,
      408,  410,    0,  408,  410,  407,  407,  403,  406,    0,

      409,  407,  406,  409,  407,  408,  411,    0,  412,  411,
      409,  412,  408,  410,  413,  415,  414,  413,  415,  414,
        0,    0,  409,  407,    0,  411,    0,    0,  411,  415,
      412,  412,  416,  416,  416,    0,  413,  415,  414,  417,
      417,  417,    0,  413,  414,  418,  418,  418,  419,  420,
      416,  419,  420,  416,    0,  421,  422,  417,  421,  422,
      417,  423,  424,  418,  423,  424,  418,    0,    0,    0,
      419,  420,  416,  425,    0,    0,  425,  421,  422,  417,
        0,    0,    0,  423,  424,  418,  426,  427,  428,  426,
      427,  428,    0,  429,    0,  425,  429,  430,    0,  431,

      430,  432,  431,  433,  432,    0,  433,    0,  426,  427,
      428,  434,  431,  435,  434,  429,  435,    0,  430,  430,
      429,  431,    0,  432,  436,  433,  437,  436,  438,  437,
        0,  438,    0,  434,  439,  435,  440,  439,  451,  440,
      452,    0,  451,    0,  452,  451,  436,  452,  437,  454,
      438,  455,  454,  453,  455,  439,  439,  453,  440,  440,
      453,    0,  456,    0,  451,  456,  452,  457,    0,  459,
        0,  454,  459,  455,  457,    0,  458,  457,  454,  453,
      455,    0,    0,  458,  456,  458,  458,  460,  456,  461,
      460,  459,  461,  462,  462,  462,  457,  466,    0,  467,

      466,  461,  467,  460,    0,  458,  462,  462,    0,  460,
      463,  461,  462,    0,  463,  462,  464,  463,  465,  466,
      464,  467,  465,  464,  468,  465,  466,  468,  467,  469,
      472,    0,  469,  472,  462,  470,  463,  471,  470,    0,
      471,    0,  464,    0,  465,  472,  468,    0,    0,  470,
      468,  469,  472,  473,    0,    0,  473,  470,  469,  471,
      474,  475,    0,  474,  475,  471,  476,  477,  478,  476,
      477,  478,    0,  479,  480,  473,  479,  480,  481,    0,
        0,  481,  474,  475,  482,    0,    0,  482,  476,  477,
      478,  483,    0,    0,  483,  479,  480,    0,  484,  485,

      481,  484,  485,    0,  487,  486,  482,  487,  486,  488,
        0,    0,  488,  483,  489,  495,  497,  489,    0,  497,
      484,  485,  495,  484,  488,  495,  487,  486,    0,    0,
      496,  488,  485,  486,    0,  489,  489,  496,  497,  496,
      496,    0,  498,  499,  495,  498,  499,  500,  500,  500,
      501,  502,    0,  501,  502,  499,    0,    0,  498,  496,
      500,  500,    0,    0,  498,  499,  500,  503,  504,  500,
      503,  504,  501,  502,    0,  506,  501,  502,  505,  506,
      509,  505,  506,  509,  504,    0,    0,  507,  500,  503,
      504,  507,  508,  505,  507,  510,  508,  511,  510,  508,

      505,  506,  509,  513,  511,  512,  513,  511,  515,  509,
        0,  515,  512,  507,  512,  512,  514,  510,  508,  514,
      515,    0,    0,    0,  510,  513,  511,  516,  516,  516,
      515,    0,  514,  517,  512,    0,  517,    0,  514,  518,
      516,  516,  518,    0,  519,  520,  516,  519,  520,  516,
      521,  522,  517,  521,  522,  517,  523,  524,    0,  523,
      524,  518,    0,    0,    0,  521,  519,  520,  516,    0,
        0,  525,  521,  522,  525,    0,    0,  527,  523,  524,
      527,    0,  539,  528,  529,  530,  528,  529,  530,  539,
      532,    0,  539,  525,  532,  531,    0,  532,  531,  527,

        0,  530,    0,  527,  525,  528,  529,  530,  533,  528,
      531,  539,  533,    0,  534,  533,  532,  531,  534,  535,
      536,  534,  535,  536,  537,  538,    0,  537,  538,  541,
      540,    0,  544,  540,  533,  544,  541,    0,    0,  541,
      534,  535,  536,    0,    0,  540,  537,  538,  535,  536,
      537,  538,  540,  542,  544,  543,  545,    0,  541,  545,
      542,    0,  543,  542,  543,  543,  547,  546,  548,  547,
      546,  548,  545,  549,    0,    0,  549,  550,  545,  546,
      550,    0,  542,  551,  543,    0,  551,    0,  547,  546,
      548,    0,  547,  550,  548,  549,  552,  553,  551,  550,

      552,  553,  554,  552,  553,  551,  554,  555,  556,  554,
      555,  556,  557,    0,    0,  557,  559,  560,  558,  559,
      560,  558,  552,  553,  561,    0,    0,  561,  554,  555,
      556,  558,    0,    0,  557,  557,  555,  556,  559,  560,
      558,  562,  563,  560,  567,  563,  561,  567,  562,  564,
      561,  562,    0,  565,    0,    0,  564,  563,  566,  564,
      565,    0,    0,  565,  563,  566,  567,  566,  566,  568,
      562,  569,  568,  570,  569,    0,  570,  571,  564,    0,
      571,    0,  565,  569,  570,  568,  572,  566,  571,  572,
        0,  568,    0,  569,  573,  570,    0,  573,    0,  571,

      574,  575,    0,  574,  575,    0,  576,  577,  572,  576,
      577,    0,  572,    0,  578,  581,  573,  578,  581,    0,
      573,    0,  574,  575,  576,    0,  574,  575,  576,  577,
      581,  579,  580,  577,  579,  580,  578,  581,  582,  583,
      584,  582,  583,    0,    0,    0,    0,  584,  580,  579,
      584,    0,  585,  579,  580,  585,  586,    0,    0,  589,
      582,  583,  589,  586,  582,  583,  586,  585,  587,  584,
      588,    0,    0,  590,  585,  587,  590,  588,  587,  588,
      588,  589,    0,  592,  591,  586,  592,  591,  593,  590,
      594,  593,    0,  594,    0,  590,  591,  587,    0,  588,

        0,  594,    0,    0,  595,  592,  591,  595,    0,    0,
      593,  592,  594,    0,  596,  595,  593,  596,    0,  597,
      598,  599,  597,  598,  599,    0,  595,  600,  601,    0,
      600,  601,  602,    0,    0,  602,  596,    0,    0,    0,
      596,  597,  598,  599,    0,  597,  598,  599,  602,  600,
      601,    0,  603,  600,  602,  603,  604,  605,  606,  604,
      605,  606,    0,  607,    0,  608,  607,  603,  608,    0,
      609,    0,  610,  609,  603,  610,    0,    0,  604,  605,
      606,    0,    0,  610,  606,  607,    0,  608,    0,  604,
      605,  608,  609,  612,  610,  611,  609,    0,  611,  615,

      612,  613,    0,  612,  613,  614,  615,  616,  614,  615,
      616,  618,  613,  617,  618,    0,  617,  611,  616,    0,
      614,  611,  612,  613,  617,    0,    0,  614,  615,  616,
        0,  619,    0,  618,  619,  617,  620,  618,  621,  620,
        0,  621,    0,  622,  623,  624,  622,  623,  624,    0,
        0,  626,  628,  619,  626,  628,  625,  619,  620,  625,
      621,  624,  620,    0,  621,  622,  623,  624,    0,  622,
        0,  625,  627,  626,  628,  627,  629,  630,  625,  629,
      630,    0,    0,  631,  632,  628,  631,  632,    0,  633,
      634,  627,  633,  634,  627,    0,    0,  635,  629,  630,

        0,    0,    0,  630,  635,  631,  632,  635,    0,  629,
      632,  633,  634,  637,  636,  633,  634,  636,  638,  639,
      637,  638,  639,  637,  640,    0,  635,  640,  641,  636,
      643,  641,    0,  643,  642,  640,  636,  642,    0,  641,
      638,  639,  637,    0,  643,  642,  640,    0,  644,    0,
      641,  644,  643,    0,  645,  646,  642,  645,  646,  644,
      647,  648,  650,  647,  648,  650,    0,    0,    0,  646,
      644,  649,  651,    0,  649,  651,  645,  646,  652,    0,
      645,  652,  647,  648,  650,  653,  647,  648,  653,  649,
        0,    0,    0,  649,  651,  650,  654,    0,  655,  654,

      652,  655,  657,  656,  652,  651,  656,  653,  658,  657,
      660,  658,  657,  660,    0,    0,  661,    0,  654,  661,
      655,    0,  654,  658,  655,  656,  659,    0,    0,  656,
      658,  657,  660,  659,  662,    0,  659,  662,  661,  663,
      660,  664,  663,  665,  664,    0,  665,    0,  666,    0,
      663,  666,  664,    0,  665,  659,  662,  667,    0,  666,
      667,  663,    0,  664,  668,  665,  669,  668,    0,  669,
      666,  670,  671,  672,  670,  671,  672,  673,  674,  667,
      673,  674,    0,  667,    0,    0,  668,    0,  669,    0,
      668,    0,  669,  670,  671,  672,    0,    0,    0,  673,

      674,  673,    0,    0,  670,  671,  672,  675,    0,    0,
      675,  674,  676,  677,    0,  676,  677,  678,  680,  679,
      678,  680,  679,  681,    0,    0,  681,    0,    0,  675,
      679,    0,    0,  675,  676,  677,  676,    0,    0,  678,
      680,  679,    0,  678,  682,  681,  683,  682,  684,  683,
      685,  684,    0,  685,    0,  682,    0,  683,    0,  684,
      686,  685,  687,  686,    0,  687,  682,    0,  683,    0,
      684,  688,  685,    0,  688,    0,  689,  690,  691,  689,
      690,  691,  686,    0,  687,    0,  686,  692,  687,    0,
      692,  689,  693,  688,    0,  693,    0,  688,  689,  690,

      691,  694,  695,    0,  694,  695,    0,    0,    0,  692,
      690,  691,  696,  697,  693,  696,  697,    0,  698,  699,
      692,  698,  699,  694,  695,  693,  700,  694,  701,  700,
        0,  701,    0,  702,  696,  697,  702,    0,  696,  703,
      698,  699,  703,  704,  702,    0,  704,    0,  700,  705,
      701,    0,  705,  706,  704,  702,  706,  700,    0,  707,
        0,  703,  707,  705,    0,  704,  708,    0,    0,  708,
      703,  705,    0,  709,  710,  706,  709,  710,    0,  711,
      713,  707,  711,  713,    0,    0,  706,  712,  708,    0,
      712,    0,  707,    0,  714,  709,  710,  714,    0,  708,

      710,  711,  713,    0,  715,  716,  709,  715,  716,  712,
        0,  717,  718,  712,  717,  718,  714,  719,  720,  721,
      719,  720,  721,  718,    0,    0,  715,  716,  719,  722,
        0,    0,  722,  717,  718,  723,  720,    0,  723,  719,
      720,  721,  724,  725,    0,  724,  725,  722,    0,  726,
      727,  722,  726,  727,    0,  728,  729,  723,  728,  729,
      730,    0,    0,  730,  724,  725,  733,  734,  723,  733,
      734,  726,  727,  726,    0,    0,  725,  728,  729,    0,
      731,  732,  730,  731,  732,    0,    0,  735,  733,  734,
      735,  731,  732,  736,  737,    0,  736,  737,  735,  733,

      734,    0,  731,  732,  736,  738,    0,  739,  738,  735,
      739,  740,    0,    0,  740,  736,  737,  741,  742,  743,
      741,  742,  743,  744,    0,  746,  744,  738,  746,  739,
        0,  747,  745,  740,  747,  745,    0,  744,  739,  741,
      742,  743,    0,  746,  740,  744,  745,  746,  748,  749,
      741,  748,  749,  747,  745,  750,  751,    0,  750,  751,
      753,  752,  754,  753,  752,  754,  756,    0,    0,  756,
      748,  749,  752,  755,    0,    0,  755,  750,  751,  750,
      751,    0,  753,  752,  754,    0,  757,  755,  756,  757,
        0,  753,    0,  754,  758,  755,    0,  758,  759,  760,

        0,  759,  760,    0,    0,    0,    0,    0,  757,    0,
        0,    0,    0,    0,    0,    0,  758,    0,  758,    0,
      759,  760,    0,    0,    0,    0,    0,    0,    0,  759,
      764,  764,  765,  765,  766,  766,  766,  767,  767,  768,
      768,  769,  769,  770,  770,  770,  771,  771,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,

      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/Parse/Lexer.lex"

#line 34 "src/Parse/Lexer.lex"
namespace
{

struct LexerInfo
{
	explicit LexerInfo(const std::string& str, std::size_t start, std::size_t length)
		: input(&str)
		, pos(std::min(start, input->size()))
		, line(0)
		, column(0)
		, curToken(nullptr)
	{
		// Initialize the line and column number.
		for (std::size_t i = 0; i < start; ++i)
		{
			if ((*input)[i] == '\n')
			{
				++line;
				column = 0;
			}
			else
				++column;
		}
	}

	const std::string* input;
	std::size_t pos;
	std::size_t line;
	std::size_t column;
	std::size_t end;
	msl::Token* curToken;
};

void addToken(LexerInfo* info, msl::Token::Type type, const char* text)
{
	std::size_t length = std::strlen(text);
	assert(info->curToken);
	*info->curToken = msl::Token(type, info->pos, length, info->line, info->column);
	info->pos += length;
	assert(info->pos <= info->end);
	info->column += length;
}

void addNewline(LexerInfo* info, const char* text)
{
	unsigned int length = static_cast<unsigned int>(std::strlen(text));
	assert(info->curToken);
	*info->curToken = msl::Token(msl::Token::Type::Newline, info->pos, length, info->line,
		info->column);
	info->pos += length;
	assert(info->pos <= info->end);
	++info->line;
	info->column = 0;
}

void addComment(LexerInfo* info, const char* text)
{
	unsigned int length = static_cast<unsigned int>(std::strlen(text));
	assert(info->curToken);
	*info->curToken = msl::Token(msl::Token::Type::Comment, info->pos, length, info->line,
		info->column);
	info->pos += length;
	assert(info->pos <= info->end);

	// Update the line and column based on newlines within the comment.
	for (unsigned int i = 0; i < length; ++i)
	{
		if (text[i] == '\n')
		{
			++info->line;
			info->column = 0;
		}
		else
			++info->column;
	}
}

} // namespace

#define YY_DECL static bool msllex (yyscan_t yyscanner)
#define YY_EXTRA_TYPE LexerInfo*
#define YY_NO_INPUT
#define YY_NO_UNPUT
#define YY_INPUT(buf, result, max_size) \
	{ \
		result = std::min(max_size, yyextra->end - yyextra->pos); \
		std::memcpy(buf, yyextra->input->c_str() + yyextra->pos, result); \
		yyextra->pos += result; \
	}

#line 1554 "src/Parse/Lexer.cpp"

#define INITIAL 0
#define INCLUDE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int msllex_init (yyscan_t* scanner);

int msllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int msllex_destroy (yyscan_t yyscanner );

int mslget_debug (yyscan_t yyscanner );

void mslset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE mslget_extra (yyscan_t yyscanner );

void mslset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *mslget_in (yyscan_t yyscanner );

void mslset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *mslget_out (yyscan_t yyscanner );

void mslset_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t mslget_leng (yyscan_t yyscanner );

char *mslget_text (yyscan_t yyscanner );

int mslget_lineno (yyscan_t yyscanner );

void mslset_lineno (int _line_number ,yyscan_t yyscanner );

int mslget_column  (yyscan_t yyscanner );

void mslset_column (int _column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mslwrap (yyscan_t yyscanner );
#else
extern int mslwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int msllex (yyscan_t yyscanner);

#define YY_DECL int msllex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			mslensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		msl_load_buffer_state(yyscanner );
		}

	{
#line 128 "src/Parse/Lexer.lex"


#line 1819 "src/Parse/Lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 762 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3249 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 130 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Whitespace, yytext); return true;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 131 "src/Parse/Lexer.lex"
addNewline(yyextra, yytext); BEGIN(INITIAL); return true;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 132 "src/Parse/Lexer.lex"
addNewline(yyextra, yytext); return true;
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 134 "src/Parse/Lexer.lex"
addComment(yyextra, yytext); return true;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 135 "src/Parse/Lexer.lex"
addComment(yyextra, yytext); return true;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 137 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Exclamation, yytext); return true;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 138 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Percent, yytext); return true;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 139 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Tilde, yytext); return true;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Carot, yytext); return true;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 141 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Amperstand, yytext); return true;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bar, yytext); return true;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Asterisk, yytext); return true;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Slash, yytext); return true;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Plus, yytext); return true;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dash, yytext); return true;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Equal, yytext); return true;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftParen, yytext); return true;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightParen, yytext); return true;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftBracket, yytext); return true;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightBracket, yytext); return true;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftBrace, yytext); return true;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightBrace, yytext); return true;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftAngle, yytext); return true;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightAngle, yytext); return true;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Question, yytext); return true;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Colon, yytext); return true;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dot, yytext); return true;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Comma, yytext); return true;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Semicolon, yytext); return true;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 162 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAnd, yytext); return true;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 163 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOr, yytext); return true;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 164 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXor, yytext); return true;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 165 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftShift, yytext); return true;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 166 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightShift, yytext); return true;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 167 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::EqualCompare, yytext); return true;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 168 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NotEqual, yytext); return true;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 169 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LessEual, yytext); return true;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 170 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::GreaterEqual, yytext); return true;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 171 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::XorEqual, yytext); return true;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 172 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AndEqual, yytext); return true;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 173 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::OrEqual, yytext); return true;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 174 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MultiplyEqual, yytext); return true;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 175 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DivideEqual, yytext); return true;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 176 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PlusEqual, yytext); return true;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MinusEqual, yytext); return true;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAndEqual, yytext); return true;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 180 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOrEqual, yytext); return true;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 181 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXorEqual, yytext); return true;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 182 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolLeftShiftEqual, yytext); return true;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 183 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolRightShiftEqual, yytext); return true;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 185 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Const, yytext); return true;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 186 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Centroid, yytext); return true;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 187 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Break, yytext); return true;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 188 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Continue, yytext); return true;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 189 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Do, yytext); return true;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 190 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Else, yytext); return true;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 191 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::For, yytext); return true;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 192 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::If, yytext); return true;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 193 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Discard, yytext); return true;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 194 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Return, yytext); return true;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 195 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Switch, yytext); return true;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 196 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Case, yytext); return true;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 197 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Default, yytext); return true;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 198 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Uniform, yytext); return true;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 199 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Patch, yytext); return true;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 200 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sample, yytext); return true;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 201 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Buffer, yytext); return true;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 202 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Shared, yytext); return true;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 203 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Coherent, yytext); return true;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 204 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Volatile, yytext); return true;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 205 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Restrict, yytext); return true;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 206 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ReadOnly, yytext); return true;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 207 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::WriteOnly, yytext); return true;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 208 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NonPerspective, yytext); return true;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 209 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Flat, yytext); return true;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 210 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Smooth, yytext); return true;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 211 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Struct, yytext); return true;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 212 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Void, yytext); return true;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 213 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::While, yytext); return true;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 215 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bool, yytext); return true;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 216 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Float, yytext); return true;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 217 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Double, yytext); return true;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 218 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Int, yytext); return true;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 219 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Uint, yytext); return true;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 220 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec2, yytext); return true;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 221 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec3, yytext); return true;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 222 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec4, yytext); return true;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 223 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec2, yytext); return true;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 224 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec3, yytext); return true;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 225 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec4, yytext); return true;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 226 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec2, yytext); return true;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 227 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec3, yytext); return true;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 228 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec4, yytext); return true;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 229 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec2, yytext); return true;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 230 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec3, yytext); return true;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 231 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec4, yytext); return true;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 232 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec2, yytext); return true;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 233 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec3, yytext); return true;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 234 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec4, yytext); return true;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 235 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2, yytext); return true;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 236 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3, yytext); return true;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 237 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4, yytext); return true;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 238 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2, yytext); return true;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 239 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3, yytext); return true;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 240 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4, yytext); return true;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 241 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x2, yytext); return true;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 242 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x3, yytext); return true;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 243 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x4, yytext); return true;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 244 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x2, yytext); return true;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 245 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x3, yytext); return true;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 246 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x4, yytext); return true;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 247 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x2, yytext); return true;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 248 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x3, yytext); return true;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 249 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x4, yytext); return true;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 250 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x2, yytext); return true;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 251 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x3, yytext); return true;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 252 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x4, yytext); return true;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 253 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x2, yytext); return true;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 254 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x3, yytext); return true;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 255 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x4, yytext); return true;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 256 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x2, yytext); return true;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 257 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x3, yytext); return true;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 258 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x4, yytext); return true;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 259 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1D, yytext); return true;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 260 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2D, yytext); return true;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 261 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler3D, yytext); return true;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 262 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCube, yytext); return true;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 263 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DShadow, yytext); return true;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 264 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DShadow, yytext); return true;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 265 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeShadow, yytext); return true;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 266 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArray, yytext); return true;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 267 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArray, yytext); return true;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 268 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArrayShadow, yytext); return true;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 269 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArrayShadow, yytext); return true;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 270 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1D, yytext); return true;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 271 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2D, yytext); return true;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 272 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler3D, yytext); return true;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 273 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCube, yytext); return true;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 274 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1DArray, yytext); return true;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 275 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DArray, yytext); return true;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 276 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1D, yytext); return true;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 277 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2D, yytext); return true;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 278 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler3D, yytext); return true;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 279 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCube, yytext); return true;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 280 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1DArray, yytext); return true;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 281 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DArray, yytext); return true;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 282 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerBuffer, yytext); return true;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 283 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerBuffer, yytext); return true;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 284 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerBuffer, yytext); return true;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 285 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArray, yytext); return true;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 286 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArrayShadow, yytext); return true;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 287 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCubeArray, yytext); return true;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 288 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCubeArray, yytext); return true;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 289 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMS, yytext); return true;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 290 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMS, yytext); return true;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 291 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMS, yytext); return true;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 292 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMSArray, yytext); return true;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 293 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMSArray, yytext); return true;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 294 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMSArray, yytext); return true;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 295 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1D, yytext); return true;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 296 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1D, yytext); return true;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 297 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1D, yytext); return true;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 298 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2D, yytext); return true;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 299 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2D, yytext); return true;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 300 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2D, yytext); return true;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 301 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image3D, yytext); return true;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 302 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage3D, yytext); return true;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 303 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage3D, yytext); return true;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 304 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCube, yytext); return true;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 305 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCube, yytext); return true;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 306 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCube, yytext); return true;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 307 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageBuffer, yytext); return true;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 308 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageBuffer, yytext); return true;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 309 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageBuffer, yytext); return true;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 310 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1DArray, yytext); return true;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 311 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1DArray, yytext); return true;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 312 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1DArray, yytext); return true;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 313 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DArray, yytext); return true;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 314 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DArray, yytext); return true;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 315 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DArray, yytext); return true;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 316 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCubeArray, yytext); return true;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 317 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCubeArray, yytext); return true;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 318 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCubeArray, yytext); return true;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 319 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMS, yytext); return true;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 320 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMS, yytext); return true;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 321 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMS, yytext); return true;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 322 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMSArray, yytext); return true;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 323 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMSArray, yytext); return true;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 324 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMSArray, yytext); return true;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 325 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AtomicUint, yytext); return true;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 327 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Hash, yytext); return true;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 328 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Include, yytext); BEGIN(INCLUDE); return true;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 329 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Pragma, yytext); return true;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 330 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Define, yytext); return true;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 331 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifdef, yytext); return true;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 332 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifndef, yytext); return true;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 333 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocIf, yytext); return true;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 334 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElif, yytext); return true;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 335 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElse, yytext); return true;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 336 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocEndif, yytext); return true;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 337 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocConcat, yytext); return true;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 338 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IncludePath, yytext); BEGIN(INITIAL); return true;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 340 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 341 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 342 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 343 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 344 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::FloatLiteral, yytext); return true;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 345 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::FloatLiteral, yytext); return true;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 346 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DoubleLiteral, yytext); return true;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 347 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DoubleLiteral, yytext); return true;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 349 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Identifier, yytext); return true;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 351 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Invalid, yytext); return true;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 353 "src/Parse/Lexer.lex"
ECHO;
	YY_BREAK
#line 2945 "src/Parse/Lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * msllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( mslwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of msllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mslrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 762 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 762 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 761);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mslrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mslwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mslrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        mslensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	msl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	msl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void msl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mslpop_buffer_state();
	 *		mslpush_buffer_state(new_buffer);
     */
	mslensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	msl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (mslwrap()) processing, but the only time this flag
	 * is looked at is after mslwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void msl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE msl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mslalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in msl_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mslalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in msl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	msl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with msl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void msl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mslfree((void *) b->yy_ch_buf ,yyscanner );

	mslfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mslrestart() or at EOF.
 */
    static void msl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	msl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then msl_init_buffer was _probably_
     * called from mslrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void msl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		msl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void mslpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	mslensure_buffer_stack(yyscanner);

	/* This block is copied from msl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from msl_switch_to_buffer. */
	msl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void mslpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	msl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		msl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mslensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mslensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mslrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mslensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE msl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mslalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in msl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	msl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to msllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       msl_scan_bytes() instead.
 */
YY_BUFFER_STATE msl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return msl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to msllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE msl_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) mslalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in msl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = msl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in msl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE mslget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int mslget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int mslget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *mslget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *mslget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t mslget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *mslget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void mslset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void mslset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mslset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void mslset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mslset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see msl_switch_to_buffer
 */
void mslset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void mslset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int mslget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void mslset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* msllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int msllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) mslalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* msllex_init_extra has the same functionality as msllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to mslalloc in
 * the yyextra field.
 */

int msllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    mslset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) mslalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    mslset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from msllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * msllex_init()
     */
    return 0;
}

/* msllex_destroy is for both reentrant and non-reentrant scanners. */
int msllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		msl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mslpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	mslfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        mslfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * msllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    mslfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mslalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *mslrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mslfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see mslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 353 "src/Parse/Lexer.lex"



namespace msl
{

class Lexer::Impl
{
public:
	Impl(const std::string& input, std::size_t start, std::size_t length)
		: m_info(input, start, length)
	{
		msllex_init_extra(&m_info,&m_scanner);
	}

	~Impl()
	{
		msllex_destroy(m_scanner);
	}

	yyscan_t m_scanner;
	LexerInfo m_info;
};

std::vector<Token> Lexer::tokenize(const std::string& input, std::size_t start, std::size_t length)
{
	std::vector<Token> tokens;
	Token curToken;

	Lexer lexer(input, start, length);
	while (lexer.nextToken(curToken))
		tokens.push_back(curToken);

	return tokens;
}

Lexer::Lexer(const std::string& input, std::size_t start, std::size_t length)
	: m_impl(new Impl(input, start, length))
{
}

Lexer::~Lexer()
{
}

Lexer::Lexer(Lexer&& other)
	: m_impl(std::move(other.m_impl))
{
}

Lexer& Lexer::operator=(Lexer&& other)
{
	m_impl = std::move(other.m_impl);
	return *this;
}

bool Lexer::nextToken(Token& token)
{
	assert(m_impl);
	m_impl->m_info.curToken = &token;
	return msllex(m_impl->m_scanner);
}

} // msl

