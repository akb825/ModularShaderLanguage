#line 2 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"
#line 2 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
/*
 * Copyright 2016 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <MSL/Frontend/Parse/Lexer.h>
#include <algorithm>
#include <cstring>

#if MSL_GCC || MSL_CLANG
#pragma GCC diagnostic ignored "-Wunused-function"
#endif

#if MSL_GCC
#pragma GCC diagnostic ignored "-Wsubobject-linkage"
#endif

#if MSL_WINDOWS
#define YY_NO_UNISTD_H
#include <io.h>
#endif




#line 40 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mslrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mslrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void mslrestart (FILE *input_file ,yyscan_t yyscanner );
void msl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void msl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void msl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void mslpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void mslpop_buffer_state (yyscan_t yyscanner );

static void mslensure_buffer_stack (yyscan_t yyscanner );
static void msl_load_buffer_state (yyscan_t yyscanner );
static void msl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER msl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE msl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *mslalloc (yy_size_t ,yyscan_t yyscanner );
void *mslrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void mslfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer msl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mslensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mslensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 213
#define YY_END_OF_BUFFER 214
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[736] =
    {   0,
        0,    0,    0,    0,  214,  212,    1,    2,    1,  213,
        6,  191,    7,   10,   17,   18,   12,   14,   28,   15,
       27,   13,  203,  204,   26,   29,   23,   16,   24,   25,
      211,   19,  212,   20,    9,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
       21,   11,   22,    8,  212,   23,  212,    1,    1,    2,
       36,    0,  212,  201,  212,  212,  212,  212,   30,   40,
       42,   44,   45,  208,    0,    4,   43,  207,  205,  212,
      203,  212,  204,  204,   33,   37,   35,   38,   34,  211,
        3,    0,   39,   32,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,   55,  211,  211,  211,  211,
       58,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,   41,   31,  212,    0,  202,    0,   33,
       37,  202,    0,    0,    0,    0,  212,  212,  212,  197,
      212,  212,   46,    0,  208,    0,    0,    0,    0,    4,
        4,  207,    0,  207,    0,    0,  205,  206,   49,   50,
       48,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,   57,  211,
      211,   83,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,   47,  202,   49,    0,    0,
        0,  197,    0,    0,  212,  212,  212,  212,  212,  212,
      212,  212,    0,  208,  210,    5,    0,    0,  207,    0,
        0,    0,  207,  209,  206,  211,   80,  211,  211,  211,
       62,  211,  211,  211,  211,  211,  211,  211,  211,  211,
       56,   75,  211,  211,  211,  211,  211,  100,  101,  102,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,   84,  211,  211,  211,   94,   95,   96,   78,  211,
      211,  211,    0,    0,    0,    0,    0,    0,    0,    0,

      212,  198,  199,  212,  212,  212,  212,  212,    0,  207,
      209,  211,   53,  211,   85,   86,   87,  211,  211,   51,
      211,  211,  211,  103,  104,  105,  211,   97,   98,   99,
       81,  211,  211,  211,   88,   89,   90,  211,  211,  211,
      211,   65,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,   91,   92,   93,  211,   79,  211,    0,
      198,  199,    0,    0,    0,    0,    0,  212,  200,  195,
      212,  212,  212,  211,   67,  211,  211,  211,  211,  211,
      211,  211,  211,   82,  211,  211,  211,  211,  211,  211,
      211,  106,  107,  108,  109,  110,  111,  112,  113,  114,

      211,  211,  211,   60,   66,   68,   76,   77,   61,  211,
      211,  211,  211,  211,    0,  200,  195,    0,    0,    0,
      194,  196,  212,  193,  211,  211,  211,  211,   63,   59,
      115,  116,  117,  118,  119,  120,  121,  122,  123,  211,
      211,  211,  211,  211,  160,  163,  166,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,   64,
      211,  211,  211,  194,  196,    0,  193,  192,  211,   52,
       69,   54,  161,  164,  167,  211,  211,  211,  211,  211,
      211,  211,  211,  211,   72,   71,  211,  211,  211,  211,
      211,  162,  165,  168,  211,  211,  211,   70,  211,  192,

      211,  211,  211,  211,  211,  211,  211,  211,  184,  211,
      169,  211,  211,  211,  211,  211,  211,  124,  125,  126,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,   73,  211,  211,  211,  185,  211,  170,  211,
      211,  211,  211,  211,  135,  136,  137,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  186,
      211,  171,  141,  142,  143,  211,  211,  190,  211,  211,
      211,  211,  211,  211,  211,  211,  172,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  154,  211,  211,
      127,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  173,  211,  175,  178,  211,  211,
      211,  211,  155,  211,  138,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  174,  211,  211,
      211,  156,  211,  144,  176,  179,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  147,  211,  211,  177,  180,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  187,  181,  211,  211,  211,
      148,  211,   74,  131,  211,  132,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  149,  211,  188,  182,  139,
      140,  211,  211,  211,  128,  211,  211,  129,  211,  211,

      189,  183,  145,  146,  211,  211,  211,  211,  211,  211,
      157,  150,  211,  211,  211,  158,  152,  211,  211,  211,
      130,  159,  153,  211,  211,  211,  211,  211,  211,  133,
      134,  211,  211,  151,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    2,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   24,   24,   25,   25,   26,   27,   28,
       29,   30,   31,    1,   32,   33,   34,   35,   36,   37,
       38,   38,   38,   38,   38,   39,   40,   38,   38,   38,
       38,   38,   41,   38,   42,   38,   38,   43,   38,   38,
       44,   45,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   38,   58,   59,   60,   61,
       62,   63,   38,   64,   65,   66,   67,   68,   69,   70,
       71,   38,   72,   73,   74,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    1,    4,    2,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    1,    2,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    2
    } ;

static yyconst flex_uint16_t yy_base[743] =
    {   0,
        0,    0,   69,   70,  501,    0,   76, 5467,   77,  497,
      470,   80, 5467,   73, 5467, 5467,  469,  455, 5467,  454,
       70,   83,  127,   86, 5467, 5467,   57,  451,   70, 5467,
      112, 5467,  112, 5467,   75,  117,  122,  157,  167,  134,
      139,  177,  187,  120,  197,  207,  217,  227,  237,  247,
     5467,   58, 5467, 5467,  314,  126,    0,  132,  174, 5467,
     5467,  219,  249,    0,  426,  126,  105,  400,  434, 5467,
     5467, 5467, 5467,  371,  449,  415, 5467,  412,  292,  329,
        0,  453,    0,    0,  429, 5467, 5467, 5467,  428,  310,
     5467,  452, 5467,  425,  311,  344,  358,  385,  399,  455,

      465,  475,  485,  495,  505,  515,  527,  528,  545,  544,
      557,  558,  574,  575,  591,  592,  604,  614,  624,  634,
      644,  654,  664,  674,  684,  694,  704,  714,  724,  734,
      744,  754,  764, 5467,  421,  831,  439,    0,  414,  110,
      413,  393,  369,  144,  150,  357,  365,  143,  365,  111,
      365,  365, 5467,  849, 5467,  376,  355,  390,  196,  357,
      213,  346,  865, 5467,  361,  330,    0,  201, 5467, 5467,
     5467,  839,  855,  867,  868,  880,  881,  893,  894,  907,
      917,  927,  937,  951,  961,  971,  981,  991, 1001, 1011,
     1021, 1031, 1041, 1051, 1064, 1065, 1078, 1090, 1091, 1103,

     1115, 1077, 1127, 1137, 1149, 1159, 1169, 1179, 1189, 1199,
     1222, 1212, 1232, 1242, 1252, 5467,  374,  350,  323,  160,
      324,  161,  324,  325,  312,  312,  312,  300,  303,  303,
      288,  284,  472, 1302, 5467,  325,  334, 1324, 5467,  299,
      279,  831, 1343, 5467,    0, 1316, 1317, 1330, 1343, 1372,
     1353, 1371, 1384, 1385, 1397, 1407, 1419, 1440, 1439, 1461,
     1460, 1473, 1474, 1490, 1491, 1503, 1516, 1515, 1529, 1541,
     1553, 1563, 1573, 1583, 1593, 1603, 1613, 1623, 1633, 1643,
     1653, 1663, 1673, 1683, 1696, 1695, 1708, 1709, 1721, 1722,
     1734, 1744,  265,  264,  264,  257,  260,  258,  249,  243,

      235,    0,    0,  239,  237,  228,  211,  203, 1309, 1794,
     5467, 1770, 1782, 1783, 1799, 1809, 1819, 1829, 1839, 1849,
     1859, 1869, 1879, 1889, 1901, 1913, 1925, 1935, 1945, 1955,
     1965, 1975, 2018, 1988, 2000, 2001, 2017, 2061, 2067, 2076,
     2071,  407,  448, 2054, 2064, 2074, 2086, 2096, 2106, 2120,
     2130, 2140, 2150, 2160, 2170, 2180, 2190, 2200, 2210,  201,
     5467, 5467,  207,  202,  199,  181,  181,  180,    0,    0,
      178,  176,  177, 2223, 2222, 2235, 2245, 2255, 2267, 2279,
     2322, 2328, 2337, 1338, 1559, 2332, 2352, 2355, 2358, 2361,
     2340, 2350, 2362, 2374, 2384, 2394, 2404, 2414, 2424, 2434,

     2444, 2454, 2464, 2474, 2484, 2494, 2504, 2514, 2524, 2567,
     2537, 2549, 2559, 2569,  162, 5467, 5467,  141,  139,  132,
        0,    0,  107,    0, 2579, 2591, 2592, 2604, 2614, 2624,
     2634, 2644, 2654, 2664, 2674, 2684, 2694, 2704, 2714, 2724,
     2734, 2744, 2754, 2766, 2767, 2785, 2784, 2797, 2810, 2809,
     2822, 2834, 2835, 2878, 2886, 2893, 2896, 2902, 2912, 2917,
     2920, 2895, 2905, 5467, 5467,   92, 5467,    0, 2915, 2925,
     2935, 2945, 2957, 2969, 2970, 2982, 2995, 2994, 3007, 3008,
     3020, 3030, 3073, 3043, 3055, 3056, 3069, 3079, 3092, 3091,
     3104, 3123, 3133, 3143, 3153, 3166, 3148, 3209, 3215, 5467,

     3218, 3224, 3233, 3239, 3242, 3165, 3221, 3238, 3250, 3251,
     3267, 3279, 3280, 3293, 3292, 3305, 3317, 3334, 3348, 3347,
     3360, 3373, 3372, 3385, 3386, 3398, 3408, 3421, 3422, 3434,
     3444, 3456, 3457, 3469, 3479, 3489, 3501, 3502, 3518, 3519,
     3535, 3536, 3548, 3549, 3562, 3586, 3572, 3596, 3609, 3608,
     3622, 3632, 3642, 3652, 3662, 3672, 3682, 3692, 3702, 3714,
     3715, 3731, 3741, 3755, 3754, 3767, 3780, 3779, 3796, 3797,
     3809, 3810, 3822, 3823, 3835, 3836, 3848, 3858, 3868, 3878,
     3888, 3898, 3908, 3918, 3928, 3938, 3948, 3961, 3960, 3973,
     3983, 3993, 4003, 4013, 4023, 4033, 4043, 4053, 4063, 4073,

     4083, 4093, 4103, 4113, 4123, 4133, 4143, 4153, 4163, 4173,
     4183, 4193, 4205, 4206, 4222, 4223, 4239, 4251, 4261, 4271,
     4284, 4285, 4297, 4307, 4317, 4327, 4337, 4347, 4357, 4367,
     4377, 4390, 4389, 4406, 4407, 4419, 4429, 4439, 4449, 4459,
     4469, 4479, 4489, 4499, 4509, 4519, 4529, 4539, 4549, 4559,
     4569, 4579, 4589, 4599, 4609, 4619, 4629, 4639, 4649, 4659,
     4669, 4679, 4689, 4699, 4709, 4719, 4729, 4739, 4749, 4759,
     4769, 4779, 4789, 4799, 4809, 4819, 4831, 4832, 4849, 4861,
     4862, 4874, 4875, 4887, 4897, 4907, 4917, 4927, 4937, 4947,
     4957, 4967, 4977, 4987, 4997, 5007, 5017, 5027, 5037, 5047,

     5057, 5067, 5077, 5087, 5097, 5107, 5117, 5127, 5137, 5147,
     5157, 5167, 5177, 5187, 5197, 5207, 5217, 5229, 5241, 5251,
     5261, 5271, 5281, 5291, 5301, 5311, 5321, 5331, 5344, 5345,
     5357, 5358, 5370, 5380, 5467,  126,  113, 5448, 5452, 5456,
     5460, 5462
    } ;

static yyconst flex_int16_t yy_def[743] =
    {   0,
      735,    1,    1,    1,  735,  736,  735,  735,  736,  735,
      735,  736,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  736,  736,  735,  735,  735,  735,  735,  735,
      737,  735,  736,  735,  735,  737,  737,  737,  737,  737,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
      735,  735,  735,  735,  738,  739,  736,  735,  736,  735,
      735,  735,  736,  736,  736,  736,  736,  736,  735,  735,
      735,  735,  735,  735,  740,  741,  735,  735,   23,  736,
      736,  736,   24,  736,  735,  735,  735,  735,  735,   39,
      735,  735,  735,  735,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,  735,  735,  738,  742,  136,  739,  739,
      739,  739,  735,  735,  735,  735,  736,  736,  736,  736,
      736,  736,  735,  735,  735,  735,  735,  740,  740,  741,
      741,   78,  735,  735,  735,  735,  736,   82,  735,  735,
      735,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,  735,  742,  739,  735,  735,
      735,  735,  735,  735,  736,  736,  736,  736,  736,  736,
      736,  736,  735,  735,  735,  740,  735,  735,  735,  735,
      735,  735,  735,  735,  736,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,  735,  735,  735,  735,  735,  735,  735,  735,

      736,  736,  736,  736,  736,  736,  736,  736,  735,  735,
      735,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,  333,  333,  333,
      333,  333,  333,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,  735,
      735,  735,  735,  735,  735,  735,  735,  736,  736,  736,
      736,  736,  736,   39,   39,   39,   39,   39,   39,   39,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,  333,
       39,   39,   39,   39,  735,  735,  735,  735,  735,  735,
      736,  736,  736,  736,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,  333,  333,  333,  333,  333,  333,  333,
      333,   39,   39,  735,  735,  735,  735,  736,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,  333,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,  333,  333,  333,  735,

      333,  333,  333,  333,  333,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,    0,  735,  735,  735,  735,  735,
      735,  735
    } ;

static yyconst flex_uint16_t yy_nxt[5543] =
    {   0,
        6,    7,    8,    9,   10,   11,    6,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   24,   24,   24,   25,   26,   27,   28,   29,
       30,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   32,   33,   34,   35,   31,   36,   37,
       38,   39,   40,   41,   31,   31,   42,   31,   31,   43,
       44,   31,   45,   46,   47,   31,   48,   49,   50,   31,
       31,   51,   52,   53,   54,   55,   55,   58,   58,   58,
       59,   62,   69,   63,   85,   86,  134,   64,   74,   74,
       74,   74,   74,   74,   74,   75,   56,   56,   88,   89,

       76,   70,   78,   93,   83,   83,   83,   83,   83,   83,
       83,   77,   57,   90,   91,   57,   92,   57,   57,   57,
       57,   94,   57,   57,   57,   57,   57,   84,   57,   57,
      135,   65,   66,   58,   57,   58,   67,   57,  218,  142,
       57,   57,   68,   78,  500,   79,   79,   79,   79,   79,
       79,   80,   84,  140,  141,  142,   57,   57,  150,  468,
       57,   57,  229,   57,   57,  151,   57,   57,   81,   82,
       57,  230,   90,   57,   57,   58,   90,   59,   57,   90,
      467,  118,   95,   96,  148,   97,  149,   90,   98,   99,
      466,   90,  108,   81,  465,   90,   82,  109,   90,  226,

      110,   57,  220,  222,  221,  100,   90,  227,  159,  101,
      223,   57,  297,  236,  464,  160,  294,  237,  102,  103,
       62,  298,   62,  104,  295,  424,  105,  423,  106,   90,
      111,  422,  421,  112,  107,  117,  113,  114,   90,   90,
      420,  115,  245,   90,  116,  119,   90,  419,   90,   90,
       62,  418,   63,   90,   90,  417,   90,  161,   90,  120,
      416,  415,  373,   90,   90,  121,   90,  245,   90,   90,
      143,  144,  122,   90,   90,  145,  123,  372,   90,   90,
      371,  146,  124,  126,   90,  125,   90,  127,   90,  130,
      370,  128,  369,   90,  129,  368,   90,  367,  131,   90,

       65,   66,  132,   90,   90,   67,   90,  366,   90,  365,
      133,   68,  364,  363,   90,  137,  362,  361,  137,  137,
      138,  360,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  311,  167,   57,  311,  160,  159,  308,  137,
      137,  137,  137,  137,  137,   78,  307,   80,   80,   80,
       80,   80,   80,   80,  306,  305,  304,  137,  167,  137,
      137,   57,   90,   90,  303,  302,   90,   90,  301,   90,
       90,   90,  172,  300,  299,  296,  293,   90,   90,  142,
      217,  238,  239,  244,  240,  137,  137,  137,  137,   74,
       74,   74,   74,   74,   74,   74,   90,  244,  238,  239,

       90,  161,  159,   90,  241,  173,  154,  155,  235,  156,
      174,   90,  235,  232,   90,  231,  228,   90,  225,   90,
      224,  219,  142,  154,  155,   90,   90,   90,   90,  157,
      162,  162,  162,  162,  162,  162,  162,   90,  175,   90,
       90,   90,  142,  142,   90,  217,   90,  163,  164,  216,
      165,  176,   90,  171,   91,   90,  170,  169,   90,  161,
       90,  159,  153,  152,  163,  164,   90,   90,   90,   90,
      166,  168,  168,  168,  168,  168,  168,  168,  147,   87,
       90,   90,   73,   72,  168,  168,  168,  168,  168,  168,
      234,  234,  234,  234,  234,  234,  234,   71,   61,   60,

      735,  168,  168,  168,  168,  168,  168,   90,  402,  735,
      735,   90,  735,  735,   90,  735,   90,   90,  735,  177,
      735,   90,   90,  735,   90,  178,   90,   90,  735,  735,
      179,   90,   90,  735,   90,  180,   90,   90,  181,  735,
      735,   90,   90,  735,   90,  735,   90,   90,  735,  735,
      735,   90,   90,  183,   90,  735,   90,   90,  735,  182,
      735,   90,   90,  735,   90,  735,   90,   90,  735,  735,
      735,   90,   90,  735,   90,  735,   90,  735,  735,  185,
       90,  184,   90,   90,   90,  735,   90,   90,   90,   90,
      735,  735,  186,  187,   90,   90,   90,   90,  735,  735,

       90,   90,  735,   90,   90,   90,  188,  189,  735,   90,
       90,   90,   90,   90,   90,  735,   90,  190,   90,   90,
      735,  735,  191,  735,   90,   90,   90,   90,  735,  735,
       90,   90,  735,   90,   90,   90,   90,  735,  735,  193,
      192,   90,   90,   90,  194,  735,  735,   90,   90,  735,
       90,   90,   90,   90,  735,  735,   90,  735,   90,   90,
       90,  735,  735,   90,  735,   90,   90,  735,  735,  195,
       90,   90,  735,   90,  196,   90,   90,  735,  735,  735,
       90,   90,  198,   90,  735,   90,   90,  735,  735,  197,
       90,   90,  735,   90,  735,   90,   90,  735,  199,  200,

       90,   90,  202,  201,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,  203,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  204,  735,  735,
      205,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,  206,  207,   90,   90,  735,  735,  735,
      208,   90,  209,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,  210,  735,  735,  735,
       90,   90,  735,   90,  211,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,

      212,   90,  213,   90,  735,   90,   90,  735,  735,  735,
      214,   90,  735,   90,  735,   90,   90,  735,  735,  735,
      215,   90,  735,   90,  735,   90,  735,  735,  735,  735,
      735,   90,  137,  735,  735,  137,  137,  138,  735,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  243,
      243,  243,  243,  243,  243,  243,  137,  137,  137,  137,
      137,  137,  233,  735,  233,  735,  735,  234,  234,  234,
      234,  234,  234,  234,  137,  735,  137,  137,  242,  735,
      242,  735,  735,  243,  243,  243,  243,  243,  243,  243,
      735,   90,  735,  735,  735,   90,  735,  735,  246,  735,

       90,  735,  137,  137,  137,  137,   90,   90,  735,  735,
      735,   90,  735,  247,   90,  248,   90,  735,  735,   90,
       90,  249,   90,   90,   90,  735,   90,   90,   90,   90,
      250,  735,   90,  251,   90,   90,   90,   90,  735,   90,
       90,   90,   90,  735,  735,   90,  253,   90,   90,   90,
       90,  735,   90,   90,   90,   90,  735,  735,  252,   90,
       90,   90,  735,   90,  735,  256,   90,  735,   90,   90,
      735,  254,  255,   90,   90,  735,   90,  257,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,  735,

      259,  735,  258,   90,   90,  735,  735,   90,  735,  735,
       90,  260,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,  261,  735,  735,  735,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  263,
       90,  735,   90,   90,  735,  735,  262,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  264,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,   90,  735,  265,  735,   90,   90,  735,
       90,  735,   90,   90,  268,  269,  270,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,

      266,  267,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,  735,  735,  735,   90,   90,   90,  735,
       90,   90,  735,   90,   90,   90,   90,  271,  272,   90,
       90,   90,   90,   90,   90,  735,   90,   90,   90,   90,
      277,  273,   90,   90,   90,   90,   90,   90,  735,   90,
       90,   90,   90,  735,  735,   90,  274,   90,   90,   90,
      735,  735,   90,  735,   90,  735,  735,   90,  735,  275,
       90,   90,  735,  735,   90,  735,   90,  276,  735,   90,
      735,  735,   90,   90,  735,  735,   90,  735,  278,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,  735,

      735,   90,  735,  279,   90,   90,  735,  281,   90,  735,
       90,   90,  735,  735,  280,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  283,  735,  282,   90,   90,  735,   90,  735,
       90,   90,  286,  287,  288,   90,   90,  735,  284,  285,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,  735,  735,  289,   90,  735,   90,  735,   90,  735,
      735,   90,  735,   90,   90,  735,  735,  735,   90,   90,
      290,   90,  735,   90,   90,  735,  735,  735,   90,   90,
      735,   90,  735,   90,   90,  735,  735,  735,   90,   90,

      291,   90,  735,   90,   90,  735,  735,  735,   90,   90,
      735,   90,  735,   90,  735,  735,  735,  292,  735,   90,
      234,  234,  234,  234,  234,  234,  234,  310,  310,  310,
      310,  310,  310,  310,  735,  735,  735,  309,  155,  309,
      156,  735,  310,  310,  310,  310,  310,  310,  310,  735,
      735,  735,  735,  735,  735,  155,  735,   90,   90,   90,
      157,  243,  243,  243,  243,  243,  243,  243,   90,   90,
       90,   90,  312,   90,  735,   90,   90,   90,   90,  164,
      735,  165,   90,   90,   90,  735,   90,  313,  735,   90,
      735,   90,  315,  316,  317,  314,  164,   90,  735,   90,

      735,  166,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,  735,  735,  735,  735,  735,
       90,  735,  735,   90,   90,  735,  735,   90,   90,  735,
       90,   90,   90,   90,  318,  735,   90,   90,   90,   90,
       90,   90,  735,   90,   90,   90,   90,  319,  735,   90,
      320,   90,   90,  321,  735,  735,   90,  735,   90,   90,
      324,  325,  326,   90,   90,  735,   90,  323,   90,  735,
      735,   90,  735,  322,   90,   90,  735,  735,   90,  735,
       90,  328,  329,  330,  735,  735,   90,  735,  735,  735,
      735,   90,   90,  735,  735,   90,   90,  327,   90,   90,

       90,   90,  735,  735,  735,  735,   90,   90,  735,  735,
      735,  735,   90,   90,  735,  735,   90,   90,  735,   90,
       90,   90,   90,  735,  735,   90,   90,   90,   90,   90,
       90,  735,   90,   90,   90,   90,  335,  336,  337,  331,
       90,   90,   90,  333,  332,  735,   90,   90,  735,   90,
       90,   90,   90,  735,  735,   90,  735,   90,   90,   90,
      735,  735,   90,  735,   90,  334,  735,   90,   90,  735,
       90,   90,   90,  735,   90,   90,   90,   90,  440,  441,
      442,   90,   90,   90,  338,   90,  735,  735,   90,  735,
       90,  443,  444,   90,  735,  735,   90,   90,  339,  735,

       90,  735,   90,  735,  735,  341,  735,  735,   90,   90,
      340,  735,   90,  735,   90,   90,  735,  735,  342,   90,
       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,  343,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  344,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  345,  735,  735,   90,
       90,  346,   90,  735,   90,  347,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  349,   90,   90,  735,  735,  348,   90,
       90,  735,   90,  350,   90,   90,  735,  735,  735,   90,

       90,  735,   90,  735,   90,   90,  735,  351,  735,   90,
       90,  735,   90,  735,   90,   90,  354,  355,  356,   90,
       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,  352,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,  353,  735,   90,   90,  735,
       90,   90,   90,  735,   90,   90,   90,   90,  735,  735,
       90,   90,   90,   90,   90,   90,  735,   90,   90,   90,
       90,  735,  735,   90,   90,   90,   90,   90,   90,  735,
       90,   90,   90,   90,  735,  735,  358,  357,   90,   90,
       90,  735,  735,   90,  735,   90,  359,  735,  735,  735,

       90,   90,  735,   90,  735,   90,  735,  735,  735,  735,
      735,   90,  310,  310,  310,  310,  310,  310,  310,  735,
      374,  735,   90,  735,  735,  735,   90,  735,  735,   90,
      239,   90,  240,  735,   90,   90,  735,   90,   90,   90,
      735,   90,   90,   90,   90,  735,  375,  239,  735,   90,
       90,   90,  241,  735,  735,   90,  735,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
      376,  377,  735,  735,  735,   90,   90,  735,   90,  735,

       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  378,
       90,   90,  735,  735,  735,   90,   90,  379,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  380,  735,  735,   90,   90,  735,   90,  735,
       90,  735,  735,   90,  735,  735,   90,   90,  381,  735,
       90,  735,   90,  735,  735,   90,  735,  735,   90,   90,
      382,  735,   90,  735,   90,  735,  735,  384,  735,  735,
       90,   90,  383,  735,   90,  735,   90,   90,  735,  735,
      735,   90,   90,  735,   90,  735,   90,   90,  735,  735,

      735,   90,   90,  735,   90,  735,   90,   90,  735,  735,
      735,   90,   90,  735,   90,  735,   90,   90,  735,  735,
      735,   90,   90,  735,   90,  735,   90,  385,  735,  735,
      735,   90,   90,  735,   90,  735,   90,  386,  387,  388,
       90,  735,   90,  735,   90,  735,  391,   90,  735,   90,
      389,  390,   90,   90,  735,   90,   90,   90,  735,   90,
       90,   90,   90,  735,  735,  735,  735,   90,   90,   90,
       90,  735,  735,   90,   90,  735,   90,   90,   90,   90,
       90,  392,  393,  394,   90,   90,   90,  395,  396,  397,
       90,   90,   90,   90,   90,   90,  398,  399,  400,   90,

       90,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      403,  735,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  404,   90,  405,  735,  735,  735,
       90,   90,  735,   90,  401,   90,  735,  406,   90,  735,
      735,   90,   90,  735,  735,   90,  735,   90,   90,  735,
      735,  407,   90,   90,  735,   90,  735,   90,   90,  735,
      735,  735,   90,   90,  735,   90,  735,   90,  735,  735,
      735,  408,   90,   90,  735,  409,   90,  735,  735,   90,
      735,   90,  410,  735,  735,  735,   90,   90,  735,   90,
      735,   90,   90,  735,  735,  735,   90,   90,  735,   90,

      735,   90,   90,  411,  735,  735,   90,   90,  412,   90,
      735,   90,   90,  735,  735,  735,   90,   90,  735,   90,
      735,   90,   90,  735,  735,  735,   90,   90,  735,   90,
      735,   90,   90,  735,  735,  735,   90,   90,  735,   90,
      735,   90,   90,  735,  735,  735,  413,   90,  735,   90,
      735,   90,   90,  735,  735,  735,   90,   90,  735,   90,
      735,   90,   90,  735,  735,  735,   90,   90,  735,   90,
      425,  414,  735,  735,   90,   90,  735,   90,   90,   90,
      735,   90,   90,   90,   90,  735,  735,   90,  735,   90,
       90,  426,  735,  735,   90,  735,   90,   90,  735,  735,

      735,   90,   90,  735,   90,  427,   90,   90,  735,  735,
      735,   90,   90,  735,   90,  735,   90,  735,  735,   90,
      735,  428,   90,   90,  735,  735,   90,  735,   90,  735,
      430,   90,  429,  735,   90,   90,  735,  735,   90,  735,
       90,   90,  431,  432,  433,  735,   90,   90,  434,  435,
      436,   90,   90,   90,   90,   90,   90,  437,  438,  439,
       90,   90,  735,  735,   90,   90,  445,  735,  735,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,  735,   90,   90,  446,   90,   90,  447,
       90,   90,  450,   90,   90,  735,   90,  735,  735,   90,

      735,   90,   90,  735,  735,  735,   90,   90,  735,   90,
      735,   90,  735,  735,   90,  735,  735,   90,   90,  735,
      735,   90,  735,   90,  448,  735,   90,  449,  735,   90,
       90,  735,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,

       90,   90,  735,   90,  735,   90,   90,  735,  451,  735,
       90,   90,  452,   90,  453,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  454,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,  455,  456,  457,   90,
      735,   90,  735,   90,  735,  735,  460,  735,   90,  458,

      459,  461,  735,  735,   90,   90,  735,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  462,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  463,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,  735,  470,   90,   90,  469,   90,   90,   90,  735,
       90,   90,   90,   90,  735,  735,  472,  471,   90,   90,
       90,  735,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,

       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  473,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  474,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  475,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,   90,  735,  478,  735,

       90,   90,  735,   90,  735,   90,   90,  735,  735,  735,
       90,   90,  735,   90,  735,   90,  479,  735,   90,   90,
      476,   90,   90,   90,  480,   90,   90,   90,   90,  735,
      735,  735,  477,   90,   90,  735,   90,   90,  735,  735,
       90,   90,  735,   90,   90,   90,   90,  735,  735,   90,
      481,   90,   90,   90,  735,  735,   90,  735,   90,  482,
      735,   90,   90,  735,   90,   90,   90,  735,   90,   90,
       90,   90,  483,  735,   90,  735,   90,   90,   90,  735,
      735,   90,  735,   90,  484,  735,   90,   90,  735,   90,
       90,   90,  735,   90,   90,   90,   90,  487,  488,  489,

      486,   90,   90,  735,  485,   90,   90,   90,  735,  735,
      490,  491,   90,   90,   90,   90,   90,   90,   90,   90,
      492,   90,   90,   90,  735,   90,   90,  493,   90,   90,
      494,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  735,  735,   90,   90,  735,  498,  735,   90,
       90,   90,   90,   90,   90,  735,   90,   90,  735,  735,
      735,   90,   90,  499,   90,  735,   90,   90,  495,  735,
      735,  501,   90,  735,   90,  735,   90,   90,  496,  735,
      735,   90,   90,  497,   90,  735,   90,   90,  502,  735,
      735,   90,   90,  735,   90,  735,   90,   90,  735,  735,

      503,   90,   90,  735,   90,  735,   90,  735,  504,   90,
      735,  735,   90,   90,  735,  735,   90,  735,   90,  735,
      735,   90,   90,  735,   90,   90,   90,  735,   90,   90,
       90,   90,  735,  735,   90,  505,   90,   90,   90,  735,
      735,   90,  735,   90,  506,  735,   90,   90,  509,   90,
       90,   90,  735,   90,   90,   90,   90,  507,  735,   90,
       90,   90,   90,   90,   90,  735,   90,   90,   90,   90,
      508,  735,   90,  510,   90,   90,   90,  735,  735,   90,
      735,   90,  511,  735,  735,  735,   90,   90,  735,   90,
      735,   90,  512,  513,  514,  517,  735,   90,  735,   90,

      735,  735,   90,  518,   90,  515,  516,   90,   90,  735,
       90,   90,   90,  519,   90,   90,   90,   90,  735,  735,
      735,   90,   90,   90,  735,   90,  520,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,  735,  735,   90,   90,  735,   90,   90,   90,  735,
       90,   90,   90,   90,  523,  735,   90,  521,   90,   90,
       90,  735,  735,   90,  524,   90,  735,  528,  529,  530,
      522,   90,  525,  735,  735,   90,  735,  735,  735,   90,
      531,  532,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,

       90,  735,   90,  735,   90,   90,  526,  735,  735,   90,
       90,  735,   90,  735,   90,  527,  735,  539,   90,  735,
       90,   90,   90,  735,   90,   90,   90,   90,   90,   90,
       90,  735,   90,   90,   90,   90,   90,   90,   90,   90,
      735,   90,   90,   90,   90,   90,  735,   90,   90,  735,
       90,   90,   90,   90,   90,  735,   90,   90,   90,   90,
       90,   90,   90,   90,  735,   90,   90,  735,  735,  735,
      735,   90,   90,   90,   90,   90,  735,   90,  534,  537,
       90,  542,   90,  735,  540,  533,  735,  535,   90,  735,
       90,  735,  735,  735,   90,  538,  536,   90,  544,   90,

      735,  541,   90,  543,  735,   90,   90,   90,  735,   90,
       90,   90,   90,  545,  546,  735,  735,   90,   90,   90,
      735,  735,  735,   90,  735,  735,   90,  547,   90,  735,
      735,   90,   90,  735,   90,   90,   90,  735,   90,   90,
       90,   90,  735,  735,   90,   90,   90,   90,   90,   90,
      735,   90,   90,   90,   90,  735,  735,   90,  548,   90,
       90,   90,  735,  735,   90,  551,   90,  550,  735,   90,
      735,  549,   90,   90,  552,  735,   90,  735,   90,  553,
      735,  735,  735,  735,   90,  735,   90,  554,  555,  735,
       90,  735,  735,   90,  735,   90,  735,  735,  735,   90,

       90,   90,  735,   90,   90,  735,   90,   90,   90,   90,
      735,  735,   90,  556,   90,   90,   90,  735,  735,   90,
      735,   90,  557,  735,   90,   90,  560,   90,   90,   90,
      735,   90,   90,   90,   90,  558,  735,   90,   90,   90,
       90,   90,   90,  735,   90,   90,   90,   90,  559,  735,
       90,  561,   90,   90,   90,  563,  564,   90,  735,   90,
      562,  735,  735,  735,   90,   90,  735,   90,  565,   90,
      735,  735,  735,   90,   90,   90,  735,   90,   90,  735,
       90,   90,   90,   90,  735,  735,   90,  735,   90,   90,
       90,  735,  735,   90,  735,   90,   90,  735,  735,  735,

       90,   90,  735,   90,  735,   90,  735,  735,   90,   90,
      566,   90,   90,   90,  735,   90,   90,   90,   90,  735,
      735,   90,  567,   90,   90,   90,  735,  735,   90,  735,
       90,   90,  571,  735,  568,   90,   90,  735,   90,  735,
       90,   90,  569,  735,  735,   90,   90,  735,   90,  573,
       90,  735,  570,   90,  572,  735,   90,   90,   90,  735,
       90,   90,   90,   90,  735,  735,  735,  574,   90,   90,
       90,   90,  735,  735,   90,   90,  735,   90,   90,   90,
       90,  735,  735,  575,  735,   90,   90,   90,   90,  735,
      735,   90,   90,  579,   90,   90,   90,   90,  735,  576,

       90,   90,   90,   90,   90,   90,  735,   90,   90,   90,
       90,  577,  578,  735,   90,   90,   90,  580,   90,  735,
      735,   90,  735,   90,   90,  581,  735,  735,   90,   90,
      735,   90,  735,   90,  735,  735,  735,  735,   90,   90,
      735,  735,   90,  735,  735,   90,  735,   90,   90,  582,
      735,  735,   90,   90,  735,   90,  735,   90,  583,  735,
       90,   90,  735,   90,   90,   90,  735,   90,   90,   90,
       90,  735,  735,  584,   90,   90,   90,  735,   90,  735,
      735,   90,  735,   90,   90,  585,  735,  586,   90,   90,
      735,   90,  588,   90,   90,  735,  735,  735,   90,   90,

      735,   90,  735,   90,   90,  587,  735,  735,   90,   90,
      735,   90,  735,   90,   90,  735,  735,  589,   90,   90,
      735,   90,  735,   90,   90,  590,  735,  735,   90,   90,
      735,   90,  735,   90,  591,  735,  735,  735,   90,   90,
      735,   90,  735,   90,   90,  594,  735,  735,   90,   90,
      735,   90,  735,   90,   90,  592,  735,  735,   90,   90,
      735,   90,  596,   90,  735,  593,   90,  595,  735,   90,
       90,   90,  597,   90,   90,   90,   90,  735,  735,  735,
      735,   90,   90,   90,  735,  735,  598,   90,  735,  735,
       90,  735,   90,   90,  599,  735,  735,   90,   90,  735,

       90,  735,   90,  735,  735,  735,   90,   90,   90,  735,
       90,   90,  735,   90,   90,   90,   90,  735,  735,   90,
      600,   90,   90,   90,  735,  735,   90,  735,   90,  601,
      735,   90,   90,  735,   90,   90,   90,  735,   90,   90,
       90,   90,  735,  735,  602,  603,   90,   90,   90,   90,
      735,  735,   90,   90,  735,   90,   90,   90,   90,  735,
      735,   90,   90,   90,   90,   90,   90,  735,   90,   90,
       90,   90,  604,  605,   90,   90,   90,   90,   90,   90,
      735,   90,   90,   90,   90,  606,  735,   90,   90,   90,
       90,   90,   90,  607,   90,   90,   90,   90,  735,  609,

       90,  735,   90,   90,   90,  608,  735,   90,  735,   90,
       90,  735,  735,  735,   90,   90,  735,   90,  735,   90,
       90,  610,  735,  735,   90,   90,  735,   90,  613,   90,
       90,  611,  735,  735,   90,   90,  735,   90,  735,   90,
       90,  612,  735,  735,   90,   90,  735,   90,  735,   90,
       90,  614,  735,  735,   90,   90,  735,   90,  735,   90,
      615,  735,  735,  735,   90,   90,  735,   90,  735,   90,
       90,  735,  735,  735,  616,   90,  735,   90,  735,   90,
       90,  735,  735,  735,   90,   90,  618,   90,  735,   90,
       90,  617,  620,  735,   90,   90,  735,   90,  735,   90,

       90,  735,  735,  735,   90,   90,  735,   90,  621,   90,
      735,  619,   90,   90,  623,   90,   90,   90,  735,   90,
       90,   90,   90,  624,  735,  622,  735,   90,   90,   90,
      735,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  625,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  626,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  627,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  628,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  629,  735,  735,   90,

       90,  735,   90,  632,   90,   90,  630,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  631,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  633,  735,  735,   90,
       90,  735,   90,  735,   90,  634,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  635,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  636,   90,   90,  637,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  638,  735,  735,   90,

       90,  735,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  639,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  640,   90,  735,   90,   90,  735,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  643,  735,  735,   90,
       90,  735,   90,  735,   90,   90,  641,  735,  735,   90,
       90,  735,   90,  645,   90,  735,  642,   90,  644,  735,
       90,   90,   90,  735,   90,   90,   90,   90,  735,  735,
      735,  735,   90,   90,   90,   90,  735,  735,   90,   90,
      735,   90,   90,   90,   90,  735,  735,  647,  735,   90,
      646,   90,  735,  735,  735,   90,  735,  735,   90,  735,

       90,  735,  648,   90,  735,  735,   90,   90,  735,  649,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,  735,  650,  651,   90,   90,   90,  735,
       90,   90,  735,   90,   90,   90,   90,  735,  652,   90,
      735,   90,   90,   90,  735,  735,   90,  735,   90,   90,
      653,  735,  654,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  655,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  656,   90,   90,

      657,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      658,  661,  735,   90,   90,  735,   90,  735,   90,   90,
      659,  735,  735,   90,   90,  735,   90,  663,   90,  735,
      660,  662,   90,  735,   90,   90,   90,  735,   90,   90,
       90,   90,  735,  735,  735,  735,   90,   90,   90,   90,
      735,  735,   90,   90,  735,   90,   90,   90,   90,  735,
      735,   90,  735,   90,   90,   90,  735,  664,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  665,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,

       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  668,   90,  666,
       90,   90,  735,  735,  735,   90,   90,  669,   90,  667,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  670,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  671,  735,  735,   90,   90,  735,   90,  735,
       90,  673,  672,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  674,

      675,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  676,
       90,   90,  677,  735,  735,   90,   90,  735,   90,  735,
      678,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  680,   90,  735,
       90,   90,  679,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  681,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  682,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  683,   90,  735,

       90,   90,  735,  735,  735,   90,   90,  684,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  685,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  686,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  687,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  688,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  689,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,

       90,   90,  735,  735,  735,   90,   90,  735,   90,  690,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  691,
       90,   90,  692,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  694,
       90,   90,  693,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  696,
       90,   90,  735,  735,  735,   90,   90,  735,   90,  735,
       90,   90,  735,  735,  735,   90,   90,  695,   90,  697,
       90,  735,  735,   90,   90,  735,   90,   90,   90,  735,
       90,   90,   90,   90,  735,  735,  735,  699,   90,   90,

      698,   90,  735,  735,  735,   90,  735,  735,   90,  735,
       90,  735,  700,   90,   90,  735,   90,   90,   90,  735,
       90,   90,   90,   90,  735,  735,   90,   90,   90,   90,
       90,   90,  701,   90,   90,   90,   90,  735,  735,   90,
      735,   90,   90,   90,  702,  703,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  704,   90,   90,
      705,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      706,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,

      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  707,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  708,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  709,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  710,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  711,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,

      735,  735,  735,   90,   90,  735,   90,  712,  713,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  714,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  715,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  718,   90,  716,   90,   90,
      735,  735,  735,   90,   90,  719,   90,  717,   90,   90,

      735,  735,  735,   90,   90,  735,   90,  720,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  721,   90,  735,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  722,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  723,   90,   90,
      735,  735,  735,   90,   90,  735,   90,  735,   90,  735,
      724,   90,  735,  735,   90,   90,  735,  735,   90,  735,
       90,  735,  725,   90,  735,  735,   90,   90,  735,  735,

       90,  735,   90,   90,  735,  735,  726,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,  727,   90,  735,  735,  735,   90,   90,  729,
       90,  735,  728,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  735,
       90,  735,   90,   90,  735,  735,  735,   90,   90,  730,
       90,  735,   90,  735,  735,  732,   90,   90,   90,  731,

       90,   90,  735,   90,   90,   90,   90,  735,  735,   90,
       90,   90,   90,   90,   90,  735,   90,   90,   90,  733,
      735,  735,   90,  735,   90,   90,   90,  735,  735,   90,
      735,   90,   90,  735,  735,  735,   90,   90,  734,   90,
      735,   90,  735,  735,  735,  735,  735,   90,  136,  136,
      735,  136,  139,  139,  735,  139,  158,  158,  158,  158,
      160,  160,  137,  137,  735,  137,    5,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735
    } ;

static yyconst flex_int16_t yy_chk[5543] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    7,    9,    7,
        9,   12,   14,   12,   27,   27,   52,   12,   21,   21,
       21,   21,   21,   21,   21,   22,    3,    4,   29,   29,

       22,   14,   24,   35,   24,   24,   24,   24,   24,   24,
       24,   22,   31,  737,   33,   31,   33,   36,   31,   31,
       36,   35,   37,   36,   36,   37,  736,   24,   37,   37,
       52,   12,   12,   58,   40,   58,   12,   40,  140,  140,
       40,   40,   12,   23,  466,   23,   23,   23,   23,   23,
       23,   23,   24,   56,   56,   56,   31,   38,   67,  423,
       38,   36,  150,   38,   38,   67,   37,   39,   23,   23,
       39,  150,   44,   39,   39,   59,   44,   59,   40,   44,
      420,   44,   36,   37,   66,   37,   66,   44,   37,   37,
      419,   41,   40,   23,  418,   41,   23,   41,   41,  148,

       41,   38,  144,  145,  144,   38,   41,  148,  159,   38,
      145,   39,  222,  159,  415,  161,  220,  161,   38,   39,
       62,  222,   62,   39,  220,  373,   39,  372,   39,   42,
       42,  371,  368,   42,   39,   43,   42,   42,   42,   43,
      367,   42,  168,   43,   42,   45,   43,  366,   43,   45,
       63,  365,   63,   45,   43,  364,   45,  161,   45,   46,
      363,  360,  308,   46,   45,   47,   46,  168,   46,   47,
       62,   62,   47,   47,   46,   62,   47,  307,   47,   48,
      306,   62,   47,   48,   47,   47,   48,   48,   48,   49,
      305,   48,  304,   49,   48,  301,   49,  300,   49,   50,

       63,   63,   50,   50,   49,   63,   50,  299,   50,  298,
       50,   63,  297,  296,   50,   55,  295,  294,   55,   55,
       55,  293,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  241,   79,   79,  240,  237,  236,  232,   55,
       55,   55,   55,   55,   55,   80,  231,   80,   80,   80,
       80,   80,   80,   80,  230,  229,  228,   55,   79,   55,
       55,   79,   90,   95,  227,  226,   90,   95,  225,   90,
       95,   90,   95,  224,  223,  221,  219,   90,   95,  218,
      217,  162,  162,  166,  162,   55,   55,   55,   55,   74,
       74,   74,   74,   74,   74,   74,   96,  165,  162,  162,

       96,  160,  158,   96,  162,   96,   74,   74,  157,   74,
       97,   96,  156,  152,   97,  151,  149,   97,  147,   97,
      146,  143,  142,   74,   74,   97,  342,  342,  342,   74,
       78,   78,   78,   78,   78,   78,   78,   98,   98,  342,
      342,   98,  141,  139,   98,  137,   98,   78,   78,  135,
       78,   99,   98,   94,   92,   99,   89,   85,   99,   76,
       99,   75,   69,   68,   78,   78,   99,  343,  343,  343,
       78,   82,   82,   82,   82,   82,   82,   82,   65,   28,
      343,  343,   20,   18,   82,   82,   82,   82,   82,   82,
      233,  233,  233,  233,  233,  233,  233,   17,   11,   10,

        5,   82,   82,   82,   82,   82,   82,  100,  343,    0,
        0,  100,    0,    0,  100,    0,  100,  101,    0,  100,
        0,  101,  100,    0,  101,  101,  101,  102,    0,    0,
      102,  102,  101,    0,  102,  102,  102,  103,  103,    0,
        0,  103,  102,    0,  103,    0,  103,  104,    0,    0,
        0,  104,  103,  105,  104,    0,  104,  105,    0,  104,
        0,  105,  104,    0,  105,    0,  105,  106,    0,    0,
        0,  106,  105,    0,  106,    0,  106,    0,    0,  107,
      108,  106,  106,  107,  108,    0,  107,  108,  107,  108,
        0,    0,  108,  109,  107,  108,  110,  109,    0,    0,

      110,  109,    0,  110,  109,  110,  109,  110,    0,  111,
      112,  110,  109,  111,  112,    0,  111,  112,  111,  112,
        0,    0,  113,    0,  111,  112,  113,  114,    0,    0,
      113,  114,    0,  113,  114,  113,  114,    0,    0,  115,
      114,  113,  114,  115,  116,    0,    0,  115,  116,    0,
      115,  116,  115,  116,    0,    0,  117,    0,  115,  116,
      117,    0,    0,  117,    0,  117,  118,    0,    0,  117,
      118,  117,    0,  118,  118,  118,  119,    0,    0,    0,
      119,  118,  120,  119,    0,  119,  120,    0,    0,  119,
      120,  119,    0,  120,    0,  120,  121,    0,  120,  120,

      121,  120,  122,  121,    0,  121,  122,    0,    0,    0,
      122,  121,    0,  122,    0,  122,  123,    0,    0,    0,
      123,  122,    0,  123,    0,  123,  124,    0,    0,    0,
      124,  123,    0,  124,    0,  124,  125,  124,    0,    0,
      125,  124,    0,  125,    0,  125,  126,    0,    0,    0,
      126,  125,    0,  126,  126,  126,  127,    0,    0,    0,
      127,  126,  128,  127,    0,  127,  128,    0,    0,    0,
      128,  127,    0,  128,    0,  128,  129,    0,    0,    0,
      129,  128,    0,  129,  130,  129,  130,    0,    0,    0,
      130,  129,    0,  130,    0,  130,  131,    0,    0,    0,

      131,  130,  131,  131,    0,  131,  132,    0,    0,    0,
      132,  131,    0,  132,    0,  132,  133,    0,    0,    0,
      133,  132,    0,  133,    0,  133,    0,    0,    0,    0,
        0,  133,  136,    0,    0,  136,  136,  136,    0,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  242,
      242,  242,  242,  242,  242,  242,  136,  136,  136,  136,
      136,  136,  154,    0,  154,    0,    0,  154,  154,  154,
      154,  154,  154,  154,  136,    0,  136,  136,  163,    0,
      163,    0,    0,  163,  163,  163,  163,  163,  163,  163,
        0,  172,    0,    0,    0,  172,    0,    0,  172,    0,

      172,    0,  136,  136,  136,  136,  172,  173,    0,    0,
        0,  173,    0,  173,  173,  174,  173,    0,    0,  174,
      175,  175,  173,  174,  175,    0,  174,  175,  174,  175,
      176,    0,  176,  177,  174,  175,  176,  177,    0,  176,
      177,  176,  177,    0,    0,  178,  179,  176,  177,  178,
      179,    0,  178,  179,  178,  179,    0,    0,  178,  180,
      178,  179,    0,  180,    0,  181,  180,    0,  180,  181,
        0,  180,  180,  181,  180,    0,  181,  182,  181,  182,
        0,    0,    0,  182,  181,    0,  182,    0,  182,  183,
        0,    0,    0,  183,  182,    0,  183,    0,  183,    0,

      184,    0,  183,  184,  183,    0,    0,  184,    0,    0,
      184,  185,  184,  185,    0,    0,    0,  185,  184,    0,
      185,    0,  185,  186,    0,    0,    0,  186,  185,    0,
      186,    0,  186,  187,    0,    0,    0,  187,  186,  188,
      187,    0,  187,  188,    0,    0,  187,  188,  187,    0,
      188,    0,  188,  189,    0,    0,    0,  189,  188,  190,
      189,    0,  189,  190,    0,    0,    0,  190,  189,    0,
      190,    0,  190,  191,    0,  191,    0,  191,  190,    0,
      191,    0,  191,  192,  195,  195,  195,  192,  191,    0,
      192,    0,  192,  193,    0,    0,    0,  193,  192,    0,

      193,  194,  193,  194,    0,    0,    0,  194,  193,    0,
      194,    0,  194,    0,    0,    0,  195,  196,  194,    0,
      195,  196,    0,  195,  196,  195,  196,  196,  197,  202,
      197,  195,  196,  202,  197,    0,  202,  197,  202,  197,
      202,  198,  198,  199,  202,  197,  198,  199,    0,  198,
      199,  198,  199,    0,    0,  200,  199,  198,  199,  200,
        0,    0,  200,    0,  200,    0,    0,  201,    0,  200,
      200,  201,    0,    0,  201,    0,  201,  201,    0,  203,
        0,    0,  201,  203,    0,    0,  203,    0,  203,  204,
        0,    0,    0,  204,  203,    0,  204,    0,  204,    0,

        0,  205,    0,  204,  204,  205,    0,  206,  205,    0,
      205,  206,    0,    0,  205,  206,  205,    0,  206,    0,
      206,  207,    0,    0,    0,  207,  206,    0,  207,    0,
      207,  208,  208,    0,  207,  208,  207,    0,  208,    0,
      208,  209,  211,  211,  211,  209,  208,    0,  209,  210,
      209,  210,    0,    0,    0,  210,  209,    0,  210,    0,
      210,    0,    0,  212,  212,    0,  210,    0,  212,    0,
        0,  212,    0,  212,  211,    0,    0,    0,  211,  212,
      213,  211,    0,  211,  213,    0,    0,    0,  213,  211,
        0,  213,    0,  213,  214,    0,    0,    0,  214,  213,

      214,  214,    0,  214,  215,    0,    0,    0,  215,  214,
        0,  215,    0,  215,    0,    0,    0,  215,    0,  215,
      234,  234,  234,  234,  234,  234,  234,  309,  309,  309,
      309,  309,  309,  309,    0,    0,    0,  238,  234,  238,
      234,    0,  238,  238,  238,  238,  238,  238,  238,    0,
        0,    0,    0,    0,    0,  234,    0,  384,  384,  384,
      234,  243,  243,  243,  243,  243,  243,  243,  246,  247,
      384,  384,  246,  247,    0,  246,  247,  246,  247,  243,
        0,  243,  248,  246,  247,    0,  248,  248,    0,  248,
        0,  248,  250,  250,  250,  249,  243,  248,    0,  249,

        0,  243,  249,    0,  249,  251,    0,    0,    0,  251,
      249,    0,  251,    0,  251,    0,    0,    0,    0,    0,
      251,    0,    0,  252,  250,    0,    0,  252,  250,    0,
      252,  250,  252,  250,  252,    0,  253,  254,  252,  250,
      253,  254,    0,  253,  254,  253,  254,  253,    0,  255,
      254,  253,  254,  255,    0,    0,  255,    0,  255,  256,
      258,  258,  258,  256,  255,    0,  256,  257,  256,    0,
        0,  257,    0,  256,  256,  257,    0,    0,  257,    0,
      257,  260,  260,  260,    0,    0,  257,    0,    0,    0,
        0,  259,  258,    0,    0,  259,  258,  259,  259,  258,

      259,  258,    0,    0,    0,    0,  259,  258,    0,    0,
        0,    0,  261,  260,    0,    0,  261,  260,    0,  261,
      260,  261,  260,    0,    0,  262,  263,  261,  260,  262,
      263,    0,  262,  263,  262,  263,  267,  267,  267,  263,
      262,  263,  264,  265,  264,    0,  264,  265,    0,  264,
      265,  264,  265,    0,    0,  266,    0,  264,  265,  266,
        0,    0,  266,    0,  266,  266,    0,  268,  267,    0,
      266,  268,  267,    0,  268,  267,  268,  267,  385,  385,
      385,  269,  268,  267,  268,  269,    0,    0,  269,    0,
      269,  385,  385,  270,    0,    0,  269,  270,  269,    0,

      270,    0,  270,    0,    0,  271,    0,    0,  270,  271,
      270,    0,  271,    0,  271,  272,    0,    0,  272,  272,
      271,    0,  272,    0,  272,  273,    0,    0,    0,  273,
      272,    0,  273,    0,  273,  274,    0,    0,    0,  274,
      273,    0,  274,    0,  274,  275,  274,    0,    0,  275,
      274,    0,  275,    0,  275,  276,  275,    0,    0,  276,
      275,  276,  276,    0,  276,  277,    0,    0,    0,  277,
      276,    0,  277,    0,  277,  278,    0,    0,    0,  278,
      277,    0,  278,  279,  278,  279,    0,    0,  278,  279,
      278,    0,  279,  280,  279,  280,    0,    0,    0,  280,

      279,    0,  280,    0,  280,  281,    0,  281,    0,  281,
      280,    0,  281,    0,  281,  282,  285,  285,  285,  282,
      281,    0,  282,    0,  282,  283,    0,    0,    0,  283,
      282,    0,  283,    0,  283,  284,    0,    0,    0,  284,
      283,    0,  284,    0,  284,  284,    0,  286,  285,    0,
      284,  286,  285,    0,  286,  285,  286,  285,    0,    0,
      287,  288,  286,  285,  287,  288,    0,  287,  288,  287,
      288,    0,    0,  289,  290,  287,  288,  289,  290,    0,
      289,  290,  289,  290,    0,    0,  291,  290,  289,  290,
      291,    0,    0,  291,    0,  291,  292,    0,    0,    0,

      292,  291,    0,  292,    0,  292,    0,    0,    0,    0,
        0,  292,  310,  310,  310,  310,  310,  310,  310,    0,
      312,    0,  312,    0,    0,    0,  312,    0,    0,  312,
      310,  312,  310,    0,  313,  314,    0,  312,  313,  314,
        0,  313,  314,  313,  314,    0,  314,  310,    0,  313,
      314,  315,  310,    0,    0,  315,    0,    0,  315,    0,
      315,  316,    0,    0,    0,  316,  315,    0,  316,    0,
      316,  317,    0,    0,    0,  317,  316,    0,  317,    0,
      317,  318,    0,    0,    0,  318,  317,    0,  318,    0,
      318,  319,    0,    0,    0,  319,  318,    0,  319,    0,

      319,  320,    0,    0,    0,  320,  319,    0,  320,    0,
      320,  321,    0,    0,    0,  321,  320,    0,  321,  321,
      321,  322,    0,    0,    0,  322,  321,  322,  322,    0,
      322,  323,    0,    0,    0,  323,  322,    0,  323,    0,
      323,  324,  323,    0,    0,  324,  323,    0,  324,    0,
      324,    0,    0,  325,    0,    0,  324,  325,  324,    0,
      325,    0,  325,    0,    0,  326,    0,    0,  325,  326,
      325,    0,  326,    0,  326,    0,    0,  327,    0,    0,
      326,  327,  326,    0,  327,    0,  327,  328,    0,    0,
        0,  328,  327,    0,  328,    0,  328,  329,    0,    0,

        0,  329,  328,    0,  329,    0,  329,  330,    0,    0,
        0,  330,  329,    0,  330,    0,  330,  331,    0,    0,
        0,  331,  330,    0,  331,    0,  331,  332,    0,    0,
        0,  332,  331,    0,  332,    0,  332,  333,  333,  333,
      334,    0,  332,    0,  334,    0,  334,  334,    0,  334,
      333,  333,  335,  336,    0,  334,  335,  336,    0,  335,
      336,  335,  336,    0,    0,    0,    0,  335,  336,  337,
      333,    0,    0,  337,  333,    0,  337,  333,  337,  333,
      338,  338,  338,  338,  337,  333,  339,  339,  339,  339,
      341,  341,  341,  338,  338,  340,  340,  340,  340,  339,

      339,    0,    0,  341,  341,    0,  344,    0,  340,  340,
      344,    0,    0,  344,    0,  344,  345,    0,    0,    0,
      345,  344,    0,  345,  345,  345,  346,    0,    0,    0,
      346,  345,    0,  346,  341,  346,    0,  347,  347,    0,
        0,  346,  347,    0,    0,  347,    0,  347,  348,    0,
        0,  348,  348,  347,    0,  348,    0,  348,  349,    0,
        0,    0,  349,  348,    0,  349,    0,  349,    0,    0,
        0,  349,  350,  349,    0,  350,  350,    0,    0,  350,
        0,  350,  351,    0,    0,    0,  351,  350,    0,  351,
        0,  351,  352,    0,    0,    0,  352,  351,    0,  352,

        0,  352,  353,  352,    0,    0,  353,  352,  353,  353,
        0,  353,  354,    0,    0,    0,  354,  353,    0,  354,
        0,  354,  355,    0,    0,    0,  355,  354,    0,  355,
        0,  355,  356,    0,    0,    0,  356,  355,    0,  356,
        0,  356,  357,    0,    0,    0,  357,  356,    0,  357,
        0,  357,  358,    0,    0,    0,  358,  357,    0,  358,
        0,  358,  359,    0,    0,    0,  359,  358,    0,  359,
      374,  359,    0,    0,  375,  374,    0,  359,  375,  374,
        0,  375,  374,  375,  374,    0,    0,  376,    0,  375,
      374,  376,    0,    0,  376,    0,  376,  377,    0,    0,

        0,  377,  376,    0,  377,  377,  377,  378,    0,    0,
        0,  378,  377,    0,  378,    0,  378,    0,    0,  379,
        0,  378,  378,  379,    0,    0,  379,    0,  379,    0,
      380,  380,  379,    0,  379,  380,    0,    0,  380,    0,
      380,  381,  381,  381,  381,    0,  380,  382,  382,  382,
      382,  386,  386,  386,  381,  381,  383,  383,  383,  383,
      382,  382,    0,    0,  386,  386,  386,    0,    0,  383,
      383,  387,  387,  387,  388,  388,  388,  389,  389,  389,
      390,  390,  390,    0,  387,  387,  387,  388,  388,  388,
      389,  389,  391,  390,  390,    0,  391,    0,    0,  391,

        0,  391,  392,    0,    0,    0,  392,  391,    0,  392,
        0,  392,    0,    0,  393,    0,    0,  392,  393,    0,
        0,  393,    0,  393,  389,    0,  394,  390,    0,  393,
      394,    0,    0,  394,    0,  394,  395,    0,    0,    0,
      395,  394,    0,  395,    0,  395,  396,    0,    0,    0,
      396,  395,    0,  396,    0,  396,  397,    0,    0,    0,
      397,  396,    0,  397,    0,  397,  398,    0,    0,    0,
      398,  397,    0,  398,    0,  398,  399,    0,    0,    0,
      399,  398,    0,  399,    0,  399,  400,    0,    0,    0,
      400,  399,    0,  400,    0,  400,  401,    0,    0,    0,

      401,  400,    0,  401,    0,  401,  402,    0,  401,    0,
      402,  401,  402,  402,  403,  402,  403,    0,    0,    0,
      403,  402,    0,  403,    0,  403,  404,    0,    0,    0,
      404,  403,    0,  404,    0,  404,  405,    0,    0,    0,
      405,  404,    0,  405,    0,  405,  406,  405,    0,    0,
      406,  405,    0,  406,    0,  406,  407,    0,    0,    0,
      407,  406,    0,  407,    0,  407,  408,    0,    0,    0,
      408,  407,    0,  408,    0,  408,  409,    0,    0,    0,
      409,  408,    0,  409,    0,  409,  410,  410,  410,  411,
        0,  409,    0,  411,    0,    0,  411,    0,  411,  410,

      410,  412,    0,    0,  411,  412,    0,    0,  412,    0,
      412,  413,    0,    0,    0,  413,  412,  413,  413,    0,
      413,  414,    0,    0,    0,  414,  413,    0,  414,  414,
      414,  425,    0,    0,    0,  425,  414,    0,  425,    0,
      425,    0,  426,  426,  427,  425,  425,  426,  427,    0,
      426,  427,  426,  427,    0,    0,  428,  427,  426,  427,
      428,    0,    0,  428,    0,  428,  429,    0,    0,    0,
      429,  428,    0,  429,    0,  429,  430,    0,    0,    0,
      430,  429,    0,  430,    0,  430,  431,    0,    0,    0,
      431,  430,    0,  431,    0,  431,  432,    0,    0,    0,

      432,  431,    0,  432,    0,  432,  433,    0,    0,    0,
      433,  432,    0,  433,    0,  433,  434,    0,    0,    0,
      434,  433,    0,  434,    0,  434,  435,    0,    0,    0,
      435,  434,    0,  435,    0,  435,  436,    0,    0,    0,
      436,  435,    0,  436,    0,  436,  437,    0,    0,    0,
      437,  436,    0,  437,    0,  437,  438,    0,  440,    0,
      438,  437,    0,  438,    0,  438,  439,    0,  441,    0,
      439,  438,    0,  439,    0,  439,  440,    0,  442,    0,
      440,  439,    0,  440,    0,  440,  441,    0,    0,    0,
      441,  440,    0,  441,    0,  441,  442,    0,  445,    0,

      442,  441,    0,  442,    0,  442,  443,    0,    0,    0,
      443,  442,    0,  443,    0,  443,  446,    0,  444,  445,
      443,  443,  444,  445,  446,  444,  445,  444,  445,    0,
        0,    0,  444,  444,  445,    0,  447,  446,    0,    0,
      447,  446,    0,  447,  446,  447,  446,    0,    0,  448,
      448,  447,  446,  448,    0,    0,  448,    0,  448,  449,
        0,  450,  449,    0,  448,  450,  449,    0,  450,  449,
      450,  449,  450,    0,  451,    0,  450,  449,  451,    0,
        0,  451,    0,  451,  451,    0,  452,  453,    0,  451,
      452,  453,    0,  452,  453,  452,  453,  454,  454,  454,

      453,  452,  453,    0,  452,  455,  455,  455,    0,    0,
      454,  454,  456,  456,  456,  457,  457,  457,  455,  455,
      455,  458,  458,  458,    0,  456,  456,  456,  457,  457,
      457,  459,  459,  459,  458,  458,  460,  460,  460,  461,
      461,  461,    0,    0,  459,  459,    0,  462,    0,  460,
      460,  462,  461,  461,  462,    0,  462,  463,    0,    0,
        0,  463,  462,  463,  463,    0,  463,  469,  458,    0,
        0,  469,  463,    0,  469,    0,  469,  470,  459,    0,
        0,  470,  469,  461,  470,    0,  470,  471,  473,    0,
        0,  471,  470,    0,  471,    0,  471,  472,    0,    0,

      474,  472,  471,    0,  472,    0,  472,    0,  474,  473,
        0,    0,  472,  473,    0,    0,  473,    0,  473,    0,
        0,  474,  475,    0,  473,  474,  475,    0,  474,  475,
      474,  475,    0,    0,  476,  476,  474,  475,  476,    0,
        0,  476,    0,  476,  477,    0,  478,  477,  480,  476,
      478,  477,    0,  478,  477,  478,  477,  478,    0,  479,
      480,  478,  477,  479,  480,    0,  479,  480,  479,  480,
      479,    0,  481,  481,  479,  480,  481,    0,    0,  481,
        0,  481,  482,    0,    0,    0,  482,  481,    0,  482,
        0,  482,  483,  483,  483,  484,    0,  482,    0,  484,

        0,    0,  484,  487,  484,  483,  483,  485,  486,    0,
      484,  485,  486,  488,  485,  486,  485,  486,    0,    0,
        0,  487,  485,  486,    0,  487,  489,    0,  487,    0,
      487,  488,    0,    0,    0,  488,  487,    0,  488,    0,
      488,    0,    0,  490,  489,    0,  488,  490,  489,    0,
      490,  489,  490,  489,  492,    0,  491,  490,  490,  489,
      491,    0,    0,  491,  493,  491,    0,  497,  497,  497,
      491,  491,  493,    0,    0,  492,    0,    0,    0,  492,
      497,  497,  492,    0,  492,  493,    0,    0,    0,  493,
      492,    0,  493,    0,  493,  494,    0,    0,    0,  494,

      493,    0,  494,    0,  494,  495,  495,    0,    0,  495,
      494,    0,  495,    0,  495,  496,    0,  506,  496,    0,
      495,  506,  496,    0,  506,  496,  506,  496,  498,  498,
      498,    0,  506,  496,  499,  499,  499,  501,  501,  501,
        0,  498,  498,  502,  502,  502,    0,  499,  499,    0,
      501,  501,  503,  503,  503,    0,  502,  502,  504,  504,
      504,  505,  505,  505,    0,  503,  503,    0,    0,    0,
        0,  504,  504,  507,  505,  505,    0,  507,  501,  504,
      507,  509,  507,    0,  507,  499,    0,  502,  507,    0,
      508,    0,    0,    0,  508,  505,  503,  508,  511,  508,

        0,  508,  509,  510,    0,  508,  509,  510,    0,  509,
      510,  509,  510,  512,  513,    0,    0,  509,  510,  511,
        0,    0,    0,  511,    0,    0,  511,  514,  511,    0,
        0,  512,  513,    0,  511,  512,  513,    0,  512,  513,
      512,  513,    0,    0,  515,  514,  512,  513,  515,  514,
        0,  515,  514,  515,  514,    0,    0,  516,  515,  515,
      514,  516,    0,    0,  516,  518,  516,  517,    0,  517,
        0,  516,  516,  517,  518,    0,  517,    0,  517,  519,
        0,    0,    0,    0,  517,    0,  518,  519,  519,    0,
      518,    0,    0,  518,    0,  518,    0,    0,    0,  520,

      519,  518,    0,  520,  519,    0,  520,  519,  520,  519,
        0,    0,  521,  521,  520,  519,  521,    0,    0,  521,
        0,  521,  522,    0,  523,  522,  525,  521,  523,  522,
        0,  523,  522,  523,  522,  523,    0,  524,  525,  523,
      522,  524,  525,    0,  524,  525,  524,  525,  524,    0,
      526,  526,  524,  525,  526,  528,  529,  526,    0,  526,
      527,    0,    0,    0,  527,  526,    0,  527,  530,  527,
        0,    0,    0,  528,  529,  527,    0,  528,  529,    0,
      528,  529,  528,  529,    0,    0,  530,    0,  528,  529,
      530,    0,    0,  530,    0,  530,  531,    0,    0,    0,

      531,  530,    0,  531,    0,  531,    0,    0,  532,  533,
      531,  531,  532,  533,    0,  532,  533,  532,  533,    0,
        0,  534,  532,  532,  533,  534,    0,    0,  534,    0,
      534,  535,  537,    0,  534,  535,  534,    0,  535,    0,
      535,  536,  535,    0,    0,  536,  535,    0,  536,  539,
      536,    0,  536,  537,  538,    0,  536,  537,  538,    0,
      537,  538,  537,  538,    0,    0,    0,  540,  537,  538,
      539,  540,    0,    0,  539,  540,    0,  539,  540,  539,
      540,    0,    0,  541,    0,  539,  540,  541,  542,    0,
        0,  541,  542,  545,  541,  542,  541,  542,    0,  542,

      543,  544,  541,  542,  543,  544,    0,  543,  544,  543,
      544,  543,  544,    0,  545,  543,  544,  546,  545,    0,
        0,  545,    0,  545,  547,  546,    0,    0,  547,  545,
        0,  547,    0,  547,    0,    0,    0,    0,  546,  547,
        0,    0,  546,    0,    0,  546,    0,  546,  548,  548,
        0,    0,  548,  546,    0,  548,    0,  548,  549,    0,
      550,  549,    0,  548,  550,  549,    0,  550,  549,  550,
      549,    0,    0,  550,  551,  550,  549,    0,  551,    0,
        0,  551,    0,  551,  552,  551,    0,  552,  552,  551,
        0,  552,  554,  552,  553,    0,    0,    0,  553,  552,

        0,  553,    0,  553,  554,  553,    0,    0,  554,  553,
        0,  554,    0,  554,  555,    0,    0,  555,  555,  554,
        0,  555,    0,  555,  556,  556,    0,    0,  556,  555,
        0,  556,    0,  556,  557,    0,    0,    0,  557,  556,
        0,  557,    0,  557,  558,  560,    0,    0,  558,  557,
        0,  558,    0,  558,  559,  558,    0,    0,  559,  558,
        0,  559,  562,  559,    0,  559,  560,  561,    0,  559,
      560,  561,  563,  560,  561,  560,  561,    0,    0,    0,
        0,  560,  561,  562,    0,    0,  564,  562,    0,    0,
      562,    0,  562,  563,  564,    0,    0,  563,  562,    0,

      563,    0,  563,    0,    0,    0,  565,  564,  563,    0,
      565,  564,    0,  565,  564,  565,  564,    0,    0,  566,
      566,  565,  564,  566,    0,    0,  566,    0,  566,  567,
        0,  568,  567,    0,  566,  568,  567,    0,  568,  567,
      568,  567,    0,    0,  569,  570,  568,  567,  569,  570,
        0,    0,  569,  570,    0,  569,  570,  569,  570,    0,
        0,  571,  572,  569,  570,  571,  572,    0,  571,  572,
      571,  572,  571,  572,  573,  574,  571,  572,  573,  574,
        0,  573,  574,  573,  574,  573,    0,  575,  576,  573,
      574,  575,  576,  574,  575,  576,  575,  576,    0,  576,

      577,    0,  575,  576,  577,  575,    0,  577,    0,  577,
      578,    0,    0,    0,  578,  577,    0,  578,    0,  578,
      579,  578,    0,    0,  579,  578,    0,  579,  581,  579,
      580,  579,    0,    0,  580,  579,    0,  580,    0,  580,
      581,  580,    0,    0,  581,  580,    0,  581,    0,  581,
      582,  582,    0,    0,  582,  581,    0,  582,    0,  582,
      583,    0,    0,    0,  583,  582,    0,  583,    0,  583,
      584,    0,    0,    0,  584,  583,    0,  584,    0,  584,
      585,    0,    0,    0,  585,  584,  586,  585,    0,  585,
      586,  585,  588,    0,  586,  585,    0,  586,    0,  586,

      587,    0,    0,    0,  587,  586,    0,  587,  589,  587,
        0,  587,  589,  588,  591,  587,  589,  588,    0,  589,
      588,  589,  588,  591,    0,  590,    0,  589,  588,  590,
        0,    0,  590,    0,  590,  591,    0,    0,    0,  591,
      590,  592,  591,    0,  591,  592,    0,    0,    0,  592,
      591,  593,  592,    0,  592,  593,    0,    0,    0,  593,
      592,    0,  593,    0,  593,  594,    0,    0,    0,  594,
      593,    0,  594,    0,  594,  595,  594,    0,    0,  595,
      594,    0,  595,    0,  595,  596,  595,    0,    0,  596,
      595,    0,  596,    0,  596,  597,  596,    0,    0,  597,

      596,    0,  597,  599,  597,  598,  597,    0,    0,  598,
      597,    0,  598,    0,  598,  599,  598,    0,    0,  599,
      598,    0,  599,    0,  599,  600,  600,    0,    0,  600,
      599,    0,  600,    0,  600,  601,    0,    0,    0,  601,
      600,    0,  601,    0,  601,  602,    0,    0,    0,  602,
      601,    0,  602,    0,  602,  603,    0,    0,    0,  603,
      602,    0,  603,  602,  603,  604,    0,    0,    0,  604,
      603,    0,  604,  603,  604,  605,  604,    0,    0,  605,
      604,    0,  605,    0,  605,  606,    0,    0,    0,  606,
      605,    0,  606,    0,  606,  607,  606,    0,    0,  607,

      606,    0,  607,    0,  607,  608,    0,    0,    0,  608,
      607,  609,  608,    0,  608,  609,    0,    0,    0,  609,
      608,  610,  609,    0,  609,  610,    0,    0,    0,  610,
      609,    0,  610,    0,  610,  611,  613,    0,    0,  611,
      610,    0,  611,    0,  611,  612,  611,    0,    0,  612,
      611,    0,  612,  615,  612,    0,  612,  613,  614,    0,
      612,  613,  614,    0,  613,  614,  613,  614,    0,    0,
        0,    0,  613,  614,  615,  616,    0,    0,  615,  616,
        0,  615,  616,  615,  616,    0,    0,  617,    0,  615,
      616,  617,    0,    0,    0,  617,    0,    0,  617,    0,

      617,    0,  618,  618,    0,    0,  617,  618,    0,  619,
      618,    0,  618,  619,    0,    0,    0,  619,  618,    0,
      619,    0,  619,  620,    0,    0,    0,  620,  619,    0,
      620,    0,  620,    0,  620,  621,  621,  622,  620,    0,
      621,  622,    0,  621,  622,  621,  622,    0,  622,  623,
        0,  621,  622,  623,    0,    0,  623,    0,  623,  624,
      623,    0,  624,  624,  623,    0,  624,    0,  624,  625,
        0,    0,    0,  625,  624,    0,  625,    0,  625,  626,
        0,    0,    0,  626,  625,    0,  626,  625,  626,  627,
        0,    0,    0,  627,  626,    0,  627,  626,  627,  628,

      627,    0,    0,  628,  627,    0,  628,    0,  628,  629,
        0,    0,    0,  629,  628,    0,  629,    0,  629,  630,
      629,  632,    0,  630,  629,    0,  630,    0,  630,  631,
      630,    0,    0,  631,  630,    0,  631,  634,  631,    0,
      631,  633,  632,    0,  631,  633,  632,    0,  633,  632,
      633,  632,    0,    0,    0,    0,  633,  632,  634,  635,
        0,    0,  634,  635,    0,  634,  635,  634,  635,    0,
        0,  636,    0,  634,  635,  636,    0,  637,  636,    0,
      636,  637,    0,    0,    0,  637,  636,  638,  637,    0,
      637,  638,    0,    0,    0,  638,  637,    0,  638,    0,

      638,  639,    0,    0,    0,  639,  638,    0,  639,    0,
      639,  640,    0,    0,    0,  640,  639,  641,  640,  639,
      640,  641,    0,    0,    0,  641,  640,  642,  641,  640,
      641,  642,    0,    0,    0,  642,  641,    0,  642,    0,
      642,  643,    0,    0,    0,  643,  642,    0,  643,    0,
      643,  644,  643,    0,    0,  644,  643,    0,  644,    0,
      644,  645,  644,    0,    0,  645,  644,    0,  645,    0,
      645,  646,  645,    0,    0,  646,  645,    0,  646,    0,
      646,  647,    0,    0,    0,  647,  646,    0,  647,    0,
      647,  648,    0,    0,    0,  648,  647,    0,  648,  647,

      648,  649,    0,    0,    0,  649,  648,    0,  649,    0,
      649,  650,    0,    0,    0,  650,  649,    0,  650,  649,
      650,  651,  650,    0,    0,  651,  650,    0,  651,    0,
      651,  652,    0,    0,    0,  652,  651,    0,  652,    0,
      652,  653,    0,    0,    0,  653,  652,  654,  653,    0,
      653,  654,  653,    0,    0,  654,  653,    0,  654,    0,
      654,  655,    0,    0,    0,  655,  654,    0,  655,    0,
      655,  656,    0,    0,    0,  656,  655,  657,  656,    0,
      656,  657,    0,    0,    0,  657,  656,  658,  657,    0,
      657,  658,    0,    0,    0,  658,  657,  659,  658,    0,

      658,  659,    0,    0,    0,  659,  658,  660,  659,    0,
      659,  660,    0,    0,    0,  660,  659,    0,  660,    0,
      660,  661,    0,    0,    0,  661,  660,    0,  661,    0,
      661,  662,  661,    0,    0,  662,  661,    0,  662,    0,
      662,  663,  662,    0,    0,  663,  662,    0,  663,    0,
      663,  664,  663,    0,    0,  664,  663,    0,  664,    0,
      664,  665,    0,    0,    0,  665,  664,    0,  665,  664,
      665,  666,    0,    0,    0,  666,  665,    0,  666,  665,
      666,  667,    0,    0,    0,  667,  666,    0,  667,    0,
      667,  668,    0,    0,    0,  668,  667,    0,  668,    0,

      668,  669,    0,    0,    0,  669,  668,    0,  669,  668,
      669,  670,    0,    0,    0,  670,  669,    0,  670,  669,
      670,  671,  670,    0,    0,  671,  670,    0,  671,    0,
      671,  672,    0,    0,    0,  672,  671,    0,  672,  674,
      672,  673,  672,    0,    0,  673,  672,    0,  673,    0,
      673,  674,    0,    0,    0,  674,  673,    0,  674,  676,
      674,  675,    0,    0,    0,  675,  674,    0,  675,    0,
      675,  676,    0,    0,    0,  676,  675,  675,  676,  677,
      676,    0,    0,  677,  678,    0,  676,  677,  678,    0,
      677,  678,  677,  678,    0,    0,    0,  679,  677,  678,

      678,  679,    0,    0,    0,  679,    0,    0,  679,    0,
      679,    0,  680,  680,  681,    0,  679,  680,  681,    0,
      680,  681,  680,  681,    0,    0,  682,  683,  680,  681,
      682,  683,  681,  682,  683,  682,  683,    0,    0,  684,
        0,  682,  683,  684,  682,  683,  684,    0,  684,  685,
        0,    0,    0,  685,  684,    0,  685,  684,  685,  686,
      685,    0,    0,  686,  685,    0,  686,    0,  686,  687,
        0,    0,    0,  687,  686,    0,  687,    0,  687,  688,
      687,    0,    0,  688,  687,    0,  688,    0,  688,  689,
        0,    0,    0,  689,  688,    0,  689,    0,  689,  690,

        0,    0,    0,  690,  689,    0,  690,    0,  690,  691,
        0,    0,    0,  691,  690,  692,  691,    0,  691,  692,
        0,    0,    0,  692,  691,  693,  692,    0,  692,  693,
        0,    0,    0,  693,  692,    0,  693,    0,  693,  694,
        0,    0,  694,  694,  693,    0,  694,    0,  694,  695,
        0,    0,    0,  695,  694,    0,  695,    0,  695,  696,
        0,    0,  696,  696,  695,    0,  696,    0,  696,  697,
        0,    0,    0,  697,  696,    0,  697,    0,  697,  698,
        0,    0,    0,  698,  697,    0,  698,  697,  698,  699,
        0,    0,    0,  699,  698,    0,  699,    0,  699,  700,

        0,    0,    0,  700,  699,    0,  700,  699,  700,  701,
        0,    0,    0,  701,  700,    0,  701,    0,  701,  702,
        0,    0,    0,  702,  701,    0,  702,    0,  702,  703,
        0,    0,    0,  703,  702,    0,  703,    0,  703,  704,
        0,    0,    0,  704,  703,  705,  704,    0,  704,  705,
        0,    0,    0,  705,  704,  706,  705,    0,  705,  706,
        0,    0,    0,  706,  705,    0,  706,    0,  706,  707,
        0,    0,    0,  707,  706,    0,  707,    0,  707,  708,
        0,    0,    0,  708,  707,  709,  708,  707,  708,  709,
        0,    0,    0,  709,  708,  710,  709,  708,  709,  710,

        0,    0,    0,  710,  709,    0,  710,  712,  710,  711,
        0,    0,    0,  711,  710,    0,  711,    0,  711,  712,
        0,    0,    0,  712,  711,    0,  712,    0,  712,  713,
        0,    0,    0,  713,  712,    0,  713,    0,  713,  714,
        0,    0,    0,  714,  713,  713,  714,    0,  714,  715,
        0,    0,    0,  715,  714,    0,  715,  714,  715,  716,
        0,    0,    0,  716,  715,    0,  716,  715,  716,  717,
        0,    0,    0,  717,  716,    0,  717,    0,  717,    0,
      718,  718,    0,    0,  717,  718,    0,    0,  718,    0,
      718,    0,  719,  719,    0,    0,  718,  719,    0,    0,

      719,    0,  719,  720,    0,    0,  720,  720,  719,    0,
      720,    0,  720,  721,    0,    0,    0,  721,  720,    0,
      721,    0,  721,  722,    0,    0,    0,  722,  721,    0,
      722,    0,  722,  723,    0,    0,    0,  723,  722,    0,
      723,    0,  723,  724,    0,    0,    0,  724,  723,    0,
      724,    0,  724,  725,    0,    0,    0,  725,  724,  726,
      725,    0,  725,  726,    0,    0,    0,  726,  725,    0,
      726,    0,  726,  727,    0,    0,    0,  727,  726,    0,
      727,    0,  727,  728,    0,    0,    0,  728,  727,  727,
      728,    0,  728,    0,    0,  729,  729,  730,  728,  728,

      729,  730,    0,  729,  730,  729,  730,    0,    0,  731,
      732,  729,  730,  731,  732,    0,  731,  732,  731,  732,
        0,    0,  733,    0,  731,  732,  733,    0,    0,  733,
        0,  733,  734,    0,    0,    0,  734,  733,  733,  734,
        0,  734,    0,    0,    0,    0,    0,  734,  738,  738,
        0,  738,  739,  739,    0,  739,  740,  740,  740,  740,
      741,  741,  742,  742,    0,  742,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"

#line 38 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
namespace
{

struct LexerInfo
{
	explicit LexerInfo(const std::string& str, std::size_t start, std::size_t length)
		: input(&str)
		, pos(std::min(start, input->size()))
		, end(std::min(length, input->size()))
		, tokenPos(pos)
		, line(0)
		, column(0)
		, curToken(nullptr)
	{
		// Initialize the line and column number.
		for (std::size_t i = 0; i < start; ++i)
		{
			if ((*input)[i] == '\n')
			{
				++line;
				column = 0;
			}
			else
				++column;
		}
	}

	const std::string* input;
	std::size_t pos;
	std::size_t end;
	std::size_t tokenPos;
	std::size_t line;
	std::size_t column;
	msl::Token* curToken;
};

void addToken(LexerInfo* info, msl::Token::Type type, const char* text)
{
	std::size_t length = std::strlen(text);
	assert(info->curToken);
	*info->curToken = msl::Token(type, info->tokenPos, length, info->line, info->column);
	info->tokenPos += length;
	assert(info->tokenPos <= info->end);
	info->column += length;
}

void addNewline(LexerInfo* info, msl::Token::Type type, const char* text)
{
	std::size_t length = std::strlen(text);
	assert(info->curToken);
	*info->curToken = msl::Token(type, info->tokenPos, length, info->line, info->column);
	info->tokenPos += length;
	assert(info->tokenPos <= info->end);
	++info->line;
	info->column = 0;
}

void addComment(LexerInfo* info, const char* text)
{
	std::size_t length = std::strlen(text);
	assert(info->curToken);
	*info->curToken = msl::Token(msl::Token::Type::Comment, info->tokenPos, length, info->line,
		info->column);
	info->tokenPos += length;
	assert(info->tokenPos <= info->end);

	// Update the line and column based on newlines within the comment.
	for (std::size_t i = 0; i < length; ++i)
	{
		if (text[i] == '\n')
		{
			++info->line;
			info->column = 0;
		}
		else
			++info->column;
	}
}

} // namespace

#define YY_DECL static bool msllex (yyscan_t yyscanner)
#define YY_EXTRA_TYPE LexerInfo*
#define YY_NO_INPUT
#define YY_NO_UNPUT
#define YY_SKIP_YYWRAP
#define YY_INPUT(buf, result, max_size) \
	{ \
		result = std::min(max_size, yyextra->end - yyextra->pos); \
		assert(yyextra->pos + result <= yyextra->input->size()); \
		std::memcpy(buf, yyextra->input->c_str() + yyextra->pos, result); \
		yyextra->pos += result; \
	}

bool mslwrap(yyscan_t)
{
	return true;
}

#line 2046 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"

#define INITIAL 0
#define INCLUDE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int msllex_init (yyscan_t* scanner);

int msllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int msllex_destroy (yyscan_t yyscanner );

int mslget_debug (yyscan_t yyscanner );

void mslset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE mslget_extra (yyscan_t yyscanner );

void mslset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *mslget_in (yyscan_t yyscanner );

void mslset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *mslget_out (yyscan_t yyscanner );

void mslset_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t mslget_leng (yyscan_t yyscanner );

char *mslget_text (yyscan_t yyscanner );

int mslget_lineno (yyscan_t yyscanner );

void mslset_lineno (int _line_number ,yyscan_t yyscanner );

int mslget_column  (yyscan_t yyscanner );

void mslset_column (int _column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mslwrap (yyscan_t yyscanner );
#else
extern int mslwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int msllex (yyscan_t yyscanner);

#define YY_DECL int msllex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			mslensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		msl_load_buffer_state(yyscanner );
		}

	{
#line 141 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"


#line 2311 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 736 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5467 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 143 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Whitespace, yytext); return true;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 144 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addNewline(yyextra, msl::Token::Type::Newline, yytext); BEGIN(INITIAL); return true;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 145 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addNewline(yyextra, msl::Token::Type::EscapedNewline, yytext); return true;
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 147 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addComment(yyextra, yytext); return true;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 148 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addComment(yyextra, yytext); return true;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 150 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Exclamation, yytext); return true;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 151 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Percent, yytext); return true;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 152 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Tilde, yytext); return true;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 153 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Carot, yytext); return true;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 154 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Amperstand, yytext); return true;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 155 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bar, yytext); return true;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 156 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Asterisk, yytext); return true;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 157 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Slash, yytext); return true;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 158 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Plus, yytext); return true;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 159 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dash, yytext); return true;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 160 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Equal, yytext); return true;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 161 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftParen, yytext); return true;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 162 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightParen, yytext); return true;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 163 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftSquare, yytext); return true;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 164 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightSquare, yytext); return true;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 165 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftBrace, yytext); return true;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 166 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightBrace, yytext); return true;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 167 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftAngle, yytext); return true;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 168 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightAngle, yytext); return true;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 169 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Question, yytext); return true;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 170 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Colon, yytext); return true;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 171 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dot, yytext); return true;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 172 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Comma, yytext); return true;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 173 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Semicolon, yytext); return true;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 175 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAnd, yytext); return true;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 176 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOr, yytext); return true;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 177 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXor, yytext); return true;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 178 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftShift, yytext); return true;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 179 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightShift, yytext); return true;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 180 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::EqualCompare, yytext); return true;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 181 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NotEqual, yytext); return true;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 182 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LessEqual, yytext); return true;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 183 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::GreaterEqual, yytext); return true;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 184 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::XorEqual, yytext); return true;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 185 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AndEqual, yytext); return true;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 186 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::OrEqual, yytext); return true;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 187 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MultiplyEqual, yytext); return true;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 188 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DivideEqual, yytext); return true;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 189 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PlusEqual, yytext); return true;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 190 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MinusEqual, yytext); return true;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 192 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAndEqual, yytext); return true;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 193 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOrEqual, yytext); return true;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 194 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXorEqual, yytext); return true;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 195 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftShiftEqual, yytext); return true;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 196 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightShiftEqual, yytext); return true;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 198 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Const, yytext); return true;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 199 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Centroid, yytext); return true;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 200 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Break, yytext); return true;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 201 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Continue, yytext); return true;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 202 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Do, yytext); return true;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 203 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Else, yytext); return true;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 204 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::For, yytext); return true;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 205 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::If, yytext); return true;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 206 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Discard, yytext); return true;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 207 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Return, yytext); return true;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 208 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Switch, yytext); return true;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 209 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Case, yytext); return true;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 210 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Default, yytext); return true;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 211 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Uniform, yytext); return true;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 212 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Patch, yytext); return true;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 213 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sample, yytext); return true;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 214 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Buffer, yytext); return true;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 215 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Shared, yytext); return true;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 216 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Coherent, yytext); return true;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 217 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Volatile, yytext); return true;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 218 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Restrict, yytext); return true;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 219 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ReadOnly, yytext); return true;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 220 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::WriteOnly, yytext); return true;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 221 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NonPerspective, yytext); return true;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 222 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Flat, yytext); return true;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 223 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Smooth, yytext); return true;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 224 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Struct, yytext); return true;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 225 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Void, yytext); return true;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 226 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::While, yytext); return true;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 228 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bool, yytext); return true;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 229 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Float, yytext); return true;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 230 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Double, yytext); return true;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 231 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Int, yytext); return true;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 232 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UInt, yytext); return true;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 233 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec2, yytext); return true;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 234 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec3, yytext); return true;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 235 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec4, yytext); return true;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 236 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec2, yytext); return true;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 237 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec3, yytext); return true;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 238 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec4, yytext); return true;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 239 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec2, yytext); return true;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 240 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec3, yytext); return true;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 241 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec4, yytext); return true;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 242 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec2, yytext); return true;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 243 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec3, yytext); return true;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 244 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec4, yytext); return true;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 245 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec2, yytext); return true;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 246 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec3, yytext); return true;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 247 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec4, yytext); return true;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 248 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2, yytext); return true;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 249 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3, yytext); return true;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 250 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4, yytext); return true;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 251 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2, yytext); return true;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 252 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3, yytext); return true;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 253 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4, yytext); return true;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 254 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x2, yytext); return true;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 255 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x3, yytext); return true;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 256 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x4, yytext); return true;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 257 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x2, yytext); return true;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 258 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x3, yytext); return true;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 259 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x4, yytext); return true;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 260 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x2, yytext); return true;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 261 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x3, yytext); return true;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 262 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x4, yytext); return true;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 263 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x2, yytext); return true;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 264 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x3, yytext); return true;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 265 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x4, yytext); return true;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 266 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x2, yytext); return true;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 267 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x3, yytext); return true;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 268 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x4, yytext); return true;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 269 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x2, yytext); return true;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 270 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x3, yytext); return true;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 271 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x4, yytext); return true;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 272 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1D, yytext); return true;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 273 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2D, yytext); return true;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 274 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler3D, yytext); return true;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 275 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCube, yytext); return true;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 276 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DShadow, yytext); return true;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 277 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DShadow, yytext); return true;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 278 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeShadow, yytext); return true;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 279 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArray, yytext); return true;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 280 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArray, yytext); return true;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 281 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArrayShadow, yytext); return true;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 282 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArrayShadow, yytext); return true;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 283 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1D, yytext); return true;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 284 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2D, yytext); return true;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 285 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler3D, yytext); return true;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 286 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCube, yytext); return true;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 287 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1DArray, yytext); return true;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 288 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DArray, yytext); return true;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 289 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1D, yytext); return true;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 290 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2D, yytext); return true;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 291 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler3D, yytext); return true;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 292 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCube, yytext); return true;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 293 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1DArray, yytext); return true;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 294 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DArray, yytext); return true;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 295 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerBuffer, yytext); return true;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 296 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerBuffer, yytext); return true;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 297 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerBuffer, yytext); return true;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 298 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArray, yytext); return true;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 299 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArrayShadow, yytext); return true;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 300 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCubeArray, yytext); return true;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 301 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCubeArray, yytext); return true;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 302 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMS, yytext); return true;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 303 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMS, yytext); return true;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 304 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMS, yytext); return true;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 305 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMSArray, yytext); return true;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 306 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMSArray, yytext); return true;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 307 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMSArray, yytext); return true;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 308 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1D, yytext); return true;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 309 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1D, yytext); return true;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 310 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1D, yytext); return true;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 311 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2D, yytext); return true;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 312 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2D, yytext); return true;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 313 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2D, yytext); return true;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 314 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image3D, yytext); return true;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 315 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage3D, yytext); return true;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 316 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage3D, yytext); return true;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 317 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCube, yytext); return true;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 318 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCube, yytext); return true;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 319 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCube, yytext); return true;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 320 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageBuffer, yytext); return true;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 321 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageBuffer, yytext); return true;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 322 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageBuffer, yytext); return true;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 323 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1DArray, yytext); return true;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 324 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1DArray, yytext); return true;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 325 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1DArray, yytext); return true;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 326 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DArray, yytext); return true;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 327 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DArray, yytext); return true;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 328 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DArray, yytext); return true;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 329 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCubeArray, yytext); return true;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 330 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCubeArray, yytext); return true;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 331 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCubeArray, yytext); return true;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 332 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMS, yytext); return true;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 333 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMS, yytext); return true;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 334 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMS, yytext); return true;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 335 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMSArray, yytext); return true;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 336 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMSArray, yytext); return true;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 337 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMSArray, yytext); return true;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 338 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AtomicUInt, yytext); return true;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 340 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Hash, yytext); return true;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 341 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Include, yytext); BEGIN(INCLUDE); return true;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 342 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Pragma, yytext); return true;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 343 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Define, yytext); return true;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 344 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifdef, yytext); return true;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 345 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifndef, yytext); return true;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 346 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocIf, yytext); return true;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 347 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElif, yytext); return true;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 348 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElse, yytext); return true;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 349 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocEndif, yytext); return true;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 350 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocConcat, yytext); return true;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 351 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IncludePath, yytext); BEGIN(INITIAL); return true;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 353 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 354 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 355 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 356 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 357 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::FloatLiteral, yytext); return true;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 358 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::FloatLiteral, yytext); return true;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 359 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DoubleLiteral, yytext); return true;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 360 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DoubleLiteral, yytext); return true;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 362 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Identifier, yytext); return true;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 364 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Invalid, yytext); return true;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 366 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"
ECHO;
	YY_BREAK
#line 3437 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * msllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( mslwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of msllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mslrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 736 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 736 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 735);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mslrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mslwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mslrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        mslensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	msl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	msl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void msl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mslpop_buffer_state();
	 *		mslpush_buffer_state(new_buffer);
     */
	mslensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	msl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (mslwrap()) processing, but the only time this flag
	 * is looked at is after mslwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void msl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE msl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mslalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in msl_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mslalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in msl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	msl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with msl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void msl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mslfree((void *) b->yy_ch_buf ,yyscanner );

	mslfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mslrestart() or at EOF.
 */
    static void msl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	msl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then msl_init_buffer was _probably_
     * called from mslrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void msl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		msl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void mslpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	mslensure_buffer_stack(yyscanner);

	/* This block is copied from msl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from msl_switch_to_buffer. */
	msl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void mslpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	msl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		msl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mslensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mslensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mslrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mslensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE msl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mslalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in msl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	msl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to msllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       msl_scan_bytes() instead.
 */
YY_BUFFER_STATE msl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return msl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to msllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE msl_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) mslalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in msl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = msl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in msl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE mslget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int mslget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int mslget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *mslget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *mslget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t mslget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *mslget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void mslset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void mslset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mslset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void mslset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mslset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see msl_switch_to_buffer
 */
void mslset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void mslset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int mslget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void mslset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* msllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int msllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) mslalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* msllex_init_extra has the same functionality as msllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to mslalloc in
 * the yyextra field.
 */

int msllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    mslset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) mslalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    mslset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from msllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * msllex_init()
     */
    return 0;
}

/* msllex_destroy is for both reentrant and non-reentrant scanners. */
int msllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		msl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mslpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	mslfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        mslfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * msllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    mslfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mslalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *mslrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mslfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see mslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 366 "/home/abarany/Development/ModularShaderLanguage/Frontend/src/Parse/Lexer.lex"



namespace msl
{

class Lexer::Impl
{
public:
	Impl(const std::string& input, std::size_t start, std::size_t length)
		: m_info(input, start, length)
	{
		msllex_init_extra(&m_info,&m_scanner);
	}

	~Impl()
	{
		msllex_destroy(m_scanner);
	}

	yyscan_t m_scanner;
	LexerInfo m_info;
};

std::vector<Token> Lexer::tokenize(const std::string& input, std::size_t start, std::size_t length)
{
	std::vector<Token> tokens;
	Token curToken;

	Lexer lexer(input, start, length);
	while (lexer.nextToken(curToken))
		tokens.push_back(curToken);

	return tokens;
}

Lexer::Lexer(const std::string& input, std::size_t start, std::size_t length)
	: m_impl(new Impl(input, start, length))
{
}

Lexer::~Lexer()
{
}

Lexer::Lexer(Lexer&& other)
	: m_impl(std::move(other.m_impl))
{
}

Lexer& Lexer::operator=(Lexer&& other)
{
	m_impl = std::move(other.m_impl);
	return *this;
}

bool Lexer::nextToken(Token& token)
{
	assert(m_impl);
	m_impl->m_info.curToken = &token;
	return msllex(m_impl->m_scanner);
}

} // msl

