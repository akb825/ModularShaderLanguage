#line 2 "src/Parse/Lexer.cpp"
#line 2 "src/Parse/Lexer.lex"
/*
 * Copyright 2016 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "Parse/Lexer.h"
#include <algorithm>
#include <cstring>




#line 27 "src/Parse/Lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 210
#define YY_END_OF_BUFFER 211
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[746] =
    {   0,
        0,    0,    0,    0,  211,  209,    1,    2,  210,    6,
      191,    7,   10,   17,   18,   12,   14,   28,   15,   27,
       13,  202,  203,   26,   29,   23,   16,   24,   25,  209,
      209,  209,  209,   19,  209,   20,    9,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,   21,   11,   22,    8,  209,   23,  209,    1,
        2,   36,    0,  209,  209,  209,  209,   30,   40,   42,
       44,   45,  206,  209,  206,  209,  209,  209,    4,   43,
      206,  204,  209,  202,  205,  203,  203,   33,   37,   35,
       38,   34,  208,  208,  208,  208,  208,  208,  208,    0,

       39,   32,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,   55,  208,  208,  208,  208,
      208,   58,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   41,   31,  209,    0,  201,  209,    0,   33,   37,
      201,    0,    0,    0,    0,  209,  209,  209,  197,  209,
      209,   46,  209,  206,  207,  209,    0,  209,    4,    4,
        4,  204,  205,  205,   49,   50,  208,  208,  208,  208,
      208,  208,    3,   48,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,   57,  208,   83,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,   47,  201,
      201,   49,    0,    0,    0,  197,    0,    0,  209,  209,
      209,  209,  209,  209,  209,  209,    0,    5,    4,    4,
      208,  208,  208,  208,  208,  208,  208,  208,   80,  208,
      208,  208,   62,   95,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,   56,   75,  208,  208,  208,  100,
      101,  102,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,   84,  208,  208,   94,   96,   78,  208,

      208,  208,    0,    0,    0,    0,    0,    0,    0,    0,
      209,  198,  199,  209,  209,  209,  209,  209,    5,  208,
      208,  208,  208,  208,  208,  208,   86,   53,  208,   85,
       87,  208,  208,   51,  208,   98,  208,  208,  103,  104,
      105,  208,   97,   99,   81,   89,   88,   90,  208,  208,
      208,  208,   65,  208,  208,  208,  208,  208,  208,  208,
      208,   92,  208,   91,   93,  208,   79,  208,    0,  198,
      199,    0,    0,    0,    0,    0,  209,  200,  195,  209,
      209,  209,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,   67,  208,  208,  208,  208,  208,  208,

      208,  208,   82,  106,  107,  108,  109,  110,  111,  112,
      113,  114,  208,  208,  208,   60,   66,   68,   76,   77,
       61,  208,  208,  208,    0,  200,  195,    0,    0,    0,
      194,  196,  209,  193,  208,  208,  208,  208,  208,  208,
      160,  163,  166,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  209,  208,  208,  208,   63,   59,  115,  116,
      117,  118,  119,  120,  121,  122,  123,  208,  208,  208,
       64,  208,  208,  194,  196,    0,  193,  192,  161,  164,
      167,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  162,  165,  168,  208,  208,  208,

      209,   52,   69,   54,  208,   72,   71,   70,  208,  192,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  184,  208,  169,  124,  125,  126,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      209,  208,   73,  208,  208,  185,  208,  170,  135,  136,
      137,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  186,  208,  171,
      141,  142,  143,  208,  208,  209,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      172,  208,  208,  208,  208,  154,  208,  208,  127,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  190,
      208,  208,  208,  208,  173,  208,  208,  208,  155,  208,
      138,  175,  178,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  174,  208,  208,  208,
      156,  208,  144,  208,  176,  179,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      147,  208,  208,  177,  180,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  148,  208,
      187,  181,  131,  208,  132,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  149,  208,   74,  188,  182,  139,

      140,  208,  208,  208,  128,  208,  208,  129,  208,  208,
      189,  183,  145,  146,  208,  208,  208,  208,  208,  208,
      157,  150,  208,  208,  208,  158,  152,  208,  208,  208,
      130,  159,  153,  208,  208,  208,  208,  208,  208,  133,
      134,  208,  208,  151,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,    1,   31,   32,   33,   34,   35,   36,
       37,   37,   38,   37,   37,   39,   40,   37,   37,   37,
       37,   37,   41,   37,   42,   37,   37,   43,   37,   37,
       44,   45,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   37,   58,   59,   60,   61,
       62,   63,   37,   64,   65,   66,   67,   68,   69,   70,
       71,   37,   72,   73,   74,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[755] =
    {   0,
        0,    0,   70,   71, 1009,    0, 1006, 1010, 1004,  978,
       76,    0,   71,    0,    0,  990,  976,    0,  975,   65,
       67,  124,   69,    0,    0,   54,  974,   74,    0,  194,
       67,  952,   68,    0,  996,    0,   66,  933,   70,   61,
      100,  939,   53,  104,  948,  934,  946,  941,  114,  118,
       54,   61,    0,   58,    0,    0,  148,  169,    0,  991,
     1010,    0,  124,  939,   61,   95,  927,  962,    0,    0,
        0,    0,  252,  258,    0,  953,  934,  281,  270,    0,
      268,  276,  310,    0,  326,  365,    0,  959,    0,    0,
        0,  958,    0,  925,  935,  934,  922,  921,  931,  976,

        0,  950,  915,  923,  913,  921,  919,  919,  906,  127,
       74,  917,  915,  903,  918,  899,  912,  899,  240,  899,
      909,    0,  895,  907,  893,  897,  891,  259,  896,  906,
      892,  889,  895,  898,  889,  892,  895,  896,  102,  889,
      888,    0,  916,  308,  937,  333,  334,  913,  338,  367,
      368,  888,  123,  131,  876,  885,  244,  886,  303,  886,
      887,    0,  380,  390,    0,  413,  923,  416,  349,  889,
      419,    0,    0,    0,    0,    0,  884,  872,  876,  867,
      880,  868, 1010,    0,  867,  875,  866,  875,  869,  871,
      868,  899,  853,  865,  124,  866,  867,  864,  848,  863,

      861,  858,  844,  860,    0,  857,    0,  856,  370,  843,
      854,  852,  837,  835,  838,  836,  837,  831,  831,  845,
      829,  840,  842,  297,  840,  842,  831,  823,    0,  882,
      858,  432,  832,  308,  833,  378,  833,  834,  825,  827,
      827,  822,  825,  825,  817,  820,  423,  439,  402,  379,
      819,  810,  819,  812,  815,  806,  811,  846,    0,  808,
      812,  332,    0,    0,  800,  799,  796,  804,  839,  792,
      809,  432,  798,  426,    0,    0,  790,  834,  435,  784,
      783,  782,  798,  794,  787,  784,  783,  787,  792,  778,
      792,  791,  820,    0,  778,  436,    0,    0,    0,  773,

      785,  784,  779,  781,  781,  776,  779,  779,  771,  774,
      767,    0,    0,  773,  772,  772,  757,  763,  810,  768,
      761,  446,  766,  765,  758,  765,    0,    0,  751,    0,
        0,  752,  760,    0,  751,    0,  752,  746,  739,  738,
      737,  753,    0,    0,    0,    0,    0,    0,  448,  451,
      454,  741,    0,  743,  746,  741,  748,  748,  743,  732,
      741,    0,  732,    0,    0,  738,    0,  732,  732, 1010,
     1010,  738,  737,  737,  722,  728,  734,    0,    0,  732,
      733,  735,  461,  730,  748,  747,  746,  712,  711,  713,
      464,  723,  727,    0,  717,  712,  705,  705,  718,  466,

      469,  478,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  704,  709,  716,    0,    0,    0,    0,    0,
        0,  706,  706,  703,  710, 1010, 1010,  708,  709,  711,
        0,    0,  706,    0,  724,  723,  722,  688,  687,  689,
      721,  419,    0,  697,  700,  482,  715,  714,  713,  679,
      678,  680,  676,  690,  675,  687,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  676,  667,  671,
        0,  683,  676, 1010, 1010,  681, 1010,    0,  702,  464,
        0,  678,  681,  486,  666,  665,  687,  673,  673,  691,
      690,  689,  655,  654,  689,  477,    0,  665,  668,  490,

      660,    0,    0,    0,  663,    0,    0,    0,  644, 1010,
      650,  649,  671,  657,  657,  675,  674,  673,  639,  638,
      640,  639,  671,  648,  669,  282,  485,    0,  645,  648,
      633,  632,  654,  640,  640,  658,  657,  656,  622,  621,
      626,  635,    0,  621,  620,  652,  629,  650,  649,  481,
        0,  625,  628,  628,  627,  611,  610,  609,  608,  615,
      606,  628,  612,  613,  613,  601,  600,  632,  609,  630,
      629,  489,    0,  605,  608,  591,  590,  606,  605,  589,
      588,  587,  586,  585,  607,  593,  593,  574,  573,  579,
        0,  578,  577,  591,  575,  607,  588,  583,  396,  586,

      585,  569,  568,  567,  566,  565,  587,  573,  573,    0,
      568,  553,  552,  558,    0,  557,  556,  555,  587,  564,
      585,    0,    0,  566,  565,  564,  560,  562,  546,  557,
      544,  543,  550,  534,  533,  539,    0,  538,  537,  536,
      568,  545,  566,  528,    0,    0,  546,  545,  544,  543,
      527,  526,  525,  517,  516,  515,  523,  513,  519,  520,
        0,  517,  531,    0,    0,  530,  529,  528,  527,  511,
      510,  509,  519,  500,  499,  498,  497,  503,    0,  502,
        0,    0,  524,  495,  522,  513,  492,  511,  507,  487,
      486,  485,  484,  490,    0,  489,    0,    0,    0,    0,

        0,  503,  502,  494,    0,  493,  477,    0,  457,  465,
        0,    0,    0,    0,  475,  464,  421,  406,  414,  413,
        0,  419,  376,  367,  360,    0,    0,  343,  322,  300,
        0,    0,    0,  279,  258,  267,  221,  206,  141,    0,
        0,  102,   72,    0, 1010,   95,  529,  531,  533,  536,
      538,  540,  542,  545
    } ;

static yyconst flex_int16_t yy_def[755] =
    {   0,
      745,    1,    1,    1,  745,  746,  745,  745,  745,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  745,
       30,   30,   30,  746,  746,  746,  746,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  746,  746,  746,  746,  747,  748,  746,  745,
      745,  746,  745,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  749,  750,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,   30,   30,   30,   30,   30,   30,   30,  745,

      746,  746,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  746,  746,  747,  751,  747,  748,  752,  748,  748,
      748,  745,  745,  745,  745,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  749,  753,  749,  750,  754,
      750,  746,   85,  746,  746,  746,   30,   30,   30,   30,
       30,   30,  745,  746,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  746,  751,
      752,  748,  745,  745,  745,  745,  745,  745,  746,  746,
      746,  746,  746,  746,  746,  746,  753,  749,  754,  754,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,  745,  745,  745,  745,  745,  745,  745,  745,
      746,  746,  746,  746,  746,  746,  746,  746,  753,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  745,  745,
      745,  745,  745,  745,  745,  745,  746,  746,  746,  746,
      746,  746,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  745,  745,  745,  745,  745,  745,
      746,  746,  746,  746,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  746,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  745,  745,  745,  745,  746,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

      746,   30,   30,   30,   30,   30,   30,   30,   30,  745,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      746,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  746,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,  746,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,    0,  745,  745,  745,  745,  745,
      745,  745,  745,  745
    } ;

static yyconst flex_uint16_t yy_nxt[1086] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   24,   25,   26,   27,   28,   29,
       30,   30,   30,   30,   30,   30,   30,   31,   30,   30,
       32,   33,   30,   34,   35,   36,   37,    6,   38,   39,
       40,   41,   42,   43,   30,   30,   44,   30,   30,   45,
       46,   30,   47,   48,   49,   30,   50,   51,   52,   30,
       30,   53,   54,   55,   56,   57,   57,   63,   78,   68,
       88,   89,   73,   79,   81,  142,   86,   86,   86,   86,
       86,   86,   86,  101,   80,   59,   58,   58,   69,   74,

       75,   91,   92,   76,   94,   98,  138,   95,   99,  109,
       87,  119,  102,  110,  120,  139,  140,   74,   75,  157,
      104,  158,  111,   77,  141,   63,   96,   64,   65,  194,
      143,  105,   66,  106,  195,   87,  107,  108,   67,   81,
      744,   82,   82,   82,   82,   82,   82,   83,  159,  145,
      112,  145,  113,  146,  121,  160,  114,  122,  225,  115,
      226,  116,  129,  743,  123,   84,   85,  117,  134,  130,
      148,  124,  148,  131,  135,  152,  153,  192,  136,  132,
      154,  234,  133,  235,  236,  137,  155,  193,  267,  268,
       84,  237,  742,   85,   59,  149,  150,  151,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   93,   93,   93,   93,   93,   93,   93,   59,   59,
       59,   59,   59,   59,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   59,   59,   59,
       59,   59,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   59,   59,   59,   59,   73,
      163,  170,  163,  170,  741,  164,  164,  164,  164,  164,
      164,  164,  167,  167,  167,   73,   74,   75,  203,  740,
       76,   81,  168,   82,   82,   82,   82,   82,   82,   83,

      240,  204,   74,   75,   74,   75,   76,  212,  241,  145,
       77,  145,  559,  146,  171,  739,  297,  172,  298,  738,
       74,   75,  560,  213,  214,   81,   77,   83,   83,   83,
       83,   83,   83,   83,  145,  148,  145,  148,  146,  148,
      737,  148,  172,  173,  173,  173,  173,  173,  173,  173,
      170,  330,  170,  331,  243,  736,  173,  173,  173,  173,
      173,  173,  151,  244,  304,  232,  151,  174,  148,  148,
      148,  148,  305,  735,  173,  173,  173,  173,  173,  173,
       81,  170,   86,   86,   86,   86,   86,   86,   86,  280,
      281,  282,  174,  171,  734,  151,  151,  164,  164,  164,

      164,  164,  164,  164,  170,  250,   87,  164,  164,  164,
      164,  164,  164,  164,  167,  167,  167,  167,  167,  167,
      170,  170,  250,  249,  168,   75,  632,  168,   76,  307,
      733,   87,  248,  148,  247,  148,  633,  732,  308,  319,
      167,  167,  167,   75,  731,  343,  249,  344,   77,  486,
      168,  339,  340,  341,  347,  364,  348,  365,  487,  730,
      151,  729,  728,  171,  385,  386,  387,  404,  405,  406,
      407,  408,  409,  410,  411,  412,  727,  388,  389,  435,
      436,  437,  447,  448,  449,  459,  460,  461,  462,  463,
      464,  726,  438,  439,  512,  450,  451,  465,  466,  467,

      490,  491,  492,  513,  516,  517,  518,  532,  536,  537,
      538,  584,  725,  493,  494,  561,  533,  519,  520,  606,
      585,  539,  540,  724,  562,  563,  723,  722,  607,  144,
      144,  147,  147,  166,  166,  166,  169,  169,  145,  145,
      148,  148,  167,  167,  167,  170,  170,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  699,
      698,  697,  696,  695,  694,  693,  692,  691,  690,  689,
      688,  687,  686,  685,  684,  683,  682,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  670,  669,

      668,  667,  666,  665,  664,  663,  662,  661,  660,  659,
      658,  657,  656,  655,  654,  653,  652,  651,  650,  649,
      648,  647,  646,  645,  644,  643,  642,  641,  640,  639,
      638,  637,  636,  635,  634,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  605,
      604,  603,  602,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  558,

      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  535,  534,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      515,  514,  511,  510,  509,  508,  507,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  489,
      488,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  458,
      457,  456,  455,  454,  453,  452,  446,  445,  444,  443,
      442,  441,  440,  434,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  421,  420,  419,  418,

      417,  416,  415,  414,  413,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  384,
      383,  247,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  346,  345,  342,  338,  337,  336,
      335,  334,  333,  332,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  306,  303,  231,  230,  302,  301,
      300,  299,  296,  295,  294,  293,  292,  291,  290,  289,

      288,  287,  286,  285,  284,  283,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  249,  247,  246,  245,  242,  239,  238,
      233,  231,  230,  229,  228,  227,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  211,  210,  209,  208,
      207,  206,  205,  202,  201,  200,  199,  198,  197,  196,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  182,
      181,  180,  179,  178,  177,  176,  175,  165,  165,  162,
      161,  156,   60,  128,  127,  126,  125,  118,  103,  100,

       97,   90,   72,   71,   70,   62,   61,   60,  745,    5,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745
    } ;

static yyconst flex_int16_t yy_chk[1086] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,   11,   21,   13,
       26,   26,   20,   21,   23,   54,   23,   23,   23,   23,
       23,   23,   23,   37,   21,  746,    3,    4,   13,   20,

       20,   28,   28,   20,   31,   33,   51,   31,   33,   40,
       23,   43,   37,   40,   43,   51,   52,   20,   20,   65,
       39,   65,   40,   20,   52,   63,   31,   11,   11,  111,
       54,   39,   11,   39,  111,   23,   39,   39,   11,   22,
      743,   22,   22,   22,   22,   22,   22,   22,   66,   57,
       41,   57,   41,   57,   44,   66,   41,   44,  139,   41,
      139,   41,   49,  742,   44,   22,   22,   41,   50,   49,
       58,   44,   58,   49,   50,   63,   63,  110,   50,   49,
       63,  153,   49,  153,  154,   50,   63,  110,  195,  195,
       22,  154,  739,   22,   30,   58,   58,   58,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   73,
       74,   79,   74,   79,  738,   74,   74,   74,   74,   74,
       74,   74,   78,   78,   78,   81,   73,   73,  119,  737,
       73,   82,   78,   82,   82,   82,   82,   82,   82,   82,

      157,  119,   81,   81,   73,   73,   81,  128,  157,  144,
       73,  144,  526,  144,   79,  736,  224,   82,  224,  735,
       81,   81,  526,  128,  128,   83,   81,   83,   83,   83,
       83,   83,   83,   83,  146,  147,  146,  147,  146,  149,
      734,  149,   82,   85,   85,   85,   85,   85,   85,   85,
      169,  262,  169,  262,  159,  730,   85,   85,   85,   85,
       85,   85,  147,  159,  234,  149,  149,   85,  150,  151,
      150,  151,  234,  729,   85,   85,   85,   85,   85,   85,
       86,  250,   86,   86,   86,   86,   86,   86,   86,  209,
      209,  209,   85,  169,  728,  150,  151,  163,  163,  163,

      163,  163,  163,  163,  249,  249,   86,  164,  164,  164,
      164,  164,  164,  164,  166,  166,  166,  168,  168,  168,
      171,  171,  171,  250,  166,  164,  599,  168,  164,  236,
      725,   86,  168,  232,  247,  232,  599,  724,  236,  247,
      248,  248,  248,  164,  723,  274,  249,  274,  164,  442,
      248,  272,  272,  272,  279,  296,  279,  296,  442,  722,
      232,  720,  719,  171,  322,  322,  322,  349,  349,  349,
      350,  350,  350,  351,  351,  351,  718,  322,  322,  383,
      383,  383,  391,  391,  391,  400,  400,  400,  401,  401,
      401,  717,  383,  383,  480,  391,  391,  402,  402,  402,

      446,  446,  446,  480,  484,  484,  484,  496,  500,  500,
      500,  550,  716,  446,  446,  527,  496,  484,  484,  572,
      550,  500,  500,  715,  527,  527,  710,  709,  572,  747,
      747,  748,  748,  749,  749,  749,  750,  750,  751,  751,
      752,  752,  753,  753,  753,  754,  754,  707,  706,  704,
      703,  702,  696,  694,  693,  692,  691,  690,  689,  688,
      687,  686,  685,  684,  683,  680,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  663,
      662,  660,  659,  658,  657,  656,  655,  654,  653,  652,
      651,  650,  649,  648,  647,  644,  643,  642,  641,  640,

      639,  638,  636,  635,  634,  633,  632,  631,  630,  629,
      628,  627,  626,  625,  624,  621,  620,  619,  618,  617,
      616,  614,  613,  612,  611,  609,  608,  607,  606,  605,
      604,  603,  602,  601,  600,  598,  597,  596,  595,  594,
      593,  592,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  549,
      548,  547,  546,  545,  544,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  525,

      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  509,  505,  501,  499,  498,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      483,  482,  479,  476,  473,  472,  470,  469,  468,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  445,
      444,  441,  440,  439,  438,  437,  436,  435,  433,  430,
      429,  428,  425,  424,  423,  422,  415,  414,  413,  399,
      398,  397,  396,  395,  393,  392,  390,  389,  388,  387,
      386,  385,  384,  382,  381,  380,  377,  376,  375,  374,
      373,  372,  369,  368,  366,  363,  361,  360,  359,  358,

      357,  356,  355,  354,  352,  342,  341,  340,  339,  338,
      337,  335,  333,  332,  329,  326,  325,  324,  323,  321,
      320,  319,  318,  317,  316,  315,  314,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  295,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  278,  277,  273,  271,  270,  269,
      268,  267,  266,  265,  261,  260,  258,  257,  256,  255,
      254,  253,  252,  251,  246,  245,  244,  243,  242,  241,
      240,  239,  238,  237,  235,  233,  231,  230,  228,  227,
      226,  225,  223,  222,  221,  220,  219,  218,  217,  216,

      215,  214,  213,  212,  211,  210,  208,  206,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  182,  181,  180,
      179,  178,  177,  170,  167,  161,  160,  158,  156,  155,
      152,  148,  145,  143,  141,  140,  138,  137,  136,  135,
      134,  133,  132,  131,  130,  129,  127,  126,  125,  124,
      123,  121,  120,  118,  117,  116,  115,  114,  113,  112,
      109,  108,  107,  106,  105,  104,  103,  102,  100,   99,
       98,   97,   96,   95,   94,   92,   88,   77,   76,   68,
       67,   64,   60,   48,   47,   46,   45,   42,   38,   35,

       32,   27,   19,   17,   16,   10,    9,    7,    5,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/Parse/Lexer.lex"

#line 25 "src/Parse/Lexer.lex"
struct LexerInfo
{
	explicit LexerInfo(const std::string& str)
		: input(&str)
		, pos(0)
		, line(0)
		, column(0)
	{
	}

	const std::string* input;
	unsigned int pos;
	unsigned int line;
	unsigned int column;
	std::vector<msl::Token> tokens;
};

void addToken(LexerInfo* info, msl::Token::Type type, const char* text)
{
	unsigned int length = static_cast<unsigned int>(std::strlen(text));
	info->tokens.emplace_back(type, info->pos, length, info->line, info->column);
	info->pos += length;
	info->column += length;
}

void addNewline(LexerInfo* info, const char* text)
{
	unsigned int length = static_cast<unsigned int>(std::strlen(text));
	info->tokens.emplace_back(msl::Token::Type::Newline, info->pos, length, info->line,
		info->column);
	info->pos += length;
	++info->line;
	info->column = 0;
}

void addComment(LexerInfo* info, const char* text)
{
	unsigned int length = static_cast<unsigned int>(std::strlen(text));
	info->tokens.emplace_back(msl::Token::Type::Comment, info->pos, length, info->line,
		info->column);
	info->pos += length;

	// Update the line and column based on newlines within the comment.
	for (unsigned int i = 0; i < length; ++i)
	{
		if (text[i] == '\n')
		{
			++info->line;
			info->column = 0;
		}
		else
			++info->column;
	}
}

#define YY_EXTRA_TYPE LexerInfo*
#define YY_NO_INPUT
#define YY_NO_UNPUT
#define YY_INPUT(buf, result, max_size) \
	{ \
		result = std::min(max_size, yyextra->input->size() - yyextra->pos); \
		std::memcpy(buf, yyextra->input->c_str() + yyextra->pos, result); \
		yyextra->pos += result; \
	}

#line 1020 "src/Parse/Lexer.cpp"

#define INITIAL 0
#define INCLUDE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int _line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int _column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	{
#line 94 "src/Parse/Lexer.lex"


#line 1285 "src/Parse/Lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 746 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1010 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 96 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Whitespace, yytext);
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 97 "src/Parse/Lexer.lex"
addNewline(yyextra, yytext);
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "src/Parse/Lexer.lex"
addNewline(yyextra, yytext);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 100 "src/Parse/Lexer.lex"
addComment(yyextra, yytext);
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 101 "src/Parse/Lexer.lex"
addComment(yyextra, yytext);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 103 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Exclamation, yytext);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 104 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Percent, yytext);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 105 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Tilde, yytext);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 106 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Carot, yytext);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Amperstand, yytext);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bar, yytext);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Asterisk, yytext);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 110 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Slash, yytext);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 111 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Plus, yytext);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dash, yytext);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 113 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Equal, yytext);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftParen, yytext);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightParen, yytext);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftBracket, yytext);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 117 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightBracket, yytext);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 118 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftBrace, yytext);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 119 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightBrace, yytext);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 120 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftAngle, yytext);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 121 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightAngle, yytext);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 122 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Question, yytext);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 123 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Colon, yytext);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 124 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dot, yytext);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 125 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Comma, yytext);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 126 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Semicolon, yytext);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 128 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAnd, yytext);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 129 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOr, yytext);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 130 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXor, yytext);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 131 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftShift, yytext);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 132 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightShift, yytext);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 133 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::EqualCompare, yytext);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 134 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NotEqual, yytext);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 135 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LessEual, yytext);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 136 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::GreaterEqual, yytext);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 137 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::XorEqual, yytext);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 138 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AndEqual, yytext);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 139 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::OrEqual, yytext);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 140 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MultiplyEqual, yytext);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 141 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DivideEqual, yytext);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 142 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PlusEqual, yytext);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 143 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MinusEqual, yytext);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAndEqual, yytext);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOrEqual, yytext);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXorEqual, yytext);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolLeftShiftEqual, yytext);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolRightShiftEqual, yytext);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 151 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Const, yytext);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 152 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Centroid, yytext);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 153 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Break, yytext);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Continue, yytext);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Do, yytext);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Else, yytext);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 157 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::For, yytext);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 158 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::If, yytext);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 159 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Discard, yytext);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 160 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Return, yytext);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 161 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Switch, yytext);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 162 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Case, yytext);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 163 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Default, yytext);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 164 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Uniform, yytext);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 165 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Patch, yytext);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 166 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sample, yytext);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 167 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Buffer, yytext);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 168 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Shared, yytext);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 169 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Coherent, yytext);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 170 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Volatile, yytext);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 171 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Restrict, yytext);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 172 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ReadOnly, yytext);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 173 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::WriteOnly, yytext);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 174 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NonPerspective, yytext);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 175 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Flat, yytext);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 176 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Smooth, yytext);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 177 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Struct, yytext);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 178 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Void, yytext);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 179 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::While, yytext);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 181 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bool, yytext);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 182 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Float, yytext);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 183 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Double, yytext);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 184 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Int, yytext);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 185 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Uint, yytext);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 186 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec2, yytext);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 187 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec3, yytext);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 188 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec4, yytext);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 189 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec2, yytext);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 190 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec3, yytext);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 191 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec4, yytext);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 192 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec2, yytext);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 193 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec3, yytext);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 194 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec4, yytext);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 195 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec2, yytext);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 196 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec3, yytext);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 197 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec4, yytext);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 198 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec2, yytext);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 199 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec3, yytext);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 200 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec4, yytext);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 201 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2, yytext);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 202 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3, yytext);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 203 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4, yytext);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 204 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2, yytext);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 205 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3, yytext);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 206 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4, yytext);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 207 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x2, yytext);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 208 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x3, yytext);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 209 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x4, yytext);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 210 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x2, yytext);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 211 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x3, yytext);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 212 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x4, yytext);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 213 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x2, yytext);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 214 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x3, yytext);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 215 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x4, yytext);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 216 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x2, yytext);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 217 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x3, yytext);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 218 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x4, yytext);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 219 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x2, yytext);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 220 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x3, yytext);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 221 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x4, yytext);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 222 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x2, yytext);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 223 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x3, yytext);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 224 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x4, yytext);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 225 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1D, yytext);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 226 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2D, yytext);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 227 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler3D, yytext);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 228 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCube, yytext);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 229 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DShadow, yytext);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 230 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DShadow, yytext);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 231 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeShadow, yytext);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 232 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArray, yytext);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 233 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArray, yytext);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 234 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArrayShadow, yytext);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 235 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArrayShadow, yytext);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 236 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1D, yytext);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 237 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2D, yytext);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 238 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler3D, yytext);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 239 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCube, yytext);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 240 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1DArray, yytext);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 241 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DArray, yytext);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 242 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1D, yytext);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 243 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2D, yytext);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 244 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler3D, yytext);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 245 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCube, yytext);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 246 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1DArray, yytext);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 247 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DArray, yytext);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 248 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerBuffer, yytext);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 249 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerBuffer, yytext);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 250 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerBuffer, yytext);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 251 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArray, yytext);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 252 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArrayShadow, yytext);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 253 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCubeArray, yytext);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 254 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCubeArray, yytext);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 255 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMS, yytext);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 256 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMS, yytext);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 257 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMS, yytext);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 258 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMSArray, yytext);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 259 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMSArray, yytext);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 260 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMSArray, yytext);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 261 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1D, yytext);
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 262 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1D, yytext);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 263 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1D, yytext);
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 264 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2D, yytext);
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 265 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2D, yytext);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 266 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2D, yytext);
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 267 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image3D, yytext);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 268 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage3D, yytext);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 269 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage3D, yytext);
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 270 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCube, yytext);
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 271 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCube, yytext);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 272 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCube, yytext);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 273 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageBuffer, yytext);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 274 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageBuffer, yytext);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 275 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageBuffer, yytext);
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 276 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1DArray, yytext);
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 277 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1DArray, yytext);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 278 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1DArray, yytext);
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 279 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DArray, yytext);
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 280 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DArray, yytext);
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 281 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DArray, yytext);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 282 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCubeArray, yytext);
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 283 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCubeArray, yytext);
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 284 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCubeArray, yytext);
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 285 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMS, yytext);
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 286 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMS, yytext);
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 287 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMS, yytext);
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 288 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMSArray, yytext);
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 289 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMSArray, yytext);
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 290 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMSArray, yytext);
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 291 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AtomicUint, yytext);
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 293 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Hash, yytext);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 294 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Include, yytext); BEGIN(INCLUDE);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 295 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Pragma, yytext);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 296 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Define, yytext);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 297 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifdef, yytext);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 298 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifndef, yytext);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 299 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocIf, yytext);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 300 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElif, yytext);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 301 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElse, yytext);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 302 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocEndif, yytext);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 303 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IncludePath, yytext); BEGIN(INITIAL);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 305 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 306 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 307 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 308 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 309 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::FloatLiteral, yytext);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 310 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DoubleLiteral, yytext);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 312 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Identifier, yytext);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 314 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Invalid, yytext);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 316 "src/Parse/Lexer.lex"
ECHO;
	YY_BREAK
#line 2396 "src/Parse/Lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 746 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 746 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 745);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 316 "src/Parse/Lexer.lex"



namespace msl
{

std::vector<Token> Lexer::tokenize(const std::string& input)
{
	LexerInfo info(input);
	yyscan_t scanner;
	if (yylex_init_extra(&info,&scanner) != 0)
		return std::vector<Token>();

	yylex(scanner);
	yylex_destroy(scanner);
	return std::move(info.tokens);
}

} // msl

