#line 2 "src/Parse/Lexer.cpp"
#line 2 "src/Parse/Lexer.lex"
/*
 * Copyright 2016 Aaron Barany
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <MSL/Frontend/Parse/Lexer.h>
#include <algorithm>
#include <cstring>

#if MSL_GCC || MSL_CLANG
#pragma GCC diagnostic ignored "-Wunused-function"
#endif

#if MSL_WINDOWS
#define YY_NO_UNISTD_H
#include <io.h>
#endif




#line 36 "src/Parse/Lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mslrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mslrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void mslrestart (FILE *input_file ,yyscan_t yyscanner );
void msl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void msl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void msl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void mslpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void mslpop_buffer_state (yyscan_t yyscanner );

static void mslensure_buffer_stack (yyscan_t yyscanner );
static void msl_load_buffer_state (yyscan_t yyscanner );
static void msl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER msl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE msl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE msl_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *mslalloc (yy_size_t ,yyscan_t yyscanner );
void *mslrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void mslfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer msl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mslensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mslensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 211
#define YY_END_OF_BUFFER 212
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[747] =
    {   0,
        0,    0,    0,    0,  212,  210,    1,    2,  211,    6,
      191,    7,   10,   17,   18,   12,   14,   28,   15,   27,
       13,  203,  204,   26,   29,   23,   16,   24,   25,  210,
      210,  210,  210,   19,  210,   20,    9,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,   21,   11,   22,    8,  210,   23,  210,    1,
        2,   36,    0,  201,  210,  210,  210,  210,   30,   40,
       42,   44,   45,  207,  210,  207,  210,  210,  210,    4,
       43,  207,  205,  210,  203,  206,  204,  204,   33,   37,
       35,   38,   34,  209,  209,  209,  209,  209,  209,  209,

        0,   39,   32,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,   55,  209,  209,  209,
      209,  209,   58,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,   41,   31,  210,    0,  202,  210,    0,   33,
       37,  202,    0,    0,    0,    0,  210,  210,  210,  197,
      210,  210,   46,  210,  207,  208,  210,    0,  210,    4,
        4,    4,  205,  206,  206,   49,   50,  209,  209,  209,
      209,  209,  209,    3,   48,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      209,  209,  209,  209,  209,   57,  209,   83,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,   47,
      202,  202,   49,    0,    0,    0,  197,    0,    0,  210,
      210,  210,  210,  210,  210,  210,  210,    0,    5,    4,
        4,  209,  209,  209,  209,  209,  209,  209,  209,   80,
      209,  209,  209,   62,   95,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,   56,   75,  209,  209,  209,
      100,  101,  102,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,   84,  209,  209,   94,   96,   78,

      209,  209,  209,    0,    0,    0,    0,    0,    0,    0,
        0,  210,  198,  199,  210,  210,  210,  210,  210,    5,
      209,  209,  209,  209,  209,  209,  209,   86,   53,  209,
       85,   87,  209,  209,   51,  209,   98,  209,  209,  103,
      104,  105,  209,   97,   99,   81,   89,   88,   90,  209,
      209,  209,  209,   65,  209,  209,  209,  209,  209,  209,
      209,  209,   92,  209,   91,   93,  209,   79,  209,    0,
      198,  199,    0,    0,    0,    0,    0,  210,  200,  195,
      210,  210,  210,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,   67,  209,  209,  209,  209,  209,

      209,  209,  209,   82,  106,  107,  108,  109,  110,  111,
      112,  113,  114,  209,  209,  209,   60,   66,   68,   76,
       77,   61,  209,  209,  209,    0,  200,  195,    0,    0,
        0,  194,  196,  210,  193,  209,  209,  209,  209,  209,
      209,  160,  163,  166,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,   63,   59,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  209,  209,
      209,   64,  209,  209,  194,  196,    0,  193,  192,  161,
      164,  167,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  162,  165,  168,  209,  209,

      209,  209,   52,   69,   54,  209,   72,   71,   70,  209,
      192,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  184,  209,  169,  124,  125,  126,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,   73,  209,  209,  185,  209,  170,  135,
      136,  137,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  186,  209,
      171,  141,  142,  143,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  172,  209,  209,  209,  209,  154,  209,  209,  127,

      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      190,  209,  209,  209,  209,  173,  209,  209,  209,  155,
      209,  138,  175,  178,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  174,  209,  209,
      209,  156,  209,  144,  209,  176,  179,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  147,  209,  209,  177,  180,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  148,
      209,  187,  181,  131,  209,  132,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  149,  209,   74,  188,  182,

      139,  140,  209,  209,  209,  128,  209,  209,  129,  209,
      209,  189,  183,  145,  146,  209,  209,  209,  209,  209,
      209,  157,  150,  209,  209,  209,  158,  152,  209,  209,
      209,  130,  159,  153,  209,  209,  209,  209,  209,  209,
      133,  134,  209,  209,  151,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,    1,   31,   32,   33,   34,   35,   36,
       37,   37,   38,   37,   37,   39,   40,   37,   37,   37,
       37,   37,   41,   37,   42,   37,   37,   43,   37,   37,
       44,   45,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   37,   58,   59,   60,   61,
       62,   63,   37,   64,   65,   66,   67,   68,   69,   70,
       71,   37,   72,   73,   74,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[757] =
    {   0,
        0,    0,   70,   71,  621,    0,  617, 3187,  615,  589,
       76,    0,   71,    0,    0,  595,  571,    0,  570,   66,
       75,  124,   88,    0,    0,   54,  569,   57,    0,  194,
      269,   75,   55,    0,  589,    0,   67,   93,  111,  123,
      174,  122,  127,  192,  188,  136,  213,  175,  252,  279,
      293,  268,    0,   63,    0,    0,  152,  298,    0,  583,
     3187,    0,  309,    0,  528,   29,   96,  508,  540,    0,
        0,    0,    0,  315,  358,    0,  527,  503,  253,  243,
        0,  349,  371,  396,    0,  421,  409,    0,  506,    0,
        0,    0,  499,  297,  345,  409,  440,  363,  408,  441,

      518,    0,  483,  423,  424,  453,  454,  458,  464,  465,
      478,  485,  490,  494,  495,  515,  499,  520,  511,  529,
      524,  541,  536,  545,  549,  554,  562,  566,  575,  574,
      587,  589,  601,  607,  615,  616,  614,  625,  621,  632,
      641,  642,    0,  476,  186,  492,  257,  395,  468,  407,
      518,  540,  440,   62,  210,  423,  432,   61,  428,   80,
      416,  417,    0,  685,  692,    0,  684,  448,  715,  361,
      414,  506,    0,    0,    0,    0,    0,  684,  682,  683,
      696,  698,  688, 3187,    0,  711,  712,  716,  724,  723,
      728,  729,  753,  740,  749,  754,  766,  767,  774,  758,

      790,  791,  792,  797,  798,  805,  815,  821,  823,  847,
      832,  838,  839,  846,  855,  856,  863,  864,  870,  872,
      880,  876,  887,  905,  913,  907,  911,  917,  912,    0,
      442,  408,  604,  380,  193,  374,  132,  371,  372,  353,
      353,  347,  341,  343,  323,  311,  309,   77,  977,  300,
      124,  928,  944,  946,  952,  953,  954,  959,  977,  964,
      982,  988, 1005,  990,  992,  994, 1006, 1015, 1019, 1030,
     1026, 1031, 1062, 1036, 1067, 1047, 1056, 1060, 1071, 1091,
     1076, 1077, 1083, 1092, 1100, 1101, 1116, 1117, 1124, 1126,
     1128, 1144, 1149, 1151, 1133, 1137, 1176, 1164, 1165, 1169,

     1174, 1175, 1185,  303,  305,  305,  299,  299,  297,  289,
      282,  262,    0,    0,  268,  265,  252,  225,  231,  277,
     1189, 1203, 1227, 1213, 1214, 1212, 1237, 1220, 1238, 1243,
     1244, 1245, 1251, 1255, 1261, 1268, 1276, 1278, 1282, 1284,
     1289, 1293, 1302, 1307, 1309, 1319, 1320, 1327, 1332, 1355,
     1361, 1368, 1353, 1359, 1363, 1369, 1370, 1384, 1394, 1395,
     1400, 1401, 1402, 1407, 1409, 1415, 1427, 1432, 1436,  226,
     3187, 3187,  218,  195,  191,  165,  158,  164,    0,    0,
      160,  145,  131, 1461, 1447, 1445, 1463, 1472, 1470, 1471,
     1476, 1514, 1488, 1501, 1484, 1512, 1516, 1518, 1522, 1527,

     1569, 1573, 1577, 1526, 1532, 1542, 1543, 1563, 1567, 1568,
     1575, 1579, 1581, 1583, 1593, 1604, 1606, 1608, 1613, 1618,
     1619, 1620, 1624, 1629, 1631,  117, 3187, 3187,   97,   86,
       88,    0,    0,   69,    0, 1649, 1659, 1660, 1636, 1644,
     1661, 1674, 1676, 1672, 1685, 1690, 1722, 1710, 1715, 1723,
     1692, 1724, 1728, 1730, 1686, 1735, 1736, 1740, 1761, 1765,
     1766, 1767, 1771, 1772, 1773, 1777, 1778, 1779, 1802, 1803,
     1804, 1808, 1813, 1812, 3187, 3187,   64, 3187,    0, 1817,
     1838, 1842, 1843, 1844, 1867, 1851, 1852, 1868, 1869, 1879,
     1880, 1892, 1897, 1881, 1896, 1905, 1913, 1904, 1917, 1909,

     1947, 1934, 1940, 1945, 1946, 1951, 1952, 1957, 1958, 1972,
     3187, 1978, 1984, 1985, 1986, 1996, 1995, 2013, 2019, 2020,
     2021, 2025, 2026, 1990, 2031, 2037, 2061, 2063, 2033, 2057,
     2068, 2067, 2069, 2074, 2078, 2084, 2101, 2102, 2107, 2108,
     2109, 2113, 2119, 2117, 2118, 2125, 2149, 2143, 2157, 2161,
     2166, 2145, 2170, 2172, 2174, 2178, 2187, 2195, 2201, 2202,
     2207, 2208, 2215, 2232, 2233, 2216, 2239, 2240, 2248, 2253,
     2264, 2276, 2278, 2260, 2274, 2285, 2284, 2289, 2291, 2305,
     2315, 2320, 2321, 2322, 2328, 2329, 2333, 2353, 2357, 2358,
     2359, 2364, 2366, 2371, 2373, 2396, 2401, 2402, 2406, 2407,

     2408, 2414, 2412, 2432, 2437, 2439, 2444, 2445, 2446, 2457,
     2452, 2473, 2453, 2477, 2478, 2484, 2485, 2490, 2491, 2505,
     2515, 2521, 2519, 2520, 2525, 2529, 2535, 2531, 2549, 2555,
     2556, 2561, 2562, 2572, 2563, 2573, 2579, 2586, 2597, 2599,
     2604, 2610, 2609, 2634, 2611, 2617, 2635, 2640, 2642, 2644,
     2649, 2658, 2665, 2667, 2672, 2673, 2674, 2678, 2679, 2708,
     2713, 2714, 2718, 2720, 2719, 2724, 2745, 2747, 2749, 2751,
     2761, 2763, 2772, 2777, 2778, 2779, 2788, 2793, 2802, 2803,
     2813, 2814, 2819, 2820, 2827, 2829, 2834, 2840, 2844, 2850,
     2854, 2860, 2867, 2874, 2875, 2880, 2888, 2881, 2895, 2905,

     2906, 2912, 2913, 2918, 2919, 2920, 2930, 2936, 2943, 2944,
     2950, 2951, 2956, 2957, 2961, 2981, 2982, 2967, 2968, 2988,
     2994, 2995, 3006, 3008, 3012, 3018, 3019, 3020, 3024, 3033,
     3026, 3032, 3049, 3050, 3056, 3057, 3062, 3061, 3063, 3074,
     3067, 3087, 3095, 3099, 3100, 3187,   99,   78, 3168, 3170,
     3172, 3175, 3177, 3179, 3181, 3184
    } ;

static yyconst flex_int16_t yy_def[757] =
    {   0,
      746,    1,    1,    1,  746,  747,  746,  746,  746,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  748,
      748,   31,   31,  747,  747,  747,  747,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,  747,  747,  747,  747,  749,  750,  747,  746,
      746,  747,  746,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  751,  752,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,   31,   31,   31,   31,   31,   31,   31,

      746,  747,  747,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,  747,  747,  749,  753,  749,  750,  754,  750,
      750,  750,  746,  746,  746,  746,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  751,  755,  751,  752,
      756,  752,  747,   86,  747,  747,  747,   31,   31,   31,
       31,   31,   31,  746,  747,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,  747,
      753,  754,  750,  746,  746,  746,  746,  746,  746,  747,
      747,  747,  747,  747,  747,  747,  747,  755,  751,  756,
      756,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,  746,  746,  746,  746,  746,  746,  746,
      746,  747,  747,  747,  747,  747,  747,  747,  747,  755,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,  746,
      746,  746,  746,  746,  746,  746,  746,  747,  747,  747,
      747,  747,  747,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,  746,  746,  746,  746,  746,
      746,  747,  747,  747,  747,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,  746,  746,  746,  746,  747,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
      746,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746
    } ;

static yyconst flex_uint16_t yy_nxt[3263] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   24,   25,   26,   27,   28,   29,
       30,   30,   30,   30,   30,   30,   30,   31,   30,   30,
       32,   33,   30,   34,   35,   36,   37,   30,   38,   39,
       40,   41,   42,   43,   30,   30,   44,   30,   30,   45,
       46,   30,   47,   48,   49,   30,   50,   51,   52,   30,
       30,   53,   54,   55,   56,   57,   57,   63,   94,   69,
       89,   90,   64,   74,   92,   93,   79,  158,  248,  159,
      143,   80,   99,  320,  102,  100,   58,   58,   70,   59,

       75,   76,   81,   82,   77,   87,   87,   87,   87,   87,
       87,   87,   94,  103,   94,   94,  511,  241,   75,   76,
      235,  479,  236,   98,   78,  242,  171,   65,   66,   88,
       94,  244,   67,   94,   94,  144,  478,  477,   68,   82,
      245,   83,   83,   83,   83,   83,   83,   84,   94,  160,
      476,   94,   94,  146,   88,  146,  161,  147,  104,   94,
       94,  105,   94,   94,   94,   85,   86,   94,  250,  475,
       94,  110,  106,   94,  107,  111,   94,  108,  109,  435,
      119,   94,   94,  308,  112,  120,   94,  146,  121,  146,
       85,  147,  309,   86,   59,   94,  434,  127,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   94,   94,  433,   94,   94,  432,  431,   59,   59,
       59,   59,   59,   59,  113,   94,  114,  129,   94,   94,
      115,  430,   94,  116,   94,  117,  126,   59,   59,   59,
       59,  118,  122,  429,  171,  123,  171,   94,  428,  305,
       94,   94,  124,   94,  168,  168,  168,  306,  146,  125,
      146,  128,  147,  237,  169,   59,   59,   59,   59,   59,
      238,  427,   94,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  426,  172,  248,   94,
      383,  382,   94,   59,   59,   59,   59,   59,   59,  149,

      130,  149,  171,  251,  381,   94,   95,  131,   94,   96,
       63,  132,   59,   59,   59,   59,   94,  133,  380,   94,
      134,  379,  378,  141,  150,  151,  152,   94,   97,  135,
       94,  142,   74,   94,   94,  136,  377,   94,   94,  137,
       59,   59,   59,   59,  250,  139,  138,  376,  375,   75,
       76,  374,   94,   77,  140,  373,   94,  372,  371,  370,
      153,  154,  171,  319,  171,  155,   74,   75,   76,  318,
      164,  156,  164,   78,  317,  165,  165,  165,  165,  165,
      165,  165,   94,   75,   76,   94,   82,   77,   83,   83,
       83,   83,   83,   83,   84,  316,  149,  315,  149,  314,

       94,   75,   76,   94,  178,  172,  313,   78,  149,  312,
      149,   82,  173,   84,   84,   84,   84,   84,   84,   84,
      311,  310,  181,  152,   82,  307,   87,   87,   87,   87,
       87,   87,   87,  304,  233,  152,  232,  173,  174,  174,
      174,  174,  174,  174,  174,   94,   94,  231,   94,   94,
       88,  174,  174,  174,  174,  174,  174,  179,  250,  248,
       94,   94,  175,   94,   94,  247,  246,  182,   94,  174,
      174,  174,  174,  174,  174,   88,  187,   94,   94,  243,
       94,   94,   94,   94,  186,  240,  239,  175,  180,  183,
       94,   94,  234,   94,   94,   94,  232,  231,   94,   94,

       94,   94,   94,  230,   94,   94,  189,  171,  171,  251,
      185,  190,   94,   94,  188,   94,  191,   94,   94,  149,
      184,  149,   94,   94,   94,   94,  177,   94,  193,  192,
       94,   94,   94,  176,   94,   94,   94,   94,  194,   94,
      195,  149,  197,  149,   94,  196,  152,  198,   94,   94,
      172,   94,   94,   94,   94,   94,  166,   94,   94,  199,
       94,   94,  166,  200,   94,  201,   94,  163,  152,   94,
       94,  162,  202,   94,   94,  203,   94,  204,   94,   94,
      157,   94,   94,   94,   60,   94,   94,  206,   94,   94,
      205,   94,  101,  207,   94,   94,   91,   73,   72,   94,

       94,  209,   94,   94,   94,  149,   94,  149,   94,   71,
      208,   94,   94,   94,   94,   94,   62,   61,   60,  210,
      746,   94,  211,  213,   94,   94,   94,   94,  746,   94,
      746,  212,  152,  216,   94,  217,  746,  746,   94,  214,
      215,   94,  746,  746,   94,  746,   94,   94,   94,  746,
      218,   94,   94,   94,   94,   94,   94,  746,   94,  746,
       94,   94,   94,  220,  219,   94,   94,  221,  746,   94,
      223,  225,   94,   94,   94,   94,  222,  224,   94,   94,
       94,   94,   94,  746,   94,  168,  168,  168,  226,  746,
      227,   94,  746,  746,  746,  169,  746,  228,  229,  746,

       94,   94,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  168,  168,  168,   94,
       94,   94,   94,   94,   94,   94,  169,   76,   94,  746,
       77,  249,  252,   94,  746,   94,   94,  254,   94,  746,
      746,  253,   94,   94,  746,   76,  256,  257,   94,   94,
       78,   94,   94,   94,  746,   94,   94,   94,  255,  746,
       94,   94,  259,   94,   94,   94,   94,  746,   94,   94,
      258,   94,  261,  265,  260,   94,  262,   94,  263,  746,
       94,  264,   94,   94,  746,  746,   94,   94,   94,   94,
       94,   94,  746,   94,   94,   94,  746,  746,   94,   94,

      746,  267,  746,   94,   94,  266,   94,   94,   94,  746,
      746,   94,   94,   94,   94,  271,  270,   94,  268,  269,
      746,  746,  746,  273,  272,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,  746,   94,   94,  274,
      746,  275,   94,  746,  276,   94,  278,  746,  746,   94,
       94,   94,   94,  746,  746,   94,   94,   94,   94,  746,
       94,   94,  277,   94,   94,  279,  281,  282,  283,   94,
      746,  746,   94,  280,   94,   94,   94,  746,   94,   94,
       94,  746,   94,   94,   94,  746,   94,   94,  285,  746,
      286,   94,   94,   94,  284,   94,   94,   94,   94,  746,

       94,   94,  746,   94,   94,   94,   94,   94,  746,   94,
       94,  287,   94,   94,   94,   94,   94,   94,  289,  746,
       94,  288,   94,   94,   94,  291,  290,   94,  746,   94,
      294,   94,  298,  746,  299,   94,  292,  293,  746,   94,
      296,  295,   94,  746,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  297,  746,   94,  300,  301,
      746,  746,  746,  746,   94,   94,   94,  746,   94,  746,
       94,   94,   94,  746,  746,  302,   94,  303,  168,  168,
      168,   94,  321,   94,   94,  746,   94,   94,  169,   94,
       94,   94,   94,   94,   94,  746,   94,  328,  323,   94,

      746,   94,  746,   94,   94,   94,  322,  325,  746,  746,
      324,   94,   94,   94,   94,  327,  326,   94,   94,   94,
      746,  746,   94,   94,  331,   94,  332,   94,   94,   94,
       94,   94,   94,  746,   94,  746,   94,  746,  746,  329,
      330,   94,   94,   94,  746,   94,   94,   94,  746,   94,
      337,   94,   94,   94,  746,   94,   94,  333,  746,   94,
      746,  746,  746,   94,   94,   94,   94,   94,   94,  334,
       94,   94,  746,   94,   94,  336,   94,  746,   94,  339,
      335,  340,  341,  342,   94,   94,  344,   94,  345,   94,
       94,  347,  338,   94,  343,   94,   94,   94,  746,   94,

       94,  746,   94,  746,   94,  746,   94,   94,   94,  746,
      348,   94,  349,   94,   94,   94,   94,   94,  746,   94,
       94,   94,  746,   94,  746,  346,   94,  746,   94,   94,
       94,   94,   94,  746,  746,   94,   94,   94,   94,  746,
       94,   94,   94,  746,  353,  350,  351,  746,  746,  746,
       94,   94,  352,   94,   94,  354,   94,   94,  746,   94,
       94,   94,  355,   94,   94,   94,   94,  746,   94,  746,
       94,  363,  746,   94,   94,   94,   94,   94,  359,  356,
      357,   94,  358,   94,   94,   94,   94,   94,   94,   94,
      746,   94,   94,  360,  361,  365,   94,  366,  364,  362,

      746,   94,   94,   94,   94,   94,   94,  746,   94,   94,
       94,   94,   94,   94,   94,   94,   94,  746,  746,  746,
      746,  746,   94,   94,   94,   94,   94,  368,   94,   94,
      746,  746,  746,   94,   94,   94,  746,  369,  746,  367,
       94,  384,  746,   94,   94,  386,  387,  388,   94,   94,
       94,   94,   94,   94,   94,  746,  746,   94,  389,  390,
       94,  385,   94,  746,   94,  391,  392,   94,  746,  746,
      393,   94,   94,   94,   94,   94,  746,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,  394,   94,  746,
      746,   94,   94,  746,  746,   94,   94,   94,   94,  746,

      746,   94,   94,   94,   94,   94,  395,  397,   94,  746,
       94,  746,  396,   94,   94,   94,   94,  746,   94,   94,
       94,   94,   94,  746,   94,  746,   94,   94,  398,   94,
       94,  746,  746,   94,  746,   94,  399,   94,  746,   94,
      746,   94,   94,   94,   94,  400,   94,   94,   94,   94,
      746,  746,   94,  401,  404,  746,   94,   94,  402,   94,
       94,   94,  403,  746,   94,  746,   94,   94,   94,   94,
      746,  746,   94,  746,  405,  406,  407,  746,   94,   94,
      408,  409,  410,  746,  746,  746,   94,  411,  412,  413,
       94,   94,   94,   94,  746,   94,   94,  746,   94,   94,

       94,   94,  746,   94,  746,   94,   94,   94,   94,   94,
       94,  746,   94,  746,   94,  746,  414,  746,   94,  746,
       94,   94,   94,  415,   94,  416,  746,   94,   94,   94,
      417,   94,   94,  746,   94,   94,  418,   94,   94,   94,
       94,   94,   94,   94,   94,  419,   94,   94,  746,   94,
      420,  746,   94,   94,   94,   94,  422,  746,  746,   94,
       94,   94,  746,  746,   94,  421,   94,   94,   94,   94,
      423,  746,   94,   94,   94,  746,   94,  746,  442,  436,
      437,  438,   94,  424,   94,   94,   94,   94,  746,  746,
      746,   94,  439,  440,  746,   94,  443,  425,   94,  441,

       94,   94,  746,   94,   94,  444,   94,   94,   94,   94,
       94,   94,   94,   94,  746,  746,   94,  746,  746,  746,
       94,   94,   94,  746,   94,   94,  746,  746,   94,   94,
       94,   94,  448,  449,  450,   94,  445,  446,   94,  447,
      453,   94,  746,   94,  746,  451,  452,   94,  454,   94,
      746,   94,   94,   94,   94,   94,   94,  746,   94,   94,
       94,  746,   94,   94,   94,  746,   94,   94,  455,   94,
      746,   94,   94,   94,  746,   94,  456,   94,  459,   94,
       94,   94,   94,   94,  457,   94,   94,  458,  460,  461,
      462,   94,  463,  464,  465,  746,  466,  467,  468,  746,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,  746,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  746,  746,   94,   94,   94,  746,
       94,  746,   94,   94,   94,  746,   94,  746,   94,  746,
       94,   94,   94,   94,   94,   94,   94,  469,   94,  746,
       94,  470,   94,   94,  471,   94,   94,   94,   94,   94,
       94,   94,  746,   94,   94,   94,   94,   94,   94,   94,
      746,   94,   94,   94,  746,  746,   94,   94,   94,   94,
      746,   94,  480,  472,   94,  746,   94,  473,   94,   94,
       94,  474,  481,  482,  746,   94,   94,   94,   94,   94,

       94,   94,  483,   94,  486,  746,  487,  746,   94,   94,
      484,   94,   94,   94,   94,  488,   94,  746,   94,   94,
       94,  746,   94,   94,  485,   94,   94,   94,  746,   94,
       94,   94,   94,   94,  746,   94,  746,  503,  489,  490,
      491,  492,  493,  496,   94,   94,  746,   94,  497,   94,
       94,   94,   94,  494,  495,   94,  498,  746,  499,   94,
       94,   94,   94,   94,   94,   94,  746,   94,   94,   94,
       94,  746,   94,   94,   94,   94,   94,   94,  746,  746,
       94,   94,   94,   94,  746,  746,  746,   94,  505,   94,
      500,  501,  746,  746,   94,   94,  502,  746,   94,   94,

      504,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,  746,  746,  746,   94,   94,   94,  746,  746,  746,
       94,   94,   94,  746,  746,  746,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,  746,  512,   94,   94,
       94,  746,   94,   94,   94,  746,  746,   94,  746,  746,
      746,   94,   94,   94,  506,  509,  746,   94,  513,  508,
      510,   94,   94,  507,  746,   94,   94,  514,   94,   94,
       94,   94,   94,   94,   94,  517,  518,  519,   94,   94,
      746,   94,   94,  516,  746,  746,  515,   94,  520,  521,

      746,   94,   94,   94,   94,   94,   94,   94,  524,   94,
       94,   94,  746,  527,  522,  523,   94,   94,   94,   94,
       94,   94,  525,  746,  746,  528,   94,   94,   94,   94,
      529,  526,   94,   94,   94,  532,   94,   94,   94,   94,
       94,   94,   94,  533,   94,   94,   94,  530,  746,   94,
       94,   94,  534,   94,   94,   94,   94,   94,  536,  746,
      746,  746,  531,   94,   94,  537,  538,  539,   94,  746,
      535,   94,   94,  746,   94,  746,   94,   94,  540,  541,
       94,  746,   94,   94,   94,   94,   94,   94,   94,   94,
      542,   94,   94,   94,   94,   94,  746,   94,   94,   94,

      746,  746,  746,  543,   94,   94,   94,  746,  746,   94,
       94,   94,   94,  746,  746,   94,   94,   94,   94,  746,
      557,   94,   94,   94,   94,  547,   94,   94,  550,  746,
       94,   94,   94,   94,  746,   94,   94,   94,  746,  548,
      746,  545,  544,   94,   94,   94,  551,  546,  549,   94,
       94,  746,  552,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  746,   94,   94,  559,   94,  746,
       94,   94,   94,   94,   94,  746,  746,   94,   94,   94,
       94,  746,  746,  558,   94,   94,  553,  554,  555,  556,
       94,  560,   94,  562,   94,  746,   94,   94,   94,  746,

       94,  561,  563,  564,   94,   94,   94,   94,   94,   94,
      565,   94,  746,  746,  569,   94,   94,  566,   94,  746,
       94,   94,   94,  746,   94,  746,   94,   94,   94,  746,
      567,  570,  568,   94,  572,  573,  571,   94,   94,   94,
      574,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,  746,  746,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  746,  746,   94,   94,   94,   94,  578,
      746,  746,   94,  577,  575,  576,   94,   94,   94,  581,
       94,  579,   94,   94,   94,   94,   94,  583,  580,   94,
      746,  584,  746,  746,   94,  582,  585,   94,   94,  746,

      746,   94,   94,   94,   94,  586,   94,   94,   94,   94,
       94,   94,   94,  746,   94,   94,   94,  746,   94,  746,
       94,  588,  589,  587,   94,   94,  590,   94,  746,   94,
      746,   94,   94,   94,  746,   94,  746,   94,   94,   94,
      746,   94,   94,  746,   94,   94,   94,   94,   94,  746,
      591,  746,   94,   94,   94,  597,   94,  746,  592,  746,
       94,   94,  595,  746,  593,  594,   94,   94,  600,   94,
       94,  596,   94,   94,   94,   94,   94,   94,  603,   94,
       94,  746,  746,  746,  746,   94,  599,  598,   94,  746,
       94,   94,   94,   94,  605,  746,  746,   94,   94,   94,

       94,   94,  601,  602,   94,  604,  606,   94,  607,  746,
      746,   94,   94,   94,   94,   94,   94,  608,   94,   94,
      746,   94,   94,   94,   94,   94,   94,  609,   94,   94,
      746,   94,  746,   94,  610,   94,  746,   94,  746,  613,
      746,  746,   94,   94,   94,   94,  746,  746,   94,  611,
       94,  746,   94,  614,  612,   94,  746,   94,   94,   94,
       94,   94,   94,  746,   94,   94,   94,  746,   94,  620,
       94,  746,  746,   94,   94,  746,  746,  746,  615,   94,
       94,   94,  746,  616,  617,  618,  621,   94,   94,  746,
       94,  619,   94,   94,   94,   94,   94,   94,   94,   94,

      746,   94,  746,   94,   94,  622,   94,  746,   94,  746,
       94,   94,   94,   94,  746,  746,   94,   94,   94,  746,
      746,  628,  625,   94,  746,   94,  746,  623,  624,  626,
       94,  630,   94,   94,  627,  746,   94,  633,   94,   94,
      746,   94,   94,   94,   94,   94,   94,  634,   94,   94,
      631,   94,   94,  746,   94,   94,  635,  746,  632,  629,
       94,   94,  636,  746,  746,   94,   94,   94,  746,   94,
      746,   94,   94,   94,   94,  637,   94,   94,  746,   94,
      746,   94,   94,   94,   94,  642,   94,  746,  746,   94,
       94,   94,   94,   94,   94,  638,   94,   94,   94,  643,

      639,  746,  640,   94,   94,   94,  746,  641,  746,  644,
       94,   94,   94,   94,   94,   94,   94,   94,   94,  746,
      746,   94,   94,  646,   94,   94,  746,   94,   94,  645,
       94,   94,   94,  746,  746,  652,   94,   94,  746,  746,
      746,  648,   94,   94,   94,   94,  746,  647,  649,   94,
       94,  654,   94,  650,  651,   94,   94,   94,   94,   94,
       94,   94,   94,  746,   94,   94,   94,  653,   94,   94,
      746,   94,   94,  655,   94,   94,  746,  656,   94,   94,
       94,  746,  658,  657,   94,  746,   94,  746,   94,   94,
       94,  746,   94,   94,   94,   94,   94,  659,   94,   94,

       94,   94,   94,   94,  746,  746,  746,  661,   94,   94,
       94,  746,   94,   94,   94,   94,   94,  746,  660,   94,
       94,   94,   94,   94,  662,  663,   94,  664,  746,  746,
      746,   94,   94,  665,   94,  746,   94,   94,   94,   94,
      671,   94,  667,  666,   94,   94,   94,   94,   94,   94,
       94,   94,  746,  746,   94,  746,   94,   94,   94,  746,
      668,  672,  669,   94,  673,  746,  746,  670,   94,   94,
       94,   94,   94,  746,   94,   94,   94,   94,  674,   94,
       94,   94,   94,  746,   94,  746,   94,  746,  675,   94,
      676,  746,  677,   94,   94,   94,  746,  678,   94,   94,

      746,   94,   94,   94,   94,   94,  746,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
      746,  679,  746,  746,   94,  746,   94,  746,  680,  746,
      681,   94,   94,   94,  746,  746,  746,   94,   94,  685,
      746,  746,  682,  683,  684,   94,  746,  746,   94,  686,
       94,   94,  746,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  746,  746,   94,  746,  746,   94,  690,  746,
      746,  687,   94,   94,  688,  746,  746,   94,   94,   94,
      746,  689,   94,   94,   94,   94,   94,   94,   94,   94,
      746,   94,  746,  691,  746,  692,  746,  693,   94,  694,

       94,   94,  746,   94,   94,  746,   94,  746,   94,   94,
       94,  746,   94,  746,   94,   94,   94,   94,   94,   94,
       94,  746,   94,  746,  695,   94,  696,  746,   94,  698,
       94,   94,  746,   94,  746,  697,   94,   94,   94,   94,
       94,  746,   94,   94,  746,  746,  746,   94,  699,  700,
       94,   94,   94,   94,   94,  746,   94,   94,  701,   94,
      705,   94,   94,  702,   94,  703,   94,   94,  746,  707,
      746,   94,   94,   94,   94,  746,  704,   94,   94,   94,
       94,   94,  708,  746,   94,  746,   94,   94,   94,  746,
       94,   94,  710,   94,   94,  706,  746,   94,  746,   94,

       94,  711,  746,   94,   94,  746,  746,   94,  709,   94,
      746,   94,   94,   94,   94,   94,  746,   94,   94,   94,
       94,   94,  746,  746,  712,   94,   94,  746,   94,  746,
      713,  746,   94,   94,   94,   94,  746,  714,  716,   94,
       94,  746,   94,   94,  715,   94,   94,   94,  746,   94,
       94,  717,   94,   94,   94,   94,   94,   94,   94,   94,
       94,  718,  746,  746,   94,   94,  719,   94,  746,  746,
       94,   94,   94,   94,  720,  746,   94,   94,   94,   94,
       94,   94,  746,   94,   94,  721,  746,   94,   94,   94,
       94,   94,  746,   94,   94,   94,   94,   94,   94,  746,

      746,   94,   94,   94,   94,   94,  722,   94,   94,   94,
       94,  724,  746,  746,  723,   94,   94,  746,   94,   94,
       94,   94,   94,  746,  746,   94,   94,   94,   94,  725,
      726,   94,   94,  746,   94,   94,  729,  727,  728,  746,
       94,   94,  730,   94,  746,   94,  731,   94,   94,   94,
      746,  746,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  746,   94,   94,   94,   94,   94,  746,   94,
       94,   94,   94,   94,  746,  735,  732,   94,   94,   94,
      746,  737,  733,   94,  736,   94,   94,   94,  734,   94,
       94,   94,   94,   94,   94,  746,   94,   94,   94,   94,

       94,   94,   94,   94,   94,  746,  746,   94,   94,   94,
      740,   94,  746,  746,   94,   94,   94,  738,  739,  746,
       94,   94,   94,  746,   94,  743,   94,   94,  746,  741,
      746,  742,   94,   94,  746,   94,   94,   94,  746,   94,
       94,  746,  746,  746,  746,  746,   94,  746,  746,  746,
      746,  746,  746,  746,   94,  746,  744,  746,   94,   94,
      746,  746,  746,  746,  746,  746,  746,  745,  145,  145,
      148,  148,  167,  167,  167,  170,  170,  146,  146,  149,
      149,  168,  168,  168,  171,  171,    5,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746
    } ;

static yyconst flex_int16_t yy_chk[3263] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,   11,  748,   13,
       26,   26,   11,   20,   28,   28,   21,   66,  248,   66,
       54,   21,   33,  248,   37,   33,    3,    4,   13,  747,

       20,   20,   21,   23,   20,   23,   23,   23,   23,   23,
       23,   23,   32,   37,   33,   32,  477,  158,   20,   20,
      154,  434,  154,   32,   20,  158,  251,   11,   11,   23,
       38,  160,   11,   38,   32,   54,  431,  430,   11,   22,
      160,   22,   22,   22,   22,   22,   22,   22,   39,   67,
      429,   39,   38,   57,   23,   57,   67,   57,   38,   42,
       40,   39,   42,   40,   43,   22,   22,   43,  251,  426,
       39,   40,   39,   46,   39,   40,   46,   39,   39,  383,
       42,   42,   40,  237,   40,   43,   43,  145,   43,  145,
       22,  145,  237,   22,   30,   46,  382,   46,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   41,   48,  381,   41,   48,  378,  377,   30,   30,
       30,   30,   30,   30,   41,   45,   41,   48,   45,   44,
       41,  376,   44,   41,   48,   41,   45,   30,   30,   30,
       30,   41,   44,  375,   80,   44,   80,   45,  374,  235,
       47,   44,   44,   47,   79,   79,   79,  235,  147,   44,
      147,   47,  147,  155,   79,   30,   30,   30,   30,   31,
      155,  373,   47,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,  370,   80,  320,   49,
      319,  318,   49,   31,   31,   31,   31,   31,   31,   58,

       49,   58,  250,  250,  317,   52,   31,   49,   52,   31,
       63,   49,   31,   31,   31,   31,   50,   49,  316,   50,
       49,  315,  312,   52,   58,   58,   58,   52,   31,   50,
       51,   52,   74,   51,   94,   50,  311,   94,   50,   50,
       31,   31,   31,   31,  250,   51,   50,  310,  309,   74,
       74,  308,   51,   74,   51,  307,   94,  306,  305,  304,
       63,   63,  170,  247,  170,   63,   82,   74,   74,  246,
       75,   63,   75,   74,  245,   75,   75,   75,   75,   75,
       75,   75,   95,   82,   82,   95,   83,   82,   83,   83,
       83,   83,   83,   83,   83,  244,  148,  243,  148,  242,

       98,   82,   82,   98,   95,  170,  241,   82,  150,  240,
      150,   84,   83,   84,   84,   84,   84,   84,   84,   84,
      239,  238,   98,  148,   87,  236,   87,   87,   87,   87,
       87,   87,   87,  234,  150,  150,  232,   83,   86,   86,
       86,   86,   86,   86,   86,   99,   96,  231,   99,   96,
       87,   86,   86,   86,   86,   86,   86,   96,  171,  168,
      104,  105,   86,  104,  105,  162,  161,   99,   96,   86,
       86,   86,   86,   86,   86,   87,  105,   97,  100,  159,
       97,  100,  104,  105,  104,  157,  156,   86,   97,  100,
      106,  107,  153,  106,  107,  108,  149,  146,  108,   97,

      100,  109,  110,  144,  109,  110,  107,  172,  172,  172,
      103,  108,  106,  107,  106,  111,  109,  108,  111,  151,
      101,  151,  112,  109,  110,  112,   93,  113,  111,  110,
      113,  114,  115,   89,  114,  115,  117,  111,  111,  117,
      112,  152,  113,  152,  112,  112,  151,  114,  119,  113,
      172,  119,  116,  114,  115,  116,   78,  118,  117,  115,
      118,  121,   77,  116,  121,  117,  120,   69,  152,  120,
      119,   68,  118,  123,  116,  119,  123,  120,  122,  118,
       65,  122,  124,  121,   60,  124,  125,  121,  120,  125,
      120,  126,   35,  122,  126,  123,   27,   19,   17,  127,

      122,  125,  127,  128,  124,  233,  128,  233,  125,   16,
      124,  130,  129,  126,  130,  129,   10,    9,    7,  126,
        5,  127,  127,  129,  131,  128,  132,  131,    0,  132,
        0,  128,  233,  130,  129,  131,    0,    0,  133,  129,
      129,  133,    0,    0,  134,    0,  131,  134,  132,    0,
      132,  137,  135,  136,  137,  135,  136,    0,  139,    0,
      133,  139,  138,  134,  133,  138,  134,  135,    0,  140,
      137,  139,  140,  137,  135,  136,  136,  138,  141,  142,
      139,  141,  142,    0,  138,  167,  167,  167,  140,    0,
      140,  140,    0,    0,    0,  167,    0,  141,  142,    0,

      141,  142,  164,  164,  164,  164,  164,  164,  164,  165,
      165,  165,  165,  165,  165,  165,  169,  169,  169,  179,
      180,  178,  179,  180,  178,  183,  169,  165,  183,    0,
      165,  169,  178,  181,    0,  182,  181,  180,  182,    0,
        0,  179,  180,  178,    0,  165,  182,  183,  186,  187,
      165,  186,  187,  188,    0,  181,  188,  182,  181,    0,
      190,  189,  187,  190,  189,  191,  192,    0,  191,  192,
      186,  187,  189,  193,  188,  188,  190,  194,  191,    0,
      194,  192,  190,  189,    0,    0,  195,  191,  192,  195,
      193,  196,    0,  193,  196,  200,    0,    0,  200,  194,

        0,  195,    0,  197,  198,  194,  197,  198,  195,    0,
        0,  199,  193,  196,  199,  198,  197,  200,  196,  196,
        0,    0,    0,  200,  199,  197,  198,  201,  202,  203,
      201,  202,  203,  199,  204,  205,    0,  204,  205,  201,
        0,  202,  206,    0,  203,  206,  205,    0,    0,  201,
      202,  203,  207,    0,    0,  207,  204,  205,  208,    0,
      209,  208,  204,  209,  206,  207,  210,  210,  210,  211,
        0,    0,  211,  209,  207,  212,  213,    0,  212,  213,
      208,    0,  209,  214,  210,    0,  214,  210,  212,    0,
      213,  211,  215,  216,  211,  215,  216,  212,  213,    0,

      217,  218,    0,  217,  218,  214,  210,  219,    0,  220,
      219,  214,  220,  222,  215,  216,  222,  221,  216,    0,
      221,  215,  217,  218,  223,  218,  217,  223,    0,  219,
      221,  220,  225,    0,  225,  222,  219,  220,    0,  221,
      223,  222,  224,    0,  226,  224,  223,  226,  227,  229,
      225,  227,  229,  225,  228,  224,    0,  228,  226,  227,
        0,    0,    0,    0,  224,  252,  226,    0,  252,    0,
      227,  229,  225,    0,    0,  228,  228,  229,  249,  249,
      249,  253,  252,  254,  253,    0,  254,  252,  249,  255,
      256,  257,  255,  256,  257,    0,  258,  259,  254,  258,

        0,  260,    0,  253,  260,  254,  253,  256,    0,    0,
      255,  255,  256,  257,  259,  258,  257,  259,  258,  261,
        0,    0,  261,  260,  263,  262,  263,  264,  262,  265,
      264,  266,  265,    0,  266,    0,  259,    0,    0,  261,
      262,  261,  263,  267,    0,  263,  267,  262,    0,  264,
      270,  265,  268,  266,    0,  268,  269,  266,    0,  269,
        0,    0,    0,  271,  263,  267,  271,  270,  272,  267,
      270,  272,    0,  274,  268,  269,  274,    0,  269,  272,
      268,  273,  273,  273,  276,  271,  275,  276,  275,  270,
      272,  279,  271,  277,  274,  274,  277,  278,    0,  273,

      278,    0,  273,    0,  275,    0,  276,  275,  279,    0,
      280,  279,  280,  281,  282,  277,  281,  282,    0,  278,
      283,  273,    0,  283,    0,  278,  275,    0,  280,  284,
      279,  280,  284,    0,    0,  281,  282,  285,  286,    0,
      285,  286,  283,    0,  284,  281,  282,    0,    0,    0,
      280,  284,  283,  287,  288,  285,  287,  288,    0,  285,
      286,  289,  286,  290,  289,  291,  290,    0,  291,    0,
      295,  294,    0,  295,  296,  287,  288,  296,  290,  287,
      288,  292,  289,  289,  292,  290,  293,  291,  294,  293,
        0,  294,  295,  291,  292,  297,  296,  297,  296,  293,

        0,  298,  299,  292,  298,  299,  300,    0,  293,  300,
      294,  301,  302,  297,  301,  302,  297,    0,    0,    0,
        0,    0,  303,  298,  299,  303,  321,  302,  300,  321,
        0,    0,    0,  301,  302,  297,    0,  303,    0,  301,
      322,  321,    0,  322,  303,  323,  323,  323,  321,  326,
      324,  325,  326,  324,  325,    0,    0,  328,  323,  323,
      328,  322,  322,    0,  323,  324,  325,  323,    0,    0,
      326,  326,  324,  325,  327,  329,    0,  327,  329,  328,
      330,  331,  332,  330,  331,  332,  323,  327,  333,    0,
        0,  333,  334,    0,    0,  334,  327,  329,  335,    0,

        0,  335,  330,  331,  332,  336,  330,  334,  336,    0,
      333,    0,  333,  337,  334,  338,  337,    0,  338,  339,
      335,  340,  339,    0,  340,    0,  341,  336,  336,  341,
      342,    0,    0,  342,    0,  337,  338,  338,    0,  343,
        0,  339,  343,  340,  344,  339,  345,  344,  341,  345,
        0,    0,  342,  340,  343,    0,  346,  347,  341,  346,
      347,  343,  342,    0,  348,    0,  344,  348,  345,  349,
        0,    0,  349,    0,  350,  350,  350,    0,  346,  347,
      351,  351,  351,    0,    0,    0,  348,  352,  352,  352,
      353,  349,  350,  353,    0,  350,  354,    0,  351,  354,

      355,  351,    0,  355,    0,  352,  356,  357,  352,  356,
      357,    0,  353,    0,  350,    0,  353,    0,  354,    0,
      351,  358,  355,  355,  358,  356,    0,  352,  356,  357,
      357,  359,  360,    0,  359,  360,  358,  361,  362,  363,
      361,  362,  363,  358,  364,  359,  365,  364,    0,  365,
      360,    0,  366,  359,  360,  366,  362,    0,    0,  361,
      362,  363,    0,    0,  367,  361,  364,  367,  365,  368,
      364,    0,  368,  369,  366,    0,  369,    0,  386,  384,
      384,  384,  386,  367,  385,  386,  367,  385,    0,    0,
        0,  368,  384,  384,    0,  369,  387,  369,  384,  385,

      387,  384,    0,  387,  386,  388,  385,  389,  390,  388,
      389,  390,  388,  391,    0,    0,  391,    0,    0,    0,
      384,  395,  387,    0,  395,  393,    0,    0,  393,  389,
      390,  388,  392,  392,  392,  391,  389,  390,  394,  391,
      393,  394,    0,  395,    0,  392,  392,  393,  394,  396,
        0,  392,  396,  397,  392,  398,  397,    0,  398,  399,
      394,    0,  399,  404,  400,    0,  404,  400,  396,  405,
        0,  396,  405,  392,    0,  397,  397,  398,  400,  406,
      407,  399,  406,  407,  398,  404,  400,  399,  401,  401,
      401,  405,  402,  402,  402,    0,  403,  403,  403,    0,

      408,  406,  407,  408,  409,  410,  401,  409,  410,  401,
      402,    0,  411,  402,  403,  411,  412,  403,  413,  412,
      414,  413,  408,  414,    0,    0,  409,  410,  401,    0,
      415,    0,  402,  415,  411,    0,  403,    0,  412,    0,
      413,  416,  414,  417,  416,  418,  417,  414,  418,    0,
      419,  415,  415,  419,  416,  420,  421,  422,  420,  421,
      422,  423,    0,  416,  423,  417,  424,  418,  425,  424,
        0,  425,  419,  439,    0,    0,  439,  420,  421,  422,
        0,  440,  436,  423,  440,    0,  436,  424,  424,  436,
      425,  425,  437,  438,    0,  439,  437,  438,  441,  437,

      438,  441,  439,  440,  442,    0,  443,    0,  436,  444,
      440,  442,  444,  443,  442,  443,  443,    0,  437,  438,
      441,    0,  445,  455,  441,  445,  455,  446,    0,  451,
      446,  444,  451,  442,    0,  443,    0,  455,  445,  446,
      447,  447,  447,  448,  445,  455,    0,  448,  449,  446,
      448,  451,  449,  447,  447,  449,  450,    0,  451,  447,
      450,  452,  447,  450,  452,  453,    0,  454,  453,  448,
      454,    0,  456,  457,  449,  456,  457,  458,    0,    0,
      458,  447,  450,  452,    0,    0,    0,  453,  457,  454,
      452,  453,    0,    0,  456,  457,  454,    0,  459,  458,

      456,  459,  460,  461,  462,  460,  461,  462,  463,  464,
      465,  463,  464,  465,  466,  467,  468,  466,  467,  468,
      459,    0,    0,    0,  460,  461,  462,    0,    0,    0,
      463,  464,  465,    0,    0,    0,  466,  467,  468,  469,
      470,  471,  469,  470,  471,  472,    0,  480,  472,  474,
      473,    0,  474,  473,  480,    0,    0,  480,    0,    0,
        0,  469,  470,  471,  469,  473,    0,  472,  481,  471,
      474,  474,  473,  470,    0,  481,  480,  481,  481,  482,
      483,  484,  482,  483,  484,  485,  485,  485,  486,  487,
        0,  486,  487,  484,    0,    0,  483,  481,  485,  485,

        0,  482,  483,  484,  485,  488,  489,  485,  488,  489,
      486,  487,    0,  491,  486,  487,  490,  491,  494,  490,
      491,  494,  489,    0,    0,  492,  485,  488,  489,  492,
      493,  490,  492,  495,  493,  496,  495,  493,  490,  491,
      494,  498,  496,  497,  498,  496,  500,  494,    0,  500,
      497,  492,  497,  497,  499,  495,  493,  499,  500,    0,
        0,    0,  495,  498,  496,  501,  501,  501,  500,    0,
      499,  502,  497,    0,  502,    0,  499,  503,  501,  501,
      503,    0,  504,  505,  501,  504,  505,  501,  506,  507,
      502,  506,  507,  502,  508,  509,    0,  508,  509,  503,

        0,    0,    0,  506,  504,  505,  501,    0,    0,  510,
      506,  507,  510,    0,    0,  512,  508,  509,  512,    0,
      524,  513,  514,  515,  513,  514,  515,  524,  517,    0,
      524,  510,  517,  516,    0,  517,  516,  512,    0,  515,
        0,  512,  510,  513,  514,  515,  518,  513,  516,  524,
      518,    0,  519,  518,  517,  516,  519,  520,  521,  519,
      520,  521,  522,  523,    0,  522,  523,  526,  525,    0,
      529,  525,  518,  529,  526,    0,    0,  526,  519,  520,
      521,    0,    0,  525,  522,  523,  520,  521,  522,  523,
      525,  527,  529,  528,  530,    0,  526,  530,  527,    0,

      528,  527,  528,  528,  532,  531,  533,  532,  531,  533,
      530,  534,    0,    0,  534,  535,  530,  531,  535,    0,
      527,  536,  528,    0,  536,    0,  532,  531,  533,    0,
      532,  535,  533,  534,  537,  538,  536,  535,  537,  538,
      539,  537,  538,  536,  539,  540,  541,  539,  540,  541,
      542,    0,    0,  542,  544,  545,  543,  544,  545,  543,
      537,  538,  546,    0,    0,  546,  539,  540,  541,  543,
        0,    0,  542,  542,  540,  541,  544,  545,  543,  547,
      548,  545,  552,  548,  546,  552,  547,  549,  546,  547,
        0,  550,    0,    0,  549,  548,  551,  549,  550,    0,

        0,  550,  548,  551,  552,  551,  551,  553,  547,  554,
      553,  555,  554,    0,  555,  556,  549,    0,  556,    0,
      550,  554,  555,  553,  557,  551,  556,  557,    0,  553,
        0,  554,  558,  555,    0,  558,    0,  556,  559,  560,
        0,  559,  560,    0,  561,  562,  557,  561,  562,    0,
      557,    0,  563,  566,  558,  563,  566,    0,  558,    0,
      559,  560,  561,    0,  559,  560,  561,  562,  566,  564,
      565,  562,  564,  565,  563,  566,  567,  568,  569,  567,
      568,    0,    0,    0,    0,  569,  565,  564,  569,    0,
      570,  564,  565,  570,  571,    0,    0,  574,  567,  568,

      574,  571,  567,  568,  571,  570,  572,  569,  573,    0,
        0,  575,  570,  572,  575,  573,  572,  573,  573,  574,
        0,  577,  576,  571,  577,  576,  578,  575,  579,  578,
        0,  579,    0,  575,  576,  572,    0,  573,    0,  579,
        0,    0,  580,  577,  576,  580,    0,    0,  578,  577,
      579,    0,  581,  580,  578,  581,    0,  582,  583,  584,
      582,  583,  584,    0,  580,  585,  586,    0,  585,  586,
      587,    0,    0,  587,  581,    0,    0,    0,  581,  582,
      583,  584,    0,  582,  583,  584,  587,  585,  586,    0,
      588,  585,  587,  588,  589,  590,  591,  589,  590,  591,

        0,  592,    0,  593,  592,  588,  593,    0,  594,    0,
      595,  594,  588,  595,    0,    0,  589,  590,  591,    0,
        0,  595,  591,  592,    0,  593,    0,  589,  590,  593,
      594,  597,  595,  596,  594,    0,  596,  600,  597,  598,
        0,  597,  598,  599,  600,  601,  599,  600,  601,  603,
      598,  602,  603,    0,  602,  596,  601,    0,  599,  596,
      597,  598,  602,    0,    0,  599,  600,  601,    0,  604,
        0,  603,  604,  602,  605,  603,  606,  605,    0,  606,
        0,  607,  608,  609,  607,  608,  609,    0,    0,  611,
      613,  604,  611,  613,  610,  604,  605,  610,  606,  609,

      605,    0,  606,  607,  608,  609,    0,  607,    0,  610,
      612,  611,  613,  612,  614,  615,  610,  614,  615,    0,
        0,  616,  617,  613,  616,  617,    0,  618,  619,  612,
      618,  619,  612,    0,    0,  620,  614,  615,    0,    0,
        0,  615,  620,  616,  617,  620,    0,  614,  617,  618,
      619,  622,  621,  618,  619,  621,  623,  624,  622,  623,
      624,  622,  625,    0,  620,  625,  626,  621,  628,  626,
        0,  628,  627,  625,  621,  627,    0,  626,  623,  624,
      622,    0,  628,  627,  625,    0,  629,    0,  626,  629,
      628,    0,  630,  631,  627,  630,  631,  629,  632,  633,

      635,  632,  633,  635,    0,    0,    0,  631,  629,  634,
      636,    0,  634,  636,  630,  631,  637,    0,  630,  637,
      632,  633,  635,  638,  632,  633,  638,  634,    0,    0,
        0,  634,  636,  635,  639,    0,  640,  639,  637,  640,
      642,  641,  637,  636,  641,  638,  643,  642,  645,  643,
      642,  645,    0,    0,  646,    0,  639,  646,  640,    0,
      639,  643,  640,  641,  644,    0,    0,  641,  643,  642,
      645,  644,  647,    0,  644,  647,  646,  648,  645,  649,
      648,  650,  649,    0,  650,    0,  651,    0,  648,  651,
      649,    0,  650,  644,  647,  652,    0,  651,  652,  648,

        0,  649,  653,  650,  654,  653,    0,  654,  651,  655,
      656,  657,  655,  656,  657,  658,  659,  652,  658,  659,
        0,  652,    0,    0,  653,    0,  654,    0,  653,    0,
      654,  655,  656,  657,    0,    0,    0,  658,  659,  658,
        0,    0,  655,  656,  657,  660,    0,    0,  660,  659,
      661,  662,    0,  661,  662,  663,  665,  664,  663,  665,
      664,  666,    0,    0,  666,    0,    0,  660,  664,    0,
        0,  660,  661,  662,  661,    0,    0,  663,  665,  664,
        0,  663,  667,  666,  668,  667,  669,  668,  670,  669,
        0,  670,    0,  667,    0,  668,    0,  669,  671,  670,

      672,  671,    0,  672,  667,    0,  668,    0,  669,  673,
      670,    0,  673,    0,  674,  675,  676,  674,  675,  676,
      671,    0,  672,    0,  671,  677,  672,    0,  677,  674,
      678,  673,    0,  678,    0,  673,  674,  675,  676,  679,
      680,    0,  679,  680,    0,    0,    0,  677,  675,  676,
      681,  682,  678,  681,  682,    0,  683,  684,  677,  683,
      684,  679,  680,  678,  685,  679,  686,  685,    0,  686,
        0,  687,  681,  682,  687,    0,  681,  688,  683,  684,
      688,  689,  687,    0,  689,    0,  685,  690,  686,    0,
      690,  691,  689,  687,  691,  685,    0,  692,    0,  688,

      692,  690,    0,  689,  693,    0,    0,  693,  688,  690,
        0,  694,  695,  691,  694,  695,    0,  696,  698,  692,
      696,  698,    0,    0,  691,  697,  693,    0,  697,    0,
      692,    0,  699,  694,  695,  699,    0,  693,  695,  696,
      698,    0,  700,  701,  694,  700,  701,  697,    0,  702,
      703,  697,  702,  703,  699,  704,  705,  706,  704,  705,
      706,  703,    0,    0,  700,  701,  704,  707,    0,    0,
      707,  702,  703,  708,  705,    0,  708,  704,  705,  706,
      709,  710,    0,  709,  710,  707,    0,  711,  712,  707,
      711,  712,    0,  713,  714,  708,  713,  714,  715,    0,

        0,  715,  709,  710,  718,  719,  708,  718,  719,  711,
      712,  711,    0,    0,  710,  713,  714,    0,  716,  717,
      715,  716,  717,    0,    0,  720,  718,  719,  720,  716,
      717,  721,  722,    0,  721,  722,  720,  718,  719,    0,
      716,  717,  721,  723,    0,  724,  723,  720,  724,  725,
        0,    0,  725,  721,  722,  726,  727,  728,  726,  727,
      728,  729,    0,  731,  729,  723,  731,  724,    0,  732,
      730,  725,  732,  730,    0,  729,  724,  726,  727,  728,
        0,  731,  725,  729,  730,  731,  733,  734,  726,  733,
      734,  732,  730,  735,  736,    0,  735,  736,  738,  737,

      739,  738,  737,  739,  741,    0,    0,  741,  733,  734,
      737,  740,    0,    0,  740,  735,  736,  735,  736,    0,
      738,  737,  739,    0,  742,  740,  741,  742,    0,  738,
        0,  739,  743,  740,    0,  743,  744,  745,    0,  744,
      745,    0,    0,    0,    0,    0,  742,    0,    0,    0,
        0,    0,    0,    0,  743,    0,  743,    0,  744,  745,
        0,    0,    0,    0,    0,    0,    0,  744,  749,  749,
      750,  750,  751,  751,  751,  752,  752,  753,  753,  754,
      754,  755,  755,  755,  756,  756,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/Parse/Lexer.lex"

#line 34 "src/Parse/Lexer.lex"
namespace
{

struct LexerInfo
{
	explicit LexerInfo(const std::string& str, std::size_t start, std::size_t length)
		: input(&str)
		, pos(std::min(start, input->size()))
		, line(0)
		, column(0)
		, curToken(nullptr)
	{
		// Initialize the line and column number.
		for (std::size_t i = 0; i < start; ++i)
		{
			if ((*input)[i] == '\n')
			{
				++line;
				column = 0;
			}
			else
				++column;
		}
	}

	const std::string* input;
	std::size_t pos;
	std::size_t line;
	std::size_t column;
	std::size_t end;
	msl::Token* curToken;
};

void addToken(LexerInfo* info, msl::Token::Type type, const char* text)
{
	std::size_t length = std::strlen(text);
	assert(info->curToken);
	*info->curToken = msl::Token(type, info->pos, length, info->line, info->column);
	info->pos += length;
	assert(info->pos <= info->end);
	info->column += length;
}

void addNewline(LexerInfo* info, const char* text)
{
	unsigned int length = static_cast<unsigned int>(std::strlen(text));
	assert(info->curToken);
	*info->curToken = msl::Token(msl::Token::Type::Newline, info->pos, length, info->line,
		info->column);
	info->pos += length;
	assert(info->pos <= info->end);
	++info->line;
	info->column = 0;
}

void addComment(LexerInfo* info, const char* text)
{
	unsigned int length = static_cast<unsigned int>(std::strlen(text));
	assert(info->curToken);
	*info->curToken = msl::Token(msl::Token::Type::Comment, info->pos, length, info->line,
		info->column);
	info->pos += length;
	assert(info->pos <= info->end);

	// Update the line and column based on newlines within the comment.
	for (unsigned int i = 0; i < length; ++i)
	{
		if (text[i] == '\n')
		{
			++info->line;
			info->column = 0;
		}
		else
			++info->column;
	}
}

} // namespace

#define YY_DECL static bool msllex (yyscan_t yyscanner)
#define YY_EXTRA_TYPE LexerInfo*
#define YY_NO_INPUT
#define YY_NO_UNPUT
#define YY_INPUT(buf, result, max_size) \
	{ \
		result = std::min(max_size, yyextra->end - yyextra->pos); \
		std::memcpy(buf, yyextra->input->c_str() + yyextra->pos, result); \
		yyextra->pos += result; \
	}

#line 1534 "src/Parse/Lexer.cpp"

#define INITIAL 0
#define INCLUDE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int msllex_init (yyscan_t* scanner);

int msllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int msllex_destroy (yyscan_t yyscanner );

int mslget_debug (yyscan_t yyscanner );

void mslset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE mslget_extra (yyscan_t yyscanner );

void mslset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *mslget_in (yyscan_t yyscanner );

void mslset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *mslget_out (yyscan_t yyscanner );

void mslset_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t mslget_leng (yyscan_t yyscanner );

char *mslget_text (yyscan_t yyscanner );

int mslget_lineno (yyscan_t yyscanner );

void mslset_lineno (int _line_number ,yyscan_t yyscanner );

int mslget_column  (yyscan_t yyscanner );

void mslset_column (int _column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mslwrap (yyscan_t yyscanner );
#else
extern int mslwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int msllex (yyscan_t yyscanner);

#define YY_DECL int msllex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			mslensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		msl_load_buffer_state(yyscanner );
		}

	{
#line 128 "src/Parse/Lexer.lex"


#line 1799 "src/Parse/Lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 747 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3187 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 130 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Whitespace, yytext); return true;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 131 "src/Parse/Lexer.lex"
addNewline(yyextra, yytext); BEGIN(INITIAL); return true;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 132 "src/Parse/Lexer.lex"
addNewline(yyextra, yytext); return true;
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 134 "src/Parse/Lexer.lex"
addComment(yyextra, yytext); return true;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 135 "src/Parse/Lexer.lex"
addComment(yyextra, yytext); return true;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 137 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Exclamation, yytext); return true;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 138 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Percent, yytext); return true;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 139 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Tilde, yytext); return true;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Carot, yytext); return true;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 141 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Amperstand, yytext); return true;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bar, yytext); return true;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Asterisk, yytext); return true;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Slash, yytext); return true;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Plus, yytext); return true;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dash, yytext); return true;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Equal, yytext); return true;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftParen, yytext); return true;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightParen, yytext); return true;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftBracket, yytext); return true;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightBracket, yytext); return true;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftBrace, yytext); return true;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightBrace, yytext); return true;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftAngle, yytext); return true;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightAngle, yytext); return true;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Question, yytext); return true;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Colon, yytext); return true;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Dot, yytext); return true;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Comma, yytext); return true;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Semicolon, yytext); return true;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 162 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAnd, yytext); return true;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 163 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOr, yytext); return true;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 164 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXor, yytext); return true;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 165 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LeftShift, yytext); return true;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 166 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::RightShift, yytext); return true;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 167 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::EqualCompare, yytext); return true;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 168 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NotEqual, yytext); return true;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 169 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::LessEual, yytext); return true;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 170 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::GreaterEqual, yytext); return true;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 171 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::XorEqual, yytext); return true;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 172 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AndEqual, yytext); return true;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 173 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::OrEqual, yytext); return true;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 174 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MultiplyEqual, yytext); return true;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 175 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DivideEqual, yytext); return true;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 176 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PlusEqual, yytext); return true;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::MinusEqual, yytext); return true;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolAndEqual, yytext); return true;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 180 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolOrEqual, yytext); return true;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 181 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolXorEqual, yytext); return true;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 182 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolLeftShiftEqual, yytext); return true;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 183 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BoolRightShiftEqual, yytext); return true;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 185 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Const, yytext); return true;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 186 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Centroid, yytext); return true;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 187 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Break, yytext); return true;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 188 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Continue, yytext); return true;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 189 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Do, yytext); return true;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 190 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Else, yytext); return true;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 191 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::For, yytext); return true;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 192 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::If, yytext); return true;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 193 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Discard, yytext); return true;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 194 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Return, yytext); return true;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 195 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Switch, yytext); return true;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 196 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Case, yytext); return true;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 197 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Default, yytext); return true;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 198 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Uniform, yytext); return true;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 199 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Patch, yytext); return true;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 200 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sample, yytext); return true;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 201 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Buffer, yytext); return true;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 202 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Shared, yytext); return true;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 203 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Coherent, yytext); return true;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 204 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Volatile, yytext); return true;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 205 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Restrict, yytext); return true;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 206 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ReadOnly, yytext); return true;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 207 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::WriteOnly, yytext); return true;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 208 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::NonPerspective, yytext); return true;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 209 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Flat, yytext); return true;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 210 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Smooth, yytext); return true;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 211 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Struct, yytext); return true;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 212 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Void, yytext); return true;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 213 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::While, yytext); return true;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 215 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Bool, yytext); return true;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 216 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Float, yytext); return true;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 217 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Double, yytext); return true;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 218 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Int, yytext); return true;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 219 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Uint, yytext); return true;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 220 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec2, yytext); return true;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 221 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec3, yytext); return true;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 222 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::BVec4, yytext); return true;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 223 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec2, yytext); return true;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 224 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec3, yytext); return true;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 225 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IVec4, yytext); return true;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 226 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec2, yytext); return true;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 227 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec3, yytext); return true;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 228 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UVec4, yytext); return true;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 229 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec2, yytext); return true;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 230 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec3, yytext); return true;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 231 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Vec4, yytext); return true;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 232 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec2, yytext); return true;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 233 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec3, yytext); return true;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 234 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DVec4, yytext); return true;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 235 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2, yytext); return true;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 236 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3, yytext); return true;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 237 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4, yytext); return true;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 238 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2, yytext); return true;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 239 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3, yytext); return true;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 240 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4, yytext); return true;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 241 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x2, yytext); return true;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 242 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x3, yytext); return true;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 243 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat2x4, yytext); return true;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 244 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x2, yytext); return true;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 245 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x3, yytext); return true;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 246 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat3x4, yytext); return true;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 247 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x2, yytext); return true;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 248 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x3, yytext); return true;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 249 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Mat4x4, yytext); return true;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 250 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x2, yytext); return true;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 251 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x3, yytext); return true;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 252 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat2x4, yytext); return true;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 253 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x2, yytext); return true;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 254 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x3, yytext); return true;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 255 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat3x4, yytext); return true;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 256 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x2, yytext); return true;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 257 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x3, yytext); return true;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 258 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DMat4x4, yytext); return true;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 259 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1D, yytext); return true;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 260 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2D, yytext); return true;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 261 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler3D, yytext); return true;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 262 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCube, yytext); return true;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 263 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DShadow, yytext); return true;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 264 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DShadow, yytext); return true;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 265 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeShadow, yytext); return true;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 266 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArray, yytext); return true;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 267 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArray, yytext); return true;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 268 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler1DArrayShadow, yytext); return true;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 269 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DArrayShadow, yytext); return true;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 270 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1D, yytext); return true;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 271 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2D, yytext); return true;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 272 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler3D, yytext); return true;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 273 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCube, yytext); return true;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 274 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler1DArray, yytext); return true;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 275 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DArray, yytext); return true;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 276 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1D, yytext); return true;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 277 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2D, yytext); return true;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 278 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler3D, yytext); return true;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 279 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCube, yytext); return true;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 280 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler1DArray, yytext); return true;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 281 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DArray, yytext); return true;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 282 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerBuffer, yytext); return true;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 283 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerBuffer, yytext); return true;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 284 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerBuffer, yytext); return true;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 285 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArray, yytext); return true;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 286 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::SamplerCubeArrayShadow, yytext); return true;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 287 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISamplerCubeArray, yytext); return true;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 288 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USamplerCubeArray, yytext); return true;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 289 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMS, yytext); return true;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 290 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMS, yytext); return true;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 291 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMS, yytext); return true;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 292 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Sampler2DMSArray, yytext); return true;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 293 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ISampler2DMSArray, yytext); return true;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 294 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::USampler2DMSArray, yytext); return true;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 295 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1D, yytext); return true;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 296 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1D, yytext); return true;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 297 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1D, yytext); return true;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 298 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2D, yytext); return true;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 299 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2D, yytext); return true;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 300 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2D, yytext); return true;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 301 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image3D, yytext); return true;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 302 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage3D, yytext); return true;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 303 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage3D, yytext); return true;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 304 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCube, yytext); return true;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 305 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCube, yytext); return true;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 306 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCube, yytext); return true;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 307 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageBuffer, yytext); return true;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 308 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageBuffer, yytext); return true;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 309 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageBuffer, yytext); return true;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 310 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image1DArray, yytext); return true;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 311 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage1DArray, yytext); return true;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 312 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage1DArray, yytext); return true;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 313 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DArray, yytext); return true;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 314 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DArray, yytext); return true;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 315 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DArray, yytext); return true;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 316 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::ImageCubeArray, yytext); return true;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 317 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImageCubeArray, yytext); return true;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 318 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImageCubeArray, yytext); return true;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 319 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMS, yytext); return true;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 320 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMS, yytext); return true;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 321 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMS, yytext); return true;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 322 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Image2DMSArray, yytext); return true;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 323 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IImage2DMSArray, yytext); return true;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 324 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::UImage2DMSArray, yytext); return true;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 325 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::AtomicUint, yytext); return true;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 327 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Hash, yytext); return true;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 328 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Include, yytext); BEGIN(INCLUDE); return true;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 329 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Pragma, yytext); return true;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 330 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Define, yytext); return true;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 331 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifdef, yytext); return true;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 332 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Ifndef, yytext); return true;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 333 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocIf, yytext); return true;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 334 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElif, yytext); return true;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 335 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocElse, yytext); return true;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 336 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocEndif, yytext); return true;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 337 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::PreprocConcat, yytext); return true;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 338 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IncludePath, yytext); BEGIN(INITIAL); return true;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 340 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 341 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 342 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 343 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::IntLiteral, yytext); return true;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 344 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::FloatLiteral, yytext); return true;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 345 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::DoubleLiteral, yytext); return true;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 347 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Identifier, yytext); return true;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 349 "src/Parse/Lexer.lex"
addToken(yyextra, msl::Token::Type::Invalid, yytext); return true;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 351 "src/Parse/Lexer.lex"
ECHO;
	YY_BREAK
#line 2915 "src/Parse/Lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INCLUDE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * msllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( mslwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of msllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mslrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 747 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 747 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 746);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mslrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mslwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mslrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        mslensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            msl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	msl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	msl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void msl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mslpop_buffer_state();
	 *		mslpush_buffer_state(new_buffer);
     */
	mslensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	msl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (mslwrap()) processing, but the only time this flag
	 * is looked at is after mslwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void msl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE msl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mslalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in msl_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mslalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in msl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	msl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with msl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void msl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mslfree((void *) b->yy_ch_buf ,yyscanner );

	mslfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mslrestart() or at EOF.
 */
    static void msl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	msl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then msl_init_buffer was _probably_
     * called from mslrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void msl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		msl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void mslpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	mslensure_buffer_stack(yyscanner);

	/* This block is copied from msl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from msl_switch_to_buffer. */
	msl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void mslpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	msl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		msl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mslensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mslensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mslrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mslensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE msl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mslalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in msl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	msl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to msllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       msl_scan_bytes() instead.
 */
YY_BUFFER_STATE msl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return msl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to msllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE msl_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) mslalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in msl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = msl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in msl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE mslget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int mslget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int mslget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *mslget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *mslget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t mslget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *mslget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void mslset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void mslset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mslset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void mslset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mslset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see msl_switch_to_buffer
 */
void mslset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void mslset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int mslget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void mslset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* msllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int msllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) mslalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* msllex_init_extra has the same functionality as msllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to mslalloc in
 * the yyextra field.
 */

int msllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    mslset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) mslalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    mslset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from msllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * msllex_init()
     */
    return 0;
}

/* msllex_destroy is for both reentrant and non-reentrant scanners. */
int msllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		msl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mslpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	mslfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        mslfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * msllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    mslfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mslalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *mslrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mslfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see mslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 351 "src/Parse/Lexer.lex"



namespace msl
{

class Lexer::Impl
{
public:
	Impl(const std::string& input, std::size_t start, std::size_t length)
		: m_info(input, start, length)
	{
		msllex_init_extra(&m_info,&m_scanner);
	}

	~Impl()
	{
		msllex_destroy(m_scanner);
	}

	yyscan_t m_scanner;
	LexerInfo m_info;
};

std::vector<Token> Lexer::tokenize(const std::string& input, std::size_t start, std::size_t length)
{
	std::vector<Token> tokens;
	Token curToken;

	Lexer lexer(input, start, length);
	while (lexer.nextToken(curToken))
		tokens.push_back(curToken);

	return tokens;
}

Lexer::Lexer(const std::string& input, std::size_t start, std::size_t length)
	: m_impl(new Impl(input, start, length))
{
}

Lexer::~Lexer()
{
}

Lexer::Lexer(Lexer&& other)
	: m_impl(std::move(other.m_impl))
{
}

Lexer& Lexer::operator=(Lexer&& other)
{
	m_impl = std::move(other.m_impl);
	return *this;
}

bool Lexer::nextToken(Token& token)
{
	assert(m_impl);
	m_impl->m_info.curToken = &token;
	return msllex(m_impl->m_scanner);
}

} // msl

